



Computer science - Wikipedia, the free encyclopedia
document.documentElement.className = document.documentElement.className.replace( /(^|\s)client-nojs(\s|$)/, "$1client-js$2" );
window.RLQ = window.RLQ || []; window.RLQ.push( function () {
mw.config.set({"wgCanonicalNamespace":"","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":0,"wgPageName":"Computer_science","wgTitle":"Computer science","wgCurRevisionId":691511586,"wgRevisionId":691511586,"wgArticleId":5323,"wgIsArticle":true,"wgIsRedirect":false,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":["All articles with dead external links","Articles with dead external links from December 2014","Use mdy dates from August 2015","All articles with unsourced statements","Articles with unsourced statements from October 2010","Articles with DMOZ links","Wikipedia articles with LCCN identifiers","Wikipedia articles with GND identifiers","Wikipedia articles with BNF identifiers","Electrical engineering","Electronic engineering","Computer engineering","Computer science"],"wgBreakFrames":false,"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgMonthNamesShort":["","Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"wgRelevantPageName":"Computer_science","wgRelevantArticleId":5323,"wgIsProbablyEditable":true,"wgRestrictionEdit":[],"wgRestrictionMove":[],"wikilove-recipient":"","wikilove-anon":0,"wgWikiEditorEnabledModules":{"toolbar":true,"dialogs":true,"preview":false,"publish":false},"wgBetaFeaturesFeatures":[],"wgMediaViewerOnClick":true,"wgMediaViewerEnabledByDefault":true,"wgVisualEditor":{"pageLanguageCode":"en","pageLanguageDir":"ltr","usePageImages":true,"usePageDescriptions":true},"wgGatherShouldShowTutorial":true,"wgGatherEnableSample":0,"wgGatherPageImageThumbnail":"//upload.wikimedia.org/wikipedia/commons/thumb/3/39/Lambda_lc.svg/100px-Lambda_lc.svg.png","wgULSAcceptLanguageList":["en-us"],"wgULSCurrentAutonym":"English","wgFlaggedRevsParams":{"tags":{"status":{"levels":1,"quality":2,"pristine":3}}},"wgStableRevisionId":null,"wgCategoryTreePageCategoryOptions":"{\"mode\":0,\"hideprefix\":20,\"showcount\":true,\"namespaces\":false}","wgNoticeProject":"wikipedia","wgCentralNoticeCategoriesUsingLegacy":["Fundraising"],"wgWikibaseItemId":"Q21198","wgVisualEditorToolbarScrollOffset":0}); /* @nomin */mw.loader.implement("user.options",function($,jQuery){mw.user.options.set({"variant":"en"});});mw.loader.implement("user.tokens",function ( $, jQuery ) {
mw.user.tokens.set({"editToken":"+\\","patrolToken":"+\\","watchToken":"+\\"}); /* @nomin */ ;

});mw.loader.load(["mediawiki.page.startup","mediawiki.legacy.wikibits","ext.centralauth.centralautologin","ext.gadget.WatchlistBase","ext.gadget.WatchlistGreenIndicators","mmv.head","ext.visualEditor.desktopArticleTarget.init","ext.uls.init","ext.uls.interface","ext.quicksurveys.init","ext.centralNotice.bannerController","skins.vector.js"]);
} );



a:lang(ar),a:lang(kk-arab),a:lang(mzn),a:lang(ps),a:lang(ur){text-decoration:none}













body{behavior:url("/w/static/1.27.0-wmf.7/skins/Vector/csshover.min.htc")}


		
		
		
			

							
						

			Computer science
									
									From Wikipedia, the free encyclopedia
								
												
					Jump to:					navigation, 					search
				
				











Computer science deals with the theoretical foundations of information and computation, together with practical techniques for the implementation and application of these foundations.


Computer science is the scientific and practical approach to computation and its applications. It is the systematic study of the feasibility, structure, expression, and mechanization of the methodical procedures (or algorithms) that underlie the acquisition, representation, processing, storage, communication of, and access to information. An alternate, more succinct definition of computer science is the study of automating algorithmic processes that scale. A computer scientist specializes in the theory of computation and the design of computational systems.[1]
Its fields can be divided into a variety of theoretical and practical disciplines. Some fields, such as computational complexity theory (which explores the fundamental properties of computational and intractable problems), are highly abstract, while fields such as computer graphics emphasize real-world visual applications. Still other fields focus on the challenges in implementing computation. For example, programming language theory considers various approaches to the description of computation, while the study of computer programming itself investigates various aspects of the use of programming language and complex systems. Human–computer interaction considers the challenges in making computers and computations useful, usable, and universally accessible to humans.



Contents


1 History

1.1 Contributions


2 Philosophy

2.1 Name of the field


3 Areas of computer science

3.1 Theoretical computer science

3.1.1 Theory of computation
3.1.2 Information and coding theory
3.1.3 Algorithms and data structures
3.1.4 Programming language theory
3.1.5 Formal methods


3.2 Applied computer science

3.2.1 Artificial intelligence
3.2.2 Computer architecture and engineering
3.2.3 Computer performance analysis
3.2.4 Computer graphics and visualization
3.2.5 Computer security and cryptography
3.2.6 Computational science
3.2.7 Computer networks
3.2.8 Concurrent, parallel and distributed systems
3.2.9 Databases
3.2.10 Software engineering




4 The great insights of computer science
5 Academia
6 Education
7 See also
8 Notes
9 References
10 Further reading
11 External links



History[edit]
Main article: History of computer science




Charles Babbage is credited with inventing the first mechanical computer.






Ada Lovelace is credited with writing the first algorithm intended for processing on a computer.


The earliest foundations of what would become computer science predate the invention of the modern digital computer. Machines for calculating fixed numerical tasks such as the abacus have existed since antiquity, aiding in computations such as multiplication and division. Further, algorithms for performing computations have existed since antiquity, even before the development of sophisticated computing equipment. The ancient Sanskrit treatise Shulba Sutras, or "Rules of the Chord", is a book of algorithms written in 800 BC for constructing geometric objects like altars using a peg and chord, an early precursor of the modern field of computational geometry.
Blaise Pascal designed and constructed the first working mechanical calculator, Pascal's calculator, in 1642.[2] In 1673, Gottfried Leibniz demonstrated a digital mechanical calculator, called the Stepped Reckoner.[3] He may be considered the first computer scientist and information theorist, for, among other reasons, documenting the binary number system. In 1820, Thomas de Colmar launched the mechanical calculator industry[note 1] when he released his simplified arithmometer, which was the first calculating machine strong enough and reliable enough to be used daily in an office environment. Charles Babbage started the design of the first automatic mechanical calculator, his Difference Engine, in 1822, which eventually gave him the idea of the first programmable mechanical calculator, his Analytical Engine.[4] He started developing this machine in 1834 and "in less than two years he had sketched out many of the salient features of the modern computer".[5] "A crucial step was the adoption of a punched card system derived from the Jacquard loom"[5] making it infinitely programmable.[note 2] In 1843, during the translation of a French article on the Analytical Engine, Ada Lovelace wrote, in one of the many notes she included, an algorithm to compute the Bernoulli numbers, which is considered to be the first computer program.[6] Around 1885, Herman Hollerith invented the tabulator, which used punched cards to process statistical information; eventually his company became part of IBM. In 1937, one hundred years after Babbage's impossible dream, Howard Aiken convinced IBM, which was making all kinds of punched card equipment and was also in the calculator business[7] to develop his giant programmable calculator, the ASCC/Harvard Mark I, based on Babbage's Analytical Engine, which itself used cards and a central computing unit. When the machine was finished, some hailed it as "Babbage's dream come true".[8]
During the 1940s, as new and more powerful computing machines were developed, the term computer came to refer to the machines rather than their human predecessors.[9] As it became clear that computers could be used for more than just mathematical calculations, the field of computer science broadened to study computation in general. Computer science began to be established as a distinct academic discipline in the 1950s and early 1960s.[10][11] The world's first computer science degree program, the Cambridge Diploma in Computer Science, began at the University of Cambridge Computer Laboratory in 1953. The first computer science degree program in the United States was formed at Purdue University in 1962.[12] Since practical computers became available, many applications of computing have become distinct areas of study in their own rights.
Although many initially believed it was impossible that computers themselves could actually be a scientific field of study, in the late fifties it gradually became accepted among the greater academic population.[13][14] It is the now well-known IBM brand that formed part of the computer science revolution during this time. IBM (short for International Business Machines) released the IBM 704[15] and later the IBM 709[16] computers, which were widely used during the exploration period of such devices. "Still, working with the IBM [computer] was frustrating […] if you had misplaced as much as one letter in one instruction, the program would crash, and you would have to start the whole process over again".[13] During the late 1950s, the computer science discipline was very much in its developmental stages, and such issues were commonplace.[14]
Time has seen significant improvements in the usability and effectiveness of computing technology. Modern society has seen a significant shift in the users of computer technology, from usage only by experts and professionals, to a near-ubiquitous user base. Initially, computers were quite costly, and some degree of human aid was needed for efficient use—in part from professional computer operators. As computer adoption became more widespread and affordable, less human assistance was needed for common usage.
Contributions[edit]




The German military used the Enigma machine (shown here) during World War II for communications they wanted kept secret. The large-scale decryption of Enigma traffic at Bletchley Park was an important factor that contributed to Allied victory in WWII.[17]


Despite its short history as a formal academic discipline, computer science has made a number of fundamental contributions to science and society—in fact, along with electronics, it is a founding science of the current epoch of human history called the Information Age and a driver of the Information Revolution, seen as the third major leap in human technological progress after the Industrial Revolution (1750–1850 CE) and the Agricultural Revolution (8000–5000 BC).
These contributions include:

The start of the "digital revolution", which includes the current Information Age and the Internet.[18]
A formal definition of computation and computability, and proof that there are computationally unsolvable and intractable problems.[19]
The concept of a programming language, a tool for the precise expression of methodological information at various levels of abstraction.[20]
In cryptography, breaking the Enigma code was an important factor contributing to the Allied victory in World War II.[17]
Scientific computing enabled practical evaluation of processes and situations of great complexity, as well as experimentation entirely by software. It also enabled advanced study of the mind, and mapping of the human genome became possible with the Human Genome Project.[18] Distributed computing projects such as Folding@home explore protein folding.
Algorithmic trading has increased the efficiency and liquidity of financial markets by using artificial intelligence, machine learning, and other statistical and numerical techniques on a large scale.[21] High frequency algorithmic trading can also exacerbate volatility.[22]
Computer graphics and computer-generated imagery have become ubiquitous in modern entertainment, particularly in television, cinema, advertising, animation and video games. Even films that feature no explicit CGI are usually "filmed" now on digital cameras, or edited or postprocessed using a digital video editor.[citation needed]
Simulation of various processes, including computational fluid dynamics, physical, electrical, and electronic systems and circuits, as well as societies and social situations (notably war games) along with their habitats, among many others. Modern computers enable optimization of such designs as complete aircraft. Notable in electrical and electronic circuit design are SPICE, as well as software for physical realization of new (or modified) designs. The latter includes essential design software for integrated circuits.[citation needed]
Artificial intelligence is becoming increasingly important as it gets more efficient and complex. There are many applications of AI, some of which can be seen at home, such as robotic vacuum cleaners. It is also present in video games and on the modern battlefield in drones, anti-missile systems, and squad support robots.

Philosophy[edit]
Main article: Philosophy of computer science
A number of computer scientists have argued for the distinction of three separate paradigms in computer science. Peter Wegner argued that those paradigms are science, technology, and mathematics.[23] Peter Denning's working group argued that they are theory, abstraction (modeling), and design.[24] Amnon H. Eden described them as the "rationalist paradigm" (which treats computer science as a branch of mathematics, which is prevalent in theoretical computer science, and mainly employs deductive reasoning), the "technocratic paradigm" (which might be found in engineering approaches, most prominently in software engineering), and the "scientific paradigm" (which approaches computer-related artifacts from the empirical perspective of natural sciences, identifiable in some branches of artificial intelligence).[25]
Name of the field[edit]
Although first proposed in 1956,[14] the term "computer science" appears in a 1959 article in Communications of the ACM,[26] in which Louis Fein argues for the creation of a Graduate School in Computer Sciences analogous to the creation of Harvard Business School in 1921,[27] justifying the name by arguing that, like management science, the subject is applied and interdisciplinary in nature, while having the characteristics typical of an academic discipline.[26] His efforts, and those of others such as numerical analyst George Forsythe, were rewarded: universities went on to create such programs, starting with Purdue in 1962.[28] Despite its name, a significant amount of computer science does not involve the study of computers themselves. Because of this, several alternative names have been proposed.[29] Certain departments of major universities prefer the term computing science, to emphasize precisely that difference. Danish scientist Peter Naur suggested the term datalogy,[30] to reflect the fact that the scientific discipline revolves around data and data treatment, while not necessarily involving computers. The first scientific institution to use the term was the Department of Datalogy at the University of Copenhagen, founded in 1969, with Peter Naur being the first professor in datalogy. The term is used mainly in the Scandinavian countries. An alternative term, also proposed by Naur, is data science; this is now used for a distinct field of data analysis, including statistics and databases.
Also, in the early days of computing, a number of terms for the practitioners of the field of computing were suggested in the Communications of the ACM—turingineer, turologist, flow-charts-man, applied meta-mathematician, and applied epistemologist.[31] Three months later in the same journal, comptologist was suggested, followed next year by hypologist.[32] The term computics has also been suggested.[33] In Europe, terms derived from contracted translations of the expression "automatic information" (e.g. "informazione automatica" in Italian) or "information and mathematics" are often used, e.g. informatique (French), Informatik (German), informatica (Italy, The Netherlands), informática (Spain, Portugal), informatika (Slavic languages and Hungarian) or pliroforiki (πληροφορική, which means informatics) in Greek. Similar words have also been adopted in the UK (as in the School of Informatics of the University of Edinburgh).[34]
A folkloric quotation, often attributed to—but almost certainly not first formulated by—Edsger Dijkstra, states that "computer science is no more about computers than astronomy is about telescopes."[note 3] The design and deployment of computers and computer systems is generally considered the province of disciplines other than computer science. For example, the study of computer hardware is usually considered part of computer engineering, while the study of commercial computer systems and their deployment is often called information technology or information systems. However, there has been much cross-fertilization of ideas between the various computer-related disciplines. Computer science research also often intersects other disciplines, such as philosophy, cognitive science, linguistics, mathematics, physics, biology, statistics, and logic.
Computer science is considered by some to have a much closer relationship with mathematics than many scientific disciplines, with some observers saying that computing is a mathematical science.[10] Early computer science was strongly influenced by the work of mathematicians such as Kurt Gödel and Alan Turing, and there continues to be a useful interchange of ideas between the two fields in areas such as mathematical logic, category theory, domain theory, and algebra.[14]
The relationship between computer science and software engineering is a contentious issue, which is further muddied by disputes over what the term "software engineering" means, and how computer science is defined.[35] David Parnas, taking a cue from the relationship between other engineering and science disciplines, has claimed that the principal focus of computer science is studying the properties of computation in general, while the principal focus of software engineering is the design of specific computations to achieve practical goals, making the two separate but complementary disciplines.[36]
The academic, political, and funding aspects of computer science tend to depend on whether a department formed with a mathematical emphasis or with an engineering emphasis. Computer science departments with a mathematics emphasis and with a numerical orientation consider alignment with computational science. Both types of departments tend to make efforts to bridge the field educationally if not across all research.
Areas of computer science[edit]
Further information: Outline of computer science
As a discipline, computer science spans a range of topics from theoretical studies of algorithms and the limits of computation to the practical issues of implementing computing systems in hardware and software.[37][38] CSAB, formerly called Computing Sciences Accreditation Board—which is made up of representatives of the Association for Computing Machinery (ACM), and the IEEE Computer Society (IEEE CS)[39]—identifies four areas that it considers crucial to the discipline of computer science: theory of computation, algorithms and data structures, programming methodology and languages, and computer elements and architecture. In addition to these four areas, CSAB also identifies fields such as software engineering, artificial intelligence, computer networking and communication, database systems, parallel computation, distributed computation, human–computer interaction, computer graphics, operating systems, and numerical and symbolic computation as being important areas of computer science.[37]
Theoretical computer science[edit]
Main article: Theoretical computer science
The broader field of theoretical computer science encompasses both the classical theory of computation and a wide range of other topics that focus on the more abstract, logical, and mathematical aspects of computing.
Theory of computation[edit]
Main article: Theory of computation
According to Peter Denning, the fundamental question underlying computer science is, "What can be (efficiently) automated?"[10] Theory of computation is focused on answering fundamental questions about what can be computed and what amount of resources are required to perform those computations. In an effort to answer the first question, computability theory examines which computational problems are solvable on various theoretical models of computation. The second question is addressed by computational complexity theory, which studies the time and space costs associated with different approaches to solving a multitude of computational problems.
The famous P = NP? problem, one of the Millennium Prize Problems,[40] is an open problem in the theory of computation.




P = NP?
GNITIRW-TERCES



Automata theory
Computability theory
Computational complexity theory
Cryptography
Quantum computing theory


Information and coding theory[edit]
Main articles: Information theory and Coding theory
Information theory is related to the quantification of information. This was developed by Claude Shannon to find fundamental limits on signal processing operations such as compressing data and on reliably storing and communicating data.[41] Coding theory is the study of the properties of codes (systems for converting information from one form to another) and their fitness for a specific application. Codes are used for data compression, cryptography, error detection and correction, and more recently also for network coding. Codes are studied for the purpose of designing efficient and reliable data transmission methods.
Algorithms and data structures[edit]
Algorithms and data structures is the study of commonly used computational methods and their computational efficiency.









Analysis of algorithms
Algorithms
Data structures
Combinatorial optimization
Computational geometry


Programming language theory[edit]
Main article: Programming language theory
Programming language theory is a branch of computer science that deals with the design, implementation, analysis, characterization, and classification of programming languages and their individual features. It falls within the discipline of computer science, both depending on and affecting mathematics, software engineering and linguistics. It is an active research area, with numerous dedicated academic journals.







Type theory
Compiler design
Programming languages


Formal methods[edit]
Main article: Formal methods
Formal methods are a particular kind of mathematically based technique for the specification, development and verification of software and hardware systems. The use of formal methods for software and hardware design is motivated by the expectation that, as in other engineering disciplines, performing appropriate mathematical analysis can contribute to the reliability and robustness of a design. They form an important theoretical underpinning for software engineering, especially where safety or security is involved. Formal methods are a useful adjunct to software testing since they help avoid errors and can also give a framework for testing. For industrial use, tool support is required. However, the high cost of using formal methods means that they are usually only used in the development of high-integrity and life-critical systems, where safety or security is of utmost importance. Formal methods are best described as the application of a fairly broad variety of theoretical computer science fundamentals, in particular logic calculi, formal languages, automata theory, and program semantics, but also type systems and algebraic data types to problems in software and hardware specification and verification.
Applied computer science[edit]
Applied computer science aims at identifying certain computer science concepts that can be used directly in solving real world problems.
Artificial intelligence[edit]
Main article: Artificial intelligence
Artificial intelligence (AI) aims to or is required to synthesise goal-orientated processes such as problem-solving, decision-making, environmental adaptation, learning and communication found in humans and animals. From its origins in cybernetics and in the Dartmouth Conference (1956), artificial intelligence research has been necessarily cross-disciplinary, drawing on areas of expertise such as applied mathematics, symbolic logic, semiotics, electrical engineering, philosophy of mind, neurophysiology, and social intelligence. AI is associated in the popular mind with robotic development, but the main field of practical application has been as an embedded component in areas of software development, which require computational understanding. The starting-point in the late 1940s was Alan Turing's question "Can computers think?", and the question remains effectively unanswered although the Turing test is still used to assess computer output on the scale of human intelligence. But the automation of evaluative and predictive tasks has been increasingly successful as a substitute for human monitoring and intervention in domains of computer application involving complex real-world data.







Machine learning
Computer vision
Image processing







Pattern recognition
Data mining
Evolutionary computation







Knowledge representation
Natural language processing
Robotics


Computer architecture and engineering[edit]
Main articles: Computer architecture and Computer engineering
Computer architecture, or digital computer organization, is the conceptual design and fundamental operational structure of a computer system. It focuses largely on the way by which the central processing unit performs internally and accesses addresses in memory.[42] The field often involves disciplines of computer engineering and electrical engineering, selecting and interconnecting hardware components to create computers that meet functional, performance, and cost goals.







Digital logic
Microarchitecture
Multiprocessing







Ubiquitous computing
Systems architecture
Operating systems


Computer performance analysis[edit]
Main article: Computer performance
Computer performance analysis is the study of work flowing through computers with the general goals of improving throughput, controlling response time, using resources efficiently, eliminating bottlenecks, and predicting performance under anticipated peak loads.[43]
Computer graphics and visualization[edit]
Main article: Computer graphics (computer science)
Computer graphics is the study of digital visual contents, and involves synthesis and manipulation of image data. The study is connected to many other fields in computer science, including computer vision, image processing, and computational geometry, and is heavily applied in the fields of special effects and video games.
Computer security and cryptography[edit]
Main articles: Computer security and Cryptography
Computer security is a branch of computer technology, whose objective includes protection of information from unauthorized access, disruption, or modification while maintaining the accessibility and usability of the system for its intended users. Cryptography is the practice and study of hiding (encryption) and therefore deciphering (decryption) information. Modern cryptography is largely related to computer science, for many encryption and decryption algorithms are based on their computational complexity.
Computational science[edit]
Computational science (or scientific computing) is the field of study concerned with constructing mathematical models and quantitative analysis techniques and using computers to analyze and solve scientific problems. In practical use, it is typically the application of computer simulation and other forms of computation to problems in various scientific disciplines.








Numerical analysis
Computational physics
Computational chemistry
Bioinformatics


Computer networks[edit]
Main article: Computer network
This branch of computer science aims to manage networks between computers worldwide.
Concurrent, parallel and distributed systems[edit]
Main articles: Concurrency (computer science) and Distributed computing
Concurrency is a property of systems in which several computations are executing simultaneously, and potentially interacting with each other. A number of mathematical models have been developed for general concurrent computation including Petri nets, process calculi and the Parallel Random Access Machine model. A distributed system extends the idea of concurrency onto multiple computers connected through a network. Computers within the same distributed system have their own private memory, and information is often exchanged among themselves to achieve a common goal.
Databases[edit]
Main article: Database
A database is intended to organize, store, and retrieve large amounts of data easily. Digital databases are managed using database management systems to store, create, maintain, and search data, through database models and query languages.
Software engineering[edit]
Main article: Software engineering
See also: Computer programming
Software engineering is the study of designing, implementing, and modifying software in order to ensure it is of high quality, affordable, maintainable, and fast to build. It is a systematic approach to software design, involving the application of engineering practices to software. Software engineering deals with the organizing and analyzing of software—it doesn't just deal with the creation or manufacture of new software, but its internal maintenance and arrangement. Both computer applications software engineers and computer systems software engineers are projected to be among the fastest growing occupations from 2008 to 2018.
The great insights of computer science[edit]
The philosopher of computing Bill Rapaport noted three Great Insights of Computer Science:[44]

Gottfried Wilhelm Leibniz's, George Boole's, Alan Turing's, Claude Shannon's, and Samuel Morse's insight: there are only two objects that a computer has to deal with in order to represent "anything".




All the information about any computable problem can be represented using only 0 and 1 (or any other bistable pair that can flip-flop between two easily distinguishable states, such as "on/off", "magnetized/de-magnetized", "high-voltage/low-voltage", etc.).



See also: Digital physics

Alan Turing's insight: there are only five actions that a computer has to perform in order to do "anything".




Every algorithm can be expressed in a language for a computer consisting of only five basic instructions:

move left one location;
move right one location;
read symbol at current location;
print 0 at current location;
print 1 at current location.





See also: Turing machine

Corrado Böhm and Giuseppe Jacopini's insight: there are only three ways of combining these actions (into more complex ones) that are needed in order for a computer to do "anything".




Only three rules are needed to combine any set of basic instructions into more complex ones:

sequence: first do this, then do that;
selection: IF such-and-such is the case, THEN do this, ELSE do that;
repetition: WHILE such-and-such is the case DO this.


Note that the three rules of Boehm's and Jacopini's insight can be further simplified with the use of goto (which means it is more elementary than structured programming).



See also: Elementary function arithmetic § Friedman's grand conjecture
Academia[edit]
Further information: List of computer science conferences and Category:Computer science journals
Conferences are important events for computer science research. During these conferences, researchers from the public and private sectors present their recent work and meet. Unlike in most other academic fields, in computer science, the prestige of conference papers is greater than that of journal publications.[45][46] One proposed explanation for this is the quick development of this relatively new field requires rapid review and distribution of results, a task better handled by conferences than by journals.[47]
Education[edit]
See also: Women in computing
Since computer science is a relatively new field, it is not as widely taught in schools and universities as other academic subjects. For example, in 2014, Code.org estimated that only 10 percent of high schools in the United States offered computer science education.[48] A 2010 report by Association for Computing Machinery (ACM) and Computer Science Teachers Association (CSTA) revealed that only 14 out of 50 states have adopted significant education standards for high school computer science.[49] However, computer science education is growing. Some countries, such as Israel, New Zealand and South Korea, have already included computer science in their respective national secondary education curriculum.[50][51] Several countries are following suit.[52]
In most countries, there is a significant gender gap in computer science education. For example, in the US about 20% of computer science degrees in 2012 were conferred to women.[53] This gender gap also exists in other Western countries.[54] However, in some parts of the world, the gap is small or nonexistent. In 2011, approximately half of all computer science degrees in Malaysia were conferred to women.[55] In 2001, women made up 54.5% of computer science graduates in Guyana.[54]
See also[edit]
Main article: Outline of computer science




Computer science portal





Academic genealogy of computer scientists
Informatics
List of academic computer science departments
List of computer scientists
List of publications in computer science
List of pioneers in computer science
List of unsolved problems in computer science
Outline of software engineering
Technology transfer in computer science
Turing Award

 Computer science – Wikipedia book

Notes[edit]


^ In 1851
^ "The introduction of punched cards into the new engine was important not only as a more convenient form of control than the drums, or because programs could now be of unlimited extent, and could be stored and repeated without the danger of introducing errors in setting the machine by hand; it was important also because it served to crystallize Babbage's feeling that he had invented something really new, something much more than a sophisticated calculating machine." Bruce Collier, 1970
^ See the entry "Computer science" on Wikiquote for the history of this quotation.


References[edit]


^ "WordNet Search—3.1". Wordnetweb.princeton.edu. Retrieved 2012-05-14.&#160;
^ "Blaise Pascal". School of Mathematics and Statistics University of St Andrews, Scotland.&#160;
^ "A Brief History of Computing".&#160;
^ "Science Museum—Introduction to Babbage". Archived from the original on 2006-09-08. Retrieved 2006-09-24.&#160;
^ a b Anthony Hyman (1982). Charles Babbage, pioneer of the computer.&#160;
^ "A Selection and Adaptation From Ada's Notes found in Ada, The Enchantress of Numbers," by Betty Alexandra Toole Ed.D. Strawberry Press, Mill Valley, CA". Archived from the original on 10 February 2006. Retrieved 2006-05-04.&#160;
^ "In this sense Aiken needed IBM, whose technology included the use of punched cards, the accumulation of numerical data, and the transfer of numerical data from one register to another", Bernard Cohen, p.44 (2000)
^ Brian Randell, p. 187, 1975
^ The Association for Computing Machinery (ACM) was founded in 1947.
^ a b c Denning, Peter J. (2000). "Computer Science: The Discipline" (PDF). Encyclopedia of Computer Science. Archived from the original (PDF) on 2006-05-25.&#160;
^ "Some EDSAC statistics". Cl.cam.ac.uk. Retrieved 2011-11-19.&#160;
^ "Computer science pioneer Samuel D. Conte dies at 85". Purdue Computer Science. July 1, 2002. Retrieved December 12, 2014.&#160;
^ a b Levy, Steven (1984). Hackers: Heroes of the Computer Revolution. Doubleday. ISBN&#160;0-385-19195-2.&#160;
^ a b c d Tedre, Matti (2014). The Science of Computing: Shaping a Discipline. Taylor and Francis / CRC Press.&#160;
^ "IBM 704 Electronic Data Processing System—CHM Revolution". Computerhistory.org. Retrieved 2013-07-07.&#160;
^ "IBM 709: a powerful new data processing system" (PDF). Computer History Museum. Retrieved December 12, 2014.&#160;
^ a b David Kahn, The Codebreakers, 1967, ISBN 0-684-83130-9.
^ a b http://www.cis.cornell.edu/Dean/Presentations/Slides/bgu.pdf[dead link]
^ Constable, R. L. (March 2000). "Computer Science: Achievements and Challenges circa 2000" (PDF).&#160;
^ Abelson, H.; G.J. Sussman with J. Sussman (1996). Structure and Interpretation of Computer Programs (2nd ed.). MIT Press. ISBN&#160;0-262-01153-0. The computer revolution is a revolution in the way we think and in the way we express what we think. The essence of this change is the emergence of what might best be called procedural epistemology — the study of the structure of knowledge from an imperative point of view, as opposed to the more declarative point of view taken by classical mathematical subjects.&#160;
^ "Black box traders are on the march". The Telegraph. August 26, 2006. Archived from the original on 8 October 2014.&#160;
^ "The Impact of High Frequency Trading on an Electronic Market". Papers.ssrn.com. doi:10.2139/ssrn.1686004. Retrieved 2012-05-14.&#160;
^ Wegner, P. (October 13–15, 1976). Research paradigms in computer science—Proceedings of the 2nd international Conference on Software Engineering. San Francisco, California, United States: IEEE Computer Society Press, Los Alamitos, CA.&#160;
^ Denning, P. J.; Comer, D. E.; Gries, D.; Mulder, M. C.; Tucker, A.; Turner, A. J.; Young, P. R. (Jan 1989). "Computing as a discipline". Communications of the ACM 32: 9–23. doi:10.1145/63238.63239.&#160;
^ Eden, A. H. (2007). "Three Paradigms of Computer Science" (PDF). Minds and Machines 17 (2): 135–167. doi:10.1007/s11023-007-9060-8.&#160;
^ a b Louis Fine (1959). "The Role of the University in Computers, Data Processing, and Related Fields". Communications of the ACM 2 (9): 7–14. doi:10.1145/368424.368427.&#160;
^ "Stanford University Oral History". Stanford University. Retrieved May 30, 2013.&#160;
^ Donald Knuth (1972). "George Forsythe and the Development of Computer Science". Comms. ACM. Archived August 12, 2014 at the Wayback Machine
^ Matti Tedre (2006). "The Development of Computer Science: A Sociocultural Perspective" (PDF). p.&#160;260. Retrieved December 12, 2014.&#160;
^ Peter Naur (1966). "The science of datalogy". Communications of the ACM 9 (7): 485. doi:10.1145/365719.366510.&#160;
^ "Communications of the ACM". Communications of the ACM 1 (4): 6. doi:10.1145/368796.368802.&#160;
^ Communications of the ACM 2(1):p.4
^ IEEE Computer 28(12):p.136
^ P. Mounier-Kuhn, L'Informatique en France, de la seconde guerre mondiale au Plan Calcul. L'émergence d'une science, Paris, PUPS, 2010, ch. 3 &amp; 4.
^ Tedre, M. (2011). "Computing as a Science: A Survey of Competing Viewpoints". Minds and Machines 21 (3): 361–387. doi:10.1007/s11023-011-9240-4.&#160;
^ Parnas, D. L. (1998). "Software engineering programmes are not computer science programmes". Annals of Software Engineering 6: 19–37. doi:10.1023/A:1018949113292.&#160;, p. 19: "Rather than treat software engineering as a subfield of computer science, I treat it as an element of the set, Civil Engineering, Mechanical Engineering, Chemical Engineering, Electrical Engineering, […]"
^ a b Computing Sciences Accreditation Board (May 28, 1997). "Computer Science as a Profession". Archived from the original on 2008-06-17. Retrieved 2010-05-23.&#160;
^ Committee on the Fundamentals of Computer Science: Challenges and Opportunities, National Research Council (2004). Computer Science: Reflections on the Field, Reflections from the Field. National Academies Press. ISBN&#160;978-0-309-09301-9.&#160;
^ "CSAB Leading Computer Education". CSAB. 2011-08-03. Retrieved 2011-11-19.&#160;
^ Clay Mathematics Institute P = NP Archived October 14, 2013 at the Wayback Machine
^ P. Collins, Graham (October 14, 2002). "Claude E. Shannon: Founder of Information Theory". Scientific American. Retrieved December 12, 2014.&#160;
^ A. Thisted, Ronald (April 7, 1997). "Computer Architecture" (PDF). The University of Chicago.&#160;
^ Wescott, Bob (2013). The Every Computer Performance Book, Chapter 3: Useful laws. CreateSpace. ISBN&#160;1482657759.&#160;
^ "What Is Computation?". buffalo.edu.&#160;
^ Meyer, Bertrand (April 2009). "Viewpoint: Research evaluation for computer science". Communications of the ACM 25 (4): 31–34. doi:10.1145/1498765.1498780.&#160;
^ Patterson, David (August 1999). "Evaluating Computer Scientists and Engineers For Promotion and Tenure". Computing Research Association.&#160;
^ Fortnow, Lance (August 2009). "Viewpoint: Time for Computer Science to Grow Up". Communications of the ACM 52 (8): 33–35. doi:10.1145/1536616.1536631.&#160;
^ "Computer Science: Not Just an Elective Anymore". Education Week. February 25, 2014.&#160;
^ "Running On Empty" (PDF). October 2010.&#160;
^ "A is for algorithm". The Economist. April 26, 2014.&#160;
^ "Computing at School International comparisons" (PDF). Retrieved 20 July 2015.&#160;
^ "Adding Coding to the Curriculum". New York Times. March 23, 2014.&#160;
^ "IT gender gap: Where are the female programmers?". Retrieved 20 July 2015.&#160;
^ a b "IT gender gap: Where are the female programmers?".&#160;
^ "what gender is science" (PDF). Retrieved 20 July 2015.&#160;


Further reading[edit]


Overview


Tucker, Allen B. (2004). Computer Science Handbook (2nd ed.). Chapman and Hall/CRC. ISBN&#160;1-58488-360-X.&#160;

"Within more than 70 chapters, every one new or significantly revised, one can find any kind of information and references about computer science one can imagine. […] all in all, there is absolute nothing about Computer Science that can not be found in the 2.5 kilogram-encyclopaedia with its 110 survey articles […]." (Christoph Meinel, Zentralblatt MATH)


van Leeuwen, Jan (1994). Handbook of Theoretical Computer Science. The MIT Press. ISBN&#160;0-262-72020-5.&#160;

"[…] this set is the most unique and possibly the most useful to the [theoretical computer science] community, in support both of teaching and research […]. The books can be used by anyone wanting simply to gain an understanding of one of these areas, or by someone desiring to be in research in a topic, or by instructors wishing to find timely information on a subject they are teaching outside their major areas of expertise." (Rocky Ross, SIGACT News)


Ralston, Anthony; Reilly, Edwin D.; Hemmendinger, David (2000). Encyclopedia of Computer Science (4th ed.). Grove's Dictionaries. ISBN&#160;1-56159-248-X.&#160;

"Since 1976, this has been the definitive reference work on computer, computing, and computer science. […] Alphabetically arranged and classified into broad subject areas, the entries cover hardware, computer systems, information and data, software, the mathematics of computing, theory of computation, methodologies, applications, and computing milieu. The editors have done a commendable job of blending historical perspective and practical reference information. The encyclopedia remains essential for most public and academic library reference collections." (Joe Accardin, Northeastern Illinois Univ., Chicago)


Edwin D. Reilly (2003). Milestones in Computer Science and Information Technology. Greenwood Publishing Group. ISBN&#160;978-1-57356-521-9.&#160;


Selected papers


Knuth, Donald E. (1996). Selected Papers on Computer Science. CSLI Publications, Cambridge University Press.&#160;
Collier, Bruce. The little engine that could've: The calculating machines of Charles Babbage. Garland Publishing Inc. ISBN&#160;0-8240-0043-9.&#160;
Cohen, Bernard (2000). Howard Aiken, Portrait of a computer pioneer. The MIT press. ISBN&#160;978-0-2625317-9-5.&#160;
Tedre, Matti (2014). The Science of Computing: Shaping a Discipline. CRC Press, Taylor &amp; Francis.&#160;
Randell, Brian (1973). The origins of Digital computers, Selected Papers. Springer-Verlag. ISBN&#160;3-540-06169-X.&#160;

"Covering a period from 1966 to 1993, its interest lies not only in the content of each of these papers — still timely today — but also in their being put together so that ideas expressed at different times complement each other nicely." (N. Bernard, Zentralblatt MATH)




Articles


Peter J. Denning. Is computer science science?, Communications of the ACM, April 2005.
Peter J. Denning, Great principles in computing curricula, Technical Symposium on Computer Science Education, 2004.
Research evaluation for computer science, Informatics Europe report. Shorter journal version: Bertrand Meyer, Christine Choppy, Jan van Leeuwen and Jorgen Staunstrup, Research evaluation for computer science, in Communications of the ACM, vol. 52, no. 4, pp.&#160;31–34, April 2009.


Curriculum and classification


Association for Computing Machinery. 1998 ACM Computing Classification System. 1998.
Joint Task Force of Association for Computing Machinery (ACM), Association for Information Systems (AIS) and IEEE Computer Society (IEEE CS). Computing Curricula 2005: The Overview Report. September 30, 2005.
Norman Gibbs, Allen Tucker. "A model curriculum for a liberal arts degree in computer science". Communications of the ACM, Volume 29 Issue 3, March 1986.


External links[edit]



Find more about
Computer science
at Wikipedia's sister projects




Definitions from Wiktionary



Media from Commons



News stories from Wikinews



Quotations from Wikiquote



Source texts from Wikisource



Textbooks from Wikibooks



Learning resources from Wikiversity




Library resources about
Computer science





Resources in your library
Resources in other libraries





Computer science at DMOZ
Scholarly Societies in Computer Science
Best Papers Awards in Computer Science since 1996
Photographs of computer scientists by Bertrand Meyer
EECS.berkeley.edu


Bibliography and academic search engines


CiteSeerx (article): search engine, digital library and repository for scientific and academic papers with a focus on computer and information science.
DBLP Computer Science Bibliography (article): computer science bibliography website hosted at Universität Trier, in Germany.
The Collection of Computer Science Bibliographies (article)


Professional organizations


Association for Computing Machinery
IEEE Computer Society
Informatics Europe
AAAI
AAAS Computer Science


Misc


Computer Science—Stack Exchange: a community-run question-and-answer site for computer science
What is computer science
Is computer science science?









v
t
e


Major fields of computer science







Note: Computer science can also be divided into different topics or fields according to the ACM Computing Classification System.






Hardware



Printed circuit board
Peripheral
Integrated circuit
Very-large-scale integration
Energy consumption
Electronic design automation








Computer systems
organization



Computer architecture
Embedded system
Real-time computing
Dependability








Networks



Network architecture
Network protocol
Network components
Network scheduler
Network performance evaluation
Network service








Software organization



Interpreter
Middleware
Virtual machine
Operating system
Software quality








Software notations
and tools



Programming paradigm
Programming language
Compiler
Domain-specific language
Modeling language
Software framework
Integrated development environment
Software configuration management
Software library
Software repository








Software development



Software development process
Requirements analysis
Software design
Software implementation
Software verification and validation
Software maintenance
Programming team
Open-source model








Theory of computation



Model of computation
Formal language
Automata theory
Computational complexity theory
Logic
Semantics








Algorithms



Algorithm design
Analysis of algorithms
Randomized algorithm
Computational geometry








Mathematics
of computing



Discrete mathematics
Probability
Statistics
Mathematical software
Information theory
Mathematical analysis
Numerical analysis








Information
systems



Database management system
Information storage systems
Enterprise information system
Social information systems
Geographic information system
Decision support system
Process control system
Multimedia information system
Data mining
Digital library
Computing platform
Digital marketing
World Wide Web
Information retrieval








Security



Cryptography
Formal methods
Security services
Intrusion detection system
Hardware security
Network security
Information security
Application security








Human–computer
interaction



Interaction design
Social computing
Ubiquitous computing
Visualization
Accessibility








Concurrency



Concurrent computing
Parallel computing
Distributed computing
Multithreading
Multiprocessing








Artificial
intelligence



Natural language processing
Knowledge representation and reasoning
Computer vision
Automated planning and scheduling
Search methodology
Control method
Philosophy of artificial intelligence
Distributed artificial intelligence








Machine learning



Supervised learning
Unsupervised learning
Reinforcement learning
Multi-task learning
Machine learning algorithms
Cross-validation








Graphics



Animation
Rendering
Image manipulation
Graphics processing unit
Mixed reality
Virtual reality
Image compression
Solid modeling








Applied
computing



E-commerce
Enterprise software
Computational mathematics
Computational physics
Computational chemistry
Computational biology
Computational social science
Computational engineering
Computational healthcare
Digital art
Electronic publishing
Cyberwarfare
Electronic voting
Video game
Word processing
Operations research
Educational technology
Document management











 Computer science portal
















v
t
e


Technology









Outline of technology
Outline of applied science








Fields




Agriculture



Agricultural engineering
Aquaculture
Fisheries science
Food chemistry
Food engineering
Food microbiology
Food technology
GURT
ICT
Nutrition








Biomedical



Bioinformatics
Biological engineering
Biomechatronics
Biomedical engineering
Biotechnology
Cheminformatics
Genetic engineering
Healthcare science
Medical research
Medical technology
Nanomedicine
Neuroscience
Neurotechnology
Pharmacology
Reproductive technology
Tissue engineering








Buildings and
Construction



Acoustical engineering
Architectural engineering
Building services engineering
Civil engineering
Construction engineering
Domestic technology
Facade engineering
Fire protection engineering
Safety engineering
Sanitary engineering
Structural engineering








Educational



Educational software
Digital technologies in education
ICT in education
Impact
Multimedia learning
Virtual campus
Virtual education








Energy



Nuclear engineering
Nuclear technology
Petroleum engineering
Soft energy technology








Environmental



Clean technology
Clean coal technology
Ecological design
Ecological engineering
Ecotechnology
Environmental engineering
Environmental engineering science
Green building
Green nanotechnology
Landscape engineering
Renewable energy
Sustainable design
Sustainable engineering








Industrial



Automation
Business informatics
Engineering management
Enterprise engineering
Financial engineering
Industrial biotechnology
Industrial engineering
Metallurgy
Mining engineering
Productivity improving technologies
Research and development
Tribology








IT and
communications



Artificial intelligence
Broadcast engineering
Computer engineering
Computer science
Financial technology
Information technology
Music technology
Ontology engineering
RF engineering
Software engineering
Telecommunications engineering
Visual technology
Web engineering








Military



Army engineering maintenance
Electronic warfare
Military communications
Military engineering
Stealth technology








Transport



Aerospace engineering
Automotive engineering
Naval architecture
Space technology
Traffic engineering
Transport engineering












Others




applied science



Cryogenics
Electro-optics
Electronics
Engineering geology
Engineering physics
Hydraulics
Materials science
Microfabrication
Nanoengineering








engineering (list)



Audio
Biochemical
Ceramic
Chemical
Polymer
Control
Electrical
Electronic
Entertainment
Geotechnical
Hydraulic
Mechanical
Mechatronics
Optical
Protein
Quantum
Robotics

Animatronics


Systems

















Components



Infrastructure
Invention

Timeline


Knowledge
Machine
Skill

Craft


Tool

Gadget










Scales



Femtotechnology
Picotechnology
Nanotechnology
Microtechnology
Macro-engineering
Megascale engineering








History



Prehistoric technology
Neolithic Revolution
Ancient technology
Medieval technology
Renaissance technology
Industrial Revolution

Second


Jet Age
Digital Revolution
Information Age








Theories and
concepts



Appropriate technology
Collingridge dilemma
Critique of technology
Diffusion of innovations
Disruptive innovation
Dual-use technology
Ephemeralization
High tech
Hype cycle
Low-technology
Mature technology
Strategy of Technology
Technicism
Techno-progressivism
Technocapitalism
Technocentrism
Technocracy
Technocriticism
Technoetic
Technogaianism
Technological alliance
Technological apartheid
Technological change
Technological convergence
Technological determinism
Technological escalation
Technological evolution
Technological fix
Technological innovation system
Technological momentum
Technological nationalism
Technological paradigm
Technological rationality
Technological revival
Technological revolution
Technological self-efficacy
Technological singularity

Singularitarianism


Technological somnambulism
Technological transitions
Technological unemployment
Technological utopianism
Technology lifecycle

Technology acceptance model
Technology adoption lifecycle


Technomancy
Technorealism
Technoromanticism
Technoscience
Transhumanism








Other



Emerging technologies

List


Fictional technology
Technopaganism
High-technology business districts
Kardashev scale
List of technologies
Philosophy of technology

Ethics of technology / Technoethics


Science, technology and society

Technology dynamics
Science and technology by country


STEM fields

Pre-STEM
women


STEAM fields
Technology alignment
Technology assessment
Technology brokering
Technology companies
Technology demonstration
Technology education

Technical universities and colleges


Technology evangelist
Technology fusion
Technology governance
Technology integration
Technology journalism
Technology management
Technology museum
Technology policy
Technology shock
Technology strategy
Technology and society
Technology transfer
Technophilia
Technophobia
Technoself
Technosexual
Technosignature
Technostress
Terotechnology











 Book
 Category
 Commons
 Portal
 Wikiquotes
















v
t
e


Sub-disciplines of computing









Hardware
Software
Firmware








Information system



Information security
Multimedia database
Intelligent database
Big data
Knowledge-based systems
Recommender System
Geographic information systems
Decision support system
Data engineering
Knowledge engineering
Fuzzy logic
Data analysis
System analysis and design
Project management
Knowledge management
Data integration
High-performance computing
Semantic web








Computer science



Database management system
Communications system
Computational geometry
Machine learning
Data mining
Parallel programming
Coding theory
Theory of computation
Constraint programming
Computational biology (Bioinformatics)
Design and analysis of algorithms
Information retrieval
Computational science
Symbolic computation
Distributed computing
Evolutionary computation
Natural computation
Combinatorial optimization
Parallel processing








Computer engineering



Multimedia
Satellite navigation (GNSS)
Embedded systems
Real-time computing
Computer architecture
Pair programming
System programming
Neural networks
Speech recognition
Signal analysis
Computer vision (Visual computing)
IC Design
Voice over IP
Speech synthesis
Human-Computer Interaction
Microprocessor
Image processing
Natural language processing
Speech processing
Digital signal processing








Software engineering



Software maintenance
Formal methods
Software quality
Software quality assurance
Measurement Software
Fault-tolerant software
Software testing
Enterprise architecture
Software architecture
Software engineering economics
Agile software development
Software design pattern
Software modelling
Systems analyst
Object-oriented analysis and design (UML)
Requirements analysis
Software development
Software configuration management
Software project management
Software engineering management
Software development process (Software release life cycle)
Software design
Software deployment
Software enhancement








Computer network



Network security
Secure electronic transaction
Network Performance Evaluation (QoS)
Cloud computing
Routing
Distributed systems (Distributed database)
Information theory
Wireless network
Next-generation network
Cellular network
Optical transport network (Optical networking)
Cryptography
Network simulation
Pattern recognition
Network administrators
Network equipment
Network design
Ubiquitous and Mobile computing
Data center
Mobile communications
Digital communication
Communications satellite
Telecommunication (Telecommunications network)








Business informatics



ITIL
ITSM
Enterprise resource planning
Electronic business
Business intelligence
Human Resources Development
Security management
Configuration management
Technology management
Power management
Service management
Project management
Systems management
Network management
Content management
Customer relationship management
Incident management
Asset management
Integrated management
Communications management
System administrator













Authority control



LCCN: sh89003285
GND: 4026894-9
BNF: cb11932109b (data)
BNE: XX525961















					
						Retrieved from "https://en.wikipedia.org/w/index.php?title=Computer_science&amp;oldid=691511586"					
				Categories: Electrical engineeringElectronic engineeringComputer engineeringComputer scienceHidden categories: All articles with dead external linksArticles with dead external links from December 2014Use mdy dates from August 2015All articles with unsourced statementsArticles with unsourced statements from October 2010Articles with DMOZ linksWikipedia articles with LCCN identifiersWikipedia articles with GND identifiersWikipedia articles with BNF identifiers				
							
		
		
			Navigation menu

			
									
						Personal tools
						
							Create accountLog in						
					
									
										
						Namespaces
						
															Article
															Talk
													
					
										
												
							Variants
						

						
							
															
						
					
									
				
										
						Views
						
															Read
															Edit
															View history
													
					
										
						More

						
							
															
						
					
										
						
							Search
						

						
							
														
						
					
									
			
			
				
						
			Navigation

			
									
						Main pageContentsFeatured contentCurrent eventsRandom articleDonate to WikipediaWikipedia store					
							
		
			
			Interaction

			
									
						HelpAbout WikipediaCommunity portalRecent changesContact page					
							
		
			
			Tools

			
									
						What links hereRelated changesUpload fileSpecial pagesPermanent linkPage informationWikidata itemCite this page					
							
		
			
			Print/export

			
									
						Create a bookDownload as PDFPrintable version					
							
		
			
			Languages

			
									
						AfrikaansAlemannischአማርኛالعربيةAragonésArmãneashtiঅসমীয়াAsturianuAzərbaycancaবাংলাBân-lâm-gúБеларускаяБеларуская (тарашкевіца)‎भोजपुरीБългарскиBoarischBosanskiBrezhonegCatalàČeštinaCorsuCymraegDanskDeutschEestiΕλληνικάEmiliàn e rumagnòlEspañolEsperantoEstremeñuEuskaraفارسیFøroysktFrançaisFryskFurlanGaeilgeGaelgGalego客家語/Hak-kâ-ngî한국어Հայերենहिन्दीHrvatskiIdoBahasa IndonesiaInterlinguaInterlingueᐃᓄᒃᑎᑐᑦ/inuktitutÍslenskaItalianoעבריתKalaallisutಕನ್ನಡქართულიKaszëbscziҚазақшаKreyòl ayisyenKurdîLadinoLatgaļuLatinaLatviešuLëtzebuergeschLietuviųLimburgsLojbanMagyarМакедонскиMalagasyമലയാളംBahasa MelayuMirandésМонголNederlandsNedersaksiesनेपालीनेपाल भाषा日本語NapulitanoNordfriiskNorsk bokmålNorsk nynorskNovialOccitanОлык марийଓଡ଼ିଆOʻzbekcha/ўзбекчаपालिپښتوPicardPiemontèisPolskiPortuguêsQaraqalpaqshaRomânăРусиньскыйРусскийसंस्कृतम्SarduScotsSeelterskShqipSicilianuසිංහලSimple EnglishSlovenčinaSlovenščinaکوردیی ناوەندیСрпски / srpskiSrpskohrvatski / српскохрватскиSuomiSvenskaTagalogதமிழ்TaqbaylitТатарча/tatarçaతెలుగుไทยትግርኛТоҷикӣTürkçeTürkmençeУкраїнськаاردوئۇيغۇرچە / UyghurcheVènetoTiếng ViệtVõroWalonWinarayWolof吴语Yorùbá粵語ZazakiZeêuwsŽemaitėška中文					
				Edit links			
		
				
		
		
							
											 This page was last modified on 20 November 2015, at 09:01.
											Text is available under the Creative Commons Attribution-ShareAlike License;
additional terms may apply.  By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization.
									
							
											Privacy policy
											About Wikipedia
											Disclaimers
											Contact Wikipedia
											Developers
											