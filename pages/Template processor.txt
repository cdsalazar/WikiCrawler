


		
		
		
			

							
						

			Template processor
									
									From Wikipedia, the free encyclopedia
								  (Redirected from Templating language)
												
					Jump to:					navigation, 					search
				
				



A diagram illustrating all of the basic elements and processing flow of a template engine.


A template processor (also known as a template engine or template parser) is software designed to combine one or more templates with a data model to produce one or more result documents.[1][2][3] The language that the templates are written in is known as a template language or templating language. For purposes of this article, a result document is any kind of formatted output, including documents, web pages, or source code (in source code generation), either in whole or in fragments. A template engine is ordinarily included as a part of a web template system or application framework, and may be used also as preprocessor or filter.



Contents


1 Typical features
2 Embedded template engines
3 System elements

3.1 Data model
3.2 Source template
3.3 Template engine
3.4 Result documents
3.5 Operating System Templating


4 Uses

4.1 Template engine
4.2 Document generation
4.3 Source code generation
4.4 Software functionality


5 Comparison
6 Benefits of using template engines
7 See also
8 References
9 External links



Typical features[edit]
Template engines typically include features common to most high-level programming languages, with an emphasis on features for processing plain text.
Such features include:

variables and functions
text replacement
file inclusion (or transclusion)
conditional evaluation and loops

Embedded template engines[edit]
While template processors are typically a separate piece of software, used as part of a system or framework, simple templating languages are commonly included in the string processing features of general-purpose programming languages, and in text processing programs, notably text editors or word processors. The templating languages are generally simple substitution-only languages, in contrast to the more sophisticated facilities in full-blown template processors, but may contain some logic.
Simple examples include printf format strings, found in many programming languages, and snippets, found in a number of text editors and source code editors. In word processors, templates are a common feature, while automatic filling in of the templates is often referred to as mail merge.
An illustrative example of the complementary nature of parsing and templating is the s (substitute) command in the sed text processor, originating from search-and-replace in the ed text editor. Substitution commands are of the form s/regexp/replacement/, where regexp is a regular expression, for parsing input, and replacement is a simple template for output, either literal text, or a format string containing the characters &amp; for "entire match" or the special escape sequences \1 through \9 for the nth sub-expression. For example, s/(cat|dog)s?/\1s/g replaces all occurrences of "cat" or "dog" with "cats" or "dogs", without duplicating an existing "s": (cat|dog) is the 1st (and only) sub-expression in the regexp, and \1 in the format string substitutes this into the output.
System elements[edit]
All template processing systems consist of at least these primary elements:

an associated data model;
one or more source templates;
a processor or template engine;
generated output in the form of result documents.

Data model[edit]
This may be a relational database, a source file such as XML, an alternate format of flat file database, a spreadsheet or any of other various sources of preformatted data. Some template processing systems are limited in the types of data that can be used. Others are designed for maximum flexibility and allow many different types of data.
Source template[edit]
Source templates are traditionally specified:

according to a pre-existing programming language;
according to a specially-defined template language;
according to the features of a hosting software application; or
according to a hybrid combination of some or all of the above.

Template engine[edit]
The template engine is responsible for:

connecting to the data model;
processing the code specified in the source templates; and
directing the output to a specific pipeline, text file, or stream.

Additionally some template engines allow additional configuration options.
Result documents[edit]
These may consist of an entire document or a document fragment.
Operating System Templating[edit]
In an o/s context, templating refers to creating a single virtual machine image as a guest operating system, then saving it as a tool for multiple running virtual machines (Gagne, 2012, p. 716). The technique is used both in virtualization and cloud computing management, and is common in large server warehouses. [4]
Uses[edit]
Template processing is used in various contexts for different purposes. The specific purpose is ordinarily contingent upon the software application or template engine in use. However, the flexibility of template processing systems often enables unconventional uses for purposes not originally intended by the original designers.
Template engine[edit]
A template engine is a specific kind of template processing module that exhibits all of the major features of a modern programming language. The term template engine evolved as a generalized description of programming languages whose primary or exclusive purpose was to process templates and data to output text. The use of this term is most notably applied to web development using a web template system, and it is also applied to other contexts as well.[5]
Document generation[edit]
Document generation frameworks typically use template processing as the central model for generating documents.
Source code generation[edit]
Source code generation tools support generation of source code (as the result documents) from abstract data models (e.g., UML, relational data, domain-specific enterprise data stores) for particular application domains, particular organizations, or in simplifying the production process for computer programmers.
Software functionality[edit]
A web template engine processes web templates and source data (typically from a relational database) to produce one or more output web pages or page fragments. It is ordinarily included as a part of a web template system or application framework. Currently, template processing software is most frequently used in the context of development for the web.
Comparison[edit]
XSLT is a template processing model designed by W3C. It is designed primarily for transformations on XML data (into web documents or other output).
Programming languages such as Perl, Python, PHP, Ruby, C#, and Java support template processing either natively, or through add-on libraries and modules. JavaServer Pages,[6] Active Server Pages,[7] Genshi (for Python), and eRuby are examples of template engines designed specifically for web application development.
Moreover, template processing is sometimes included as a sub-feature of software packages like text editors, IDEs and relational database management systems.
Further information: Comparison of web template engines
Benefits of using template engines[edit]

encourages organization of source code into operationally-distinct layers (see e.g., MVC)
enhances productivity by reducing unnecessary reproduction of effort
enhances teamwork by allowing separation of work based on skill-set (e.g., artistic vs. technical)

See also[edit]

Template engine (web)
Macro preprocessor
Domain-specific programming language
Not to be confused with layout engines

References[edit]


^ Niemeyer, Patrick (2002). Learning Java. Sebastopol: O'Reilly. ISBN&#160;0-596-00285-8.&#160;
^ Manolescu, Dragos (2006). Pattern Languages of Program Design 5. Reading: Addison-Wesley Professional. ISBN&#160;0-321-32194-4.&#160;
^ Fowler, Martin (2003). Patterns of Enterprise Application Architecture. Boston: Addison-Wesley. ISBN&#160;0-321-12742-0.&#160;
^ Silberschatz Galvin Gagne (2012). Operating Systems Concepts. New York: Wiley. ISBN&#160;978-1118063330.&#160;
^ (see e.g., Velocity, TemplateToolkit, Freemarker ).
^ JavaServer Pages is a technology released by Sun for use with the Java programming language. "JavaServer Pages Technology". 2006-10-10. Retrieved 2006-10-10.&#160;
^ ASP 1.0 was originally released for use with Microsoft VBScript and JScript. It was an extension to Microsoft IIS. "References to ASP 1.0, JScript, and VBScript".&#160;


External links[edit]

Enforcing Strict Model-View Separation in Template Engines









v
t
e


Types of computer languages









Architecture description
Hardware description
Markup
Modeling
Programming language
Query
Specification
Stylesheet
Template processing
Transformation















					
						Retrieved from "https://en.wikipedia.org/w/index.php?title=Template_processor&amp;oldid=674730288"					
				Categories: Scripting languagesTemplate engines				
							
		
		
			