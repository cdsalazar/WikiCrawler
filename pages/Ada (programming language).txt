


		
		
		
			

							
						

			Ada (programming language)
									
									From Wikipedia, the free encyclopedia
								
												
					Jump to:					navigation, 					search
				
				
Ada

Paradigm
Multi-paradigm


Designed&#160;by


MIL-STD-1815/Ada 83: Jean Ichbiah
Ada 95: Tucker Taft
Ada 2005: Tucker Taft
Ada 2012: Tucker Taft




First&#160;appeared
1980; 35&#160;years ago&#160;(1980)


Stable release
Ada 2012 / December&#160;10, 2012; 2 years ago&#160;(2012-12-10)


Preview release
Ada 2012[1] / November&#160;2011; 4&#160;years ago&#160;(2011-11)


Typing discipline
static, strong, safe, nominative


OS
Cross-platform (multi-platform)


Filename extensions
.adb .ads


Website
www.adaic.org


Major implementations


AdaCore GNAT,
Green Hills Software Optimising Ada 95 compiler,
Aonix ObjectAda,[2]
DDC-I Score


Dialects


SPARK, Ravenscar profile


Influenced by


ALGOL 68, Pascal, C++ (Ada 95), Smalltalk (Ada 95), Java (Ada 2005), Eiffel (Ada 2012)


Influenced


C++, Eiffel, PL/SQL, PL/pgSQL, SQL/PSM, VHDL, Rust, Ruby, Java, Seed7




 Ada Programming at Wikibooks




Ada is a structured, statically typed, imperative, wide-spectrum, and object-oriented high-level computer programming language, extended from Pascal and other languages. It has built-in language support for design-by-contract, extremely strong typing, explicit concurrency, offering tasks, synchronous message passing, protected objects, and non-determinism. Ada improves code safety and maintainability by using the compiler to find errors in favor of runtime errors. Ada is an international standard; the current version (known as Ada 2012[3]) is defined by ISO/IEC 8652:2012.[4]
Ada was originally designed by a team led by Jean Ichbiah of CII Honeywell Bull under contract to the United States Department of Defense (DoD) from 1977 to 1983 to supersede the hundreds of programming languages then used by the DoD. Ada was named after Ada Lovelace (1815–1852), who is credited as being the first computer programmer.[5]



Contents


1 Features
2 History
3 Standardization
4 Language constructs

4.1 "Hello, world!" in Ada
4.2 Data types
4.3 Control structures
4.4 Packages, procedures and functions
4.5 Concurrency
4.6 Pragmas


5 See also
6 References

6.1 International standards
6.2 Rationale
6.3 Books
6.4 Archives


7 External links



Features[edit]
Ada was originally targeted at embedded and real-time systems. The Ada&#160;95 revision, designed by S. Tucker Taft of Intermetrics between 1992 and 1995, improved support for systems, numerical, financial, and object-oriented programming (OOP).
Notable features of Ada include: strong typing, modularity mechanisms (packages), run-time checking, parallel processing (tasks, synchronous message passing, protected objects, and nondeterministic select statements), exception handling, and generics. Ada&#160;95 added support for object-oriented programming, including dynamic dispatch.
The syntax of Ada minimizes choices of ways to perform basic operations, and prefers English keywords (such as "or else" and "and then") to symbols (such as "||" and "&amp;&amp;"). Ada uses the basic arithmetical operators "+", "-", "*", and "/", but avoids using other symbols. Code blocks are delimited by words such as "declare", "begin", and "end", where the "end" (in most cases) is followed by the identifier of the block it closes (e.g., if … end if, loop … end loop). In the case of conditional blocks this avoids a dangling else that could pair with the wrong nested if-expression in other languages like C or Java.
Ada is designed for development of very large software systems. Ada packages can be compiled separately. Ada package specifications (the package interface) can also be compiled separately without the implementation to check for consistency. This makes it possible to detect problems early during the design phase, before implementation starts.
A large number of compile-time checks are supported to help avoid bugs that would not be detectable until run-time in some other languages or would require explicit checks to be added to the source code. For example, the syntax requires explicitly named closing of blocks to prevent errors due to mismatched end tokens. The adherence to strong typing allows detection of many common software errors (wrong parameters, range violations, invalid references, mismatched types, etc.) either during compile-time, or otherwise during run-time. As concurrency is part of the language specification, the compiler can in some cases detect potential deadlocks. Compilers also commonly check for misspelled identifiers, visibility of packages, redundant declarations, etc. and can provide warnings and useful suggestions on how to fix the error.
Ada also supports run-time checks to protect against access to unallocated memory, buffer overflow errors, range violations, off-by-one errors, array access errors, and other detectable bugs. These checks can be disabled in the interest of runtime efficiency, but can often be compiled efficiently. It also includes facilities to help program verification. For these reasons, Ada is widely used in critical systems, where any anomaly might lead to very serious consequences, e.g., accidental death, injury or severe financial loss. Examples of systems where Ada is used include avionics, ATC, railways, banking, military and space technology.[6][7]
Ada's dynamic memory management is high-level and type-safe. Ada does not have generic or untyped pointers; nor does it implicitly declare any pointer type. Instead, all dynamic memory allocation and deallocation must take place through explicitly declared access types. Each access type has an associated storage pool that handles the low-level details of memory management; the programmer can either use the default storage pool or define new ones (this is particularly relevant for Non-Uniform Memory Access). It is even possible to declare several different access types that all designate the same type but use different storage pools. Also, the language provides for accessibility checks, both at compile time and at run time, that ensures that an access value cannot outlive the type of the object it points to.
Though the semantics of the language allow automatic garbage collection of inaccessible objects, most implementations do not support it by default, as it would cause unpredictable behaviour in real-time systems. Ada does support a limited form of region-based memory management; also, creative use of storage pools can provide for a limited form of automatic garbage collection, since destroying a storage pool also destroys all the objects in the pool.
Ada was designed to resemble the English language in its syntax for comments: a double-dash ("--"), resembling an em dash, denotes comment text. Comments stop at end of line, so there is no danger of unclosed comments accidentally voiding whole sections of source code. Prefixing each line (or column) with "--" will skip all that code, while being clearly denoted as a column of repeated "--" down the page. There is no limit to the nesting of comments, thereby allowing prior code, with commented-out sections, to be commented-out as even larger sections. All Unicode characters are allowed in comments, such as for symbolic formulas (E[0]=m×c²). To the compiler, the double-dash is treated as end-of-line, allowing continued parsing of the language as a context-free grammar.
The semicolon (";") is a statement terminator, and the null or no-operation statement is null;. A single ; without a statement to terminate is not allowed.
Unlike most ISO standards, the Ada language definition (known as the Ada Reference Manual or ARM, or sometimes the Language Reference Manual or LRM) is free content. Thus, it is a common reference for Ada programmers and not just programmers implementing Ada compilers. Apart from the reference manual, there is also an extensive rationale document which explains the language design and the use of various language constructs. This document is also widely used by programmers. When the language was revised, a new rationale document was written.
One notable free software tool that is used by many Ada programmers to aid them in writing Ada source code is the GNAT Programming Studio.
History[edit]
In the 1970s, the US Department of Defense (DoD) was concerned by the number of different programming languages being used for its embedded computer system projects, many of which were obsolete or hardware-dependent, and none of which supported safe modular programming. In 1975, a working group, the High Order Language Working Group (HOLWG), was formed with the intent to reduce this number by finding or creating a programming language generally suitable for the department's and UK Ministry of Defence requirements. After many iterations beginning with an original Straw man proposal the eventual programming language was named Ada. The total number of high-level programming languages in use for such projects fell from over 450 in 1983 to 37 by 1996.



Wikisource has original text related to this article:
Steelman language requirements



The HOLWG working group crafted the Steelman language requirements, a series of documents stating the requirements they felt a programming language should satisfy. Many existing languages were formally reviewed, but the team concluded in 1977 that no existing language met the specifications.
Requests for proposals for a new programming language were issued and four contractors were hired to develop their proposals under the names of Red (Intermetrics led by Benjamin Brosgol), Green (CII Honeywell Bull, led by Jean Ichbiah), Blue (SofTech, led by John Goodenough)[8] and Yellow (SRI International, led by Jay Spitzen). In April 1978, after public scrutiny, the Red and Green proposals passed to the next phase. In May 1979, the Green proposal, designed by Jean Ichbiah at CII Honeywell Bull, was chosen and given the name Ada—after Augusta Ada, Countess of Lovelace. This proposal was influenced by the programming language LIS that Ichbiah and his group had developed in the 1970s. The preliminary Ada reference manual was published in ACM SIGPLAN Notices in June 1979. The Military Standard reference manual was approved on December 10, 1980 (Ada Lovelace's birthday), and given the number MIL-STD-1815 in honor of Ada Lovelace's birth year. In 1981, C. A. R. Hoare took advantage of his Turing Award speech to criticize Ada for being overly complex and hence unreliable,[9] but subsequently seemed to recant in the foreword he wrote for an Ada textbook.[10]
Ada attracted much attention from the programming community as a whole during its early days. Its backers and others predicted that it might become a dominant language for general purpose programming and not just defense-related work. Ichbiah publicly stated that within ten years, only two programming languages would remain, Ada and Lisp.[11] Early Ada compilers struggled to implement the large, complex language, and both compile-time and run-time performance tended to be slow and tools primitive. Compiler vendors expended most of their efforts in passing the massive, language-conformance-testing, government-required "ACVC" validation suite that was required in another novel feature of the Ada language effort.[11]
The first validated Ada implementation was the NYU Ada/Ed translator,[12] certified on April 11, 1983. NYU Ada/Ed is implemented in the high-level set language SETL.[13] A number of commercial companies began offering Ada compilers and associated development tools, including Alsys, Telesoft, DDC-I, Advanced Computer Techniques, Tartan Laboratories, TLD Systems, and others.




Augusta Ada King, Countess of Lovelace.


In 1991, the US Department of Defense began to require the use of Ada (the Ada mandate) for all software,[14] though exceptions to this rule were often granted. The Department of Defense Ada mandate was effectively removed in 1997, as the DoD began to embrace COTS technology.[citation needed] Similar requirements existed in other NATO countries.[citation needed]
By the late 1980s and early 1990s, Ada compilers had improved in performance, but there were still barriers to full exploitation of Ada's abilities, including a tasking model that was different from what most real-time programmers were used to.[11]
Because of Ada's safety-critical support features, it is now used not only for military applications, but also in commercial projects where a software bug can have severe consequences, e.g., avionics and air traffic control, commercial rockets (e.g., Ariane 4 and 5), satellites and other space systems, railway transport and banking.[7] For example, the fly-by-wire system software in the Boeing 777 was written in Ada. The Canadian Automated Air Traffic System was written in 1 million lines of Ada (SLOC count). It featured advanced distributed processing, a distributed Ada database, and object-oriented design. Ada is also used in other air traffic systems, e.g., the UK’s next-generation Interim Future Area Control Tools Support (iFACTS) air traffic control system is designed and implemented using SPARK Ada.[15] It is also used in the French TVM in-cab signalling system on the TGV high-speed rail system, and the metro suburban trains in Paris, London, Hong Kong and New York City.[7][16]
Standardization[edit]
The language became an ANSI standard in 1983 (ANSI/MIL-STD 1815A), and without any further changes became an ISO standard in 1987 (ISO-8652:1987). This version of the language is commonly known as Ada&#160;83, from the date of its adoption by ANSI, but is sometimes referred to also as Ada&#160;87, from the date of its adoption by ISO.
Ada&#160;95, the joint ISO/ANSI standard (ISO-8652:1995) was published in February 1995, making Ada&#160;95 the first ISO standard object-oriented programming language. To help with the standard revision and future acceptance, the US Air Force funded the development of the GNAT Compiler. Presently, the GNAT Compiler is part of the GNU Compiler Collection.
Work has continued on improving and updating the technical content of the Ada programming language. A Technical Corrigendum to Ada&#160;95 was published in October 2001, and a major Amendment, ISO/IEC 8652:1995/Amd 1:2007 was published on March 9, 2007. At the Ada-Europe 2012 conference in Stockholm, the Ada Resource Association (ARA) and Ada-Europe announced the completion of the design of the latest version of the Ada programming language and the submission of the reference manual to the International Organization for Standardization (ISO) for approval. ISO/IEC 8652:2012 was published in December 2012.[4]
Other related standards include ISO 8651-3:1988 Information processing systems—Computer graphics—Graphical Kernel System (GKS) language bindings—Part 3: Ada.
Language constructs[edit]
Ada is an ALGOL-like programming language featuring control structures with reserved words such as if, then, else, while, for, and so on. However, Ada also has many data structuring facilities and other abstractions which were not included in the original ALGOL 60, such as type definitions, records, pointers, enumerations. Such constructs were in part inherited or inspired from Pascal.
"Hello, world!" in Ada[edit]
A common example of a language's syntax is the Hello world program: (hello.adb)


with Ada.Text_IO; use Ada.Text_IO;
procedure Hello is
begin
  Put_Line ("Hello, world!");
end Hello;

This program can be compiled by using the freely available open source compiler GNAT, by executing


gnatmake hello.adb

Data types[edit]
Ada's type system is not based on a set of predefined primitive types but allows users to declare their own types. This declaration in turn is not based on the internal representation of the type but on describing the goal which should be achieved. This allows the compiler to determine a suitable memory size for the type, and to check for violations of the type definition at compile time and run time (i.e., range violations, buffer overruns, type consistency, etc.). Ada supports numerical types defined by a range, modulo types, aggregate types (records and arrays), and enumeration types. Access types define a reference to an instance of a specified type; untyped pointers are not permitted. Special types provided by the language are task types and protected types.
For example, a date might be represented as:


type Day_type   is range    1 ..   31;
type Month_type is range    1 ..   12;
type Year_type  is range 1800 .. 2100;
type Hours is mod 24;
type Weekday is (Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday);

type Date is
   record
     Day   : Day_type;
     Month : Month_type;
     Year  : Year_type;
   end record;

Types can be refined by declaring subtypes:


subtype Working_Hours is Hours range 0 .. 12;            -- at most 12 Hours to work a day
subtype Working_Day is Weekday range Monday .. Friday;   -- Days to work

Work_Load: constant array(Working_Day) of Working_Hours  -- implicit type declaration
   := (Friday =&gt; 6, Monday =&gt; 4, others =&gt; 10);           -- lookup table for working hours with initialization

Types can have modifiers such as limited, abstract, private etc. Private types can only be accessed and limited types can only be modified or copied within the scope of the package that defines them.[17] Ada 95 adds additional features for object-oriented extension of types.
Control structures[edit]
Ada is a structured programming language, meaning that the flow of control is structured into standard statements. All standard constructs and deep level early exit are supported so the use of the also supported 'go to' commands is seldom needed.


-- while a is not equal to b, loop.
while a /= b loop
  Ada.Text_IO.Put_Line ("Waiting");
end loop;

if a &gt; b then
  Ada.Text_IO.Put_Line ("Condition met");
else
  Ada.Text_IO.Put_Line ("Condition not met");
end if;

for i in 1 .. 10 loop
  Ada.Text_IO.Put ("Iteration: ");
  Ada.Text_IO.Put (i);
  Ada.Text_IO.Put_Line;
end loop;

loop
  a := a + 1;
  exit when a = 10;
end loop;

case i is
  when 0 =&gt; Ada.Text_IO.Put ("zero");
  when 1 =&gt; Ada.Text_IO.Put ("one");
  when 2 =&gt; Ada.Text_IO.Put ("two");
  -- case statements have to cover all possible cases:
  when others =&gt; Ada.Text_IO.Put ("none of the above");
end case;

for aWeekday in Weekday'Range loop               -- loop over an enumeration
   Put_Line ( Weekday'Image(aWeekday) );         -- output string representation of an enumeration
   if aWeekday in Working_Day then               -- check of a subtype of an enumeration
      Put_Line ( " to work for " &amp;
               Working_Hours'Image (Work_Load(aWeekday)) ); -- access into a lookup table
   end if;
end loop;

Packages, procedures and functions[edit]
Among the parts of an Ada program are packages, procedures and functions.
Example: Package specification (example.ads)


package Example is
     type Number is range 1 .. 11;
     procedure Print_and_Increment (j: in out Number);
end Example;

Package body (example.adb)


with Ada.Text_IO;
package body Example is

  i : Number := Number'First;

  procedure Print_and_Increment (j: in out Number) is

    function Next (k: in Number) return Number is
    begin
      return k + 1;
    end Next;

  begin
    Ada.Text_IO.Put_Line ( "The total is: " &amp; Number'Image(j) );
    j := Next (j);
  end Print_and_Increment;

-- package initialization executed when the package is elaborated
begin
  while i &lt; Number'Last loop
    Print_and_Increment (i);
  end loop;
end Example;

This program can be compiled, e.g., by using the freely available open source compiler GNAT, by executing


gnatmake -z example.adb

Packages, procedures and functions can nest to any depth and each can also be the logical outermost block.
Each package, procedure or function can have its own declarations of constants, types, variables, and other procedures, functions and packages, which can be declared in any order.
Concurrency[edit]
Ada has language support for task-based concurrency. The fundamental concurrent unit in Ada is a task which is a built-in limited type. Tasks are specified in two parts – the task declaration defines the task interface (similar to a type declaration), the task body specifies the implementation of the task. Depending on the implementation, Ada tasks are either mapped to operating system tasks or processes, or are scheduled internally by the Ada runtime.
Tasks can have entries for synchronisation (a form of synchronous message passing). Task entries are declared in the task specification. Each task entry can have one or more accept statements within the task body. If the control flow of the task reaches an accept statement, the task is blocked until the corresponding entry is called by another task (similarly, a calling task is blocked until the called task reaches the corresponding accept statement). Task entries can have parameters similar to procedures, allowing tasks to synchronously exchange data. In conjunction with select statements it is possible to define guards on accept statements (similar to Dijkstra's guarded commands).
Ada also offers protected objects for mutual exclusion. Protected objects are a monitor-like construct, but use guards instead of conditional variables for signaling (similar to conditional critical regions). Protected objects combine the data encapsulation and safe mutual exclusion from monitors, and entry guards from conditional critical regions. The main advantage over classical monitors is that conditional variables are not required for signaling, avoiding potential deadlocks due to incorrect locking semantics. Like tasks, the protected object is a built-in limited type, and it also has a declaration part and a body.
A protected object consists of encapsulated private data (which can only be accessed from within the protected object), and procedures, functions and entries which are guaranteed to be mutually exclusive (with the only exception of functions, which are required to be side effect free and can therefore run concurrently with other functions). A task calling a protected object is blocked if another task is currently executing inside the same protected object, and released when this other task leaves the protected object. Blocked tasks are queued on the protected object ordered by time of arrival.
Protected object entries are similar to procedures, but additionally have guards. If a guard evaluates to false, a calling task is blocked and added to the queue of that entry; now another task can be admitted to the protected object, as no task is currently executing inside the protected object. Guards are re-evaluated whenever a task leaves the protected object, as this is the only time when the evaluation of guards can have changed.
Calls to entries can be requeued to other entries with the same signature. A task that is requeued is blocked and added to the queue of the target entry; this means that the protected object is released and allows admission of another task.
The select statement in Ada can be used to implement non-blocking entry calls and accepts, non-deterministic selection of entries (also with guards), time-outs and aborts.
The following example illustrates some concepts of concurrent programming in Ada.


with Ada.Text_IO; use Ada.Text_IO;

procedure Traffic is

   type Airplane_ID is range 1..10;             -- 10 airplanes

   task type Airplane (ID: Airplane_ID);        -- task representing airplanes, with ID as initialisation parameter
   type Airplane_Access is access Airplane;     -- reference type to Airplane

   protected type Runway is                     -- the shared runway (protected to allow concurrent access)
      entry Assign_Aircraft (ID: Airplane_ID);  -- all entries are guaranteed mutually exclusive
      entry Cleared_Runway (ID: Airplane_ID);
      entry Wait_For_Clear;
   private
      Clear: Boolean := True;                   -- protected private data - generally more than just a flag...
   end Runway;
   type Runway_Access is access all Runway;

   -- the air traffic controller task takes requests for takeoff and landing
   task type Controller (My_Runway: Runway_Access) is
      -- task entries for synchronous message passing
      entry Request_Takeoff (ID: in Airplane_ID; Takeoff: out Runway_Access);
      entry Request_Approach(ID: in Airplane_ID; Approach: out Runway_Access);
   end Controller;

   --  allocation of instances
   Runway1    : aliased Runway;              -- instantiate a runway
   Controller1: Controller (Runway1'Access); -- and a controller to manage it

   ------ the implementations of the above types ------
   protected body Runway is
      entry Assign_Aircraft (ID: Airplane_ID)
 when Clear is   -- the entry guard - calling tasks are blocked until the condition is true
      begin
       Clear := False;
       Put_Line (Airplane_ID'Image (ID) &amp; " on runway ");
      end;

      entry Cleared_Runway (ID: Airplane_ID)
 when not Clear is
      begin
         Clear := True;
         Put_Line (Airplane_ID'Image (ID) &amp; " cleared runway ");
      end;

      entry Wait_For_Clear
 when Clear is
      begin
         null;      -- no need to do anything here - a task can only enter if "Clear" is true
      end;
   end Runway;

   task body Controller is
   begin
      loop
         My_Runway.Wait_For_Clear;   -- wait until runway is available (blocking call)
         select                      -- wait for two types of requests (whichever is runnable first)
            when Request_Approach'count = 0 =&gt;  -- guard statement - only accept if there are no tasks queuing on Request_Approach
             accept Request_Takeoff (ID: in Airplane_ID; Takeoff: out Runway_Access)
             do                                 -- start of synchronized part
               My_Runway.Assign_Aircraft (ID);  -- reserve runway (potentially blocking call if protected object busy or entry guard false)
               Takeoff := My_Runway;            -- assign "out" parameter value to tell airplane which runway
             end Request_Takeoff;               -- end of the synchronised part
         or
            accept Request_Approach (ID: in Airplane_ID; Approach: out Runway_Access) do
               My_Runway.Assign_Aircraft (ID);
               Approach := My_Runway;
            end Request_Approach;
         or                          -- terminate if no tasks left who could call
            terminate;
         end select;
      end loop;
   end;

   task body Airplane is
      Rwy : Runway_Access;
   begin
      Controller1.Request_Takeoff (ID, Rwy); -- This call blocks until Controller task accepts and completes the accept block
      Put_Line (Airplane_ID'Image (ID) &amp; "  taking off...");
      delay 2.0;
      Rwy.Cleared_Runway (ID);               -- call will not block as "Clear" in Rwy is now false and no other tasks should be inside protected object
      delay 5.0; -- fly around a bit...
      loop
         select   -- try to request a runway
            Controller1.Request_Approach (ID, Rwy); -- this is a blocking call - will run on controller reaching accept block and return on completion
            exit; -- if call returned we're clear for landing - leave select block and proceed...
         or
            delay 3.0;  -- timeout - if no answer in 3 seconds, do something else (everything in following block)
            Put_Line (Airplane_ID'Image (ID) &amp; "   in holding pattern");  -- simply print a message
         end select;
      end loop;
      delay 4.0;  -- do landing approach...
      Put_Line (Airplane_ID'Image (ID) &amp; "            touched down!");
      Rwy.Cleared_Runway (ID);  -- notify runway that we're done here.
   end;

   New_Airplane: Airplane_Access;

begin
   for I in Airplane_ID'Range loop  -- create a few airplane tasks
      New_Airplane := new Airplane (I); -- will start running directly after creation
      delay 4.0;
   end loop;
end Traffic;

Pragmas[edit]
A pragma is a compiler directive that conveys information to the compiler to allow specific manipulation of compiled output.[18] Certain pragmas are built into the language[19] while other are implementation-specific.
Examples of common usage of compiler pragmas would be to disable certain features, such as run-time type checking or array subscript boundary checking, or to instruct the compiler to insert object code in lieu of a function call (as C/C++ does with inline functions).
See also[edit]

APSE – a specification for a programming environment to support software development in Ada
JOVIAL – an earlier U.S Military programming language
PL/SQL and PL/pgSQL
Ravenscar profile
SPARK (programming language) – a programming language consisting of a highly restricted subset of Ada, annotated with meta information describing desired component behavior and individual runtime requirements
Straw man proposal
VHDL – a hardware description language originally developed at the behest of the U.S Department of Defense that borrows heavily from Ada in both concepts and syntax
Comparison of programming languages
List of programming languages

References[edit]


^ "Ada 2012 Language Reference Manual". Ada-auth.org. Retrieved 2014-01-27.&#160;
^ "Aonix ObjectAda". Atego.com. Retrieved 2014-01-27.&#160;
^ Ganssle, Jack (2013-05-29). "Ada Resource Association – News and resource for the Ada programming language". Adaic.org. Retrieved 2013-06-14.&#160;
^ a b "ISO/IEC 8652:2012 Information technology -- Programming languages -- Ada". International Organization for Standardization. Retrieved 2012-12-23.&#160;
^ J. Fuegi and J. Francis, "Lovelace &amp; Babbage and the creation of the 1843 'notes'." Annals of the History of Computing 25 #4 (October–December 2003): 16-26. doi:10.1109/MAHC.2003.1253887
^ S. Tucker Taft; Florence Olsen (1999-06-30). "Ada helps churn out less-buggy code". Government Computer News. pp.&#160;2–3. Retrieved 2010-09-14.&#160;
^ a b c Feldman, Michael. "Who's using Ada?". SIGAda Education Working Group.&#160;
^ "John Goodenough | SEI Staff Profile". Sei.cmu.edu. Retrieved 2014-01-27.&#160;
^ C.A.R. Hoare, "The Emperor's Old Clothes." Communications of the ACM, 1981.
^ D.A. Watt, B.A. Wichmann and W. Findlay, "Ada: Language and Methodology." Prentice-Hall, 1987.
^ a b c J-P. Rosen, "The Ada Paradox(es)", Ada Letters, ACM SIGAda, Vol. 24, No. 2, August 2009, pp. 28-35.
^ SofTech Inc., Waltham, MA (1983-04-11). "Ada Compiler Validation Summary Report: NYU Ada/ED, Version 19.7 V-001". Retrieved 2010-12-16.&#160;
^ Dewar, Robert B. K.; Fisher Jr., Gerald A.; Schonberg, Edmond; Froelich, Robert; Bryant, Stephen; Goss, Clinton F.; Burke, Michael (November 1980). "The NYU Ada Translator and Interpreter". ACM SIGPLAN Notices – Proceedings of the ACM-SIGPLAN Symposium on the Ada Programming Language 15 (11): 194–201. doi:10.1145/948632.948659. ISBN&#160;0-89791-030-3.&#160;
^ Ada Information Clearinghouse (1983-04-11). "The Congressional Ada Mandate". Retrieved 2015-06-07.&#160;
^ AdaCore. "GNAT Pro Chosen for UK’s Next Generation ATC System".&#160;
^ AdaCore. "Look Who’s Using Ada".&#160;
^ "Ada Syntax Card" (PDF). Retrieved 28 February 2011.&#160;
^ "Ada 83 LRM, Sec 2.8: Pragmas". Archive.adaic.com. Retrieved 2014-01-27.&#160;
^ "Ada 83 LRM, Appendix/Annex B: Predefined Language Pragmas". Archive.adaic.com. Retrieved 2014-01-27.&#160;


International standards[edit]

ISO/IEC 8652: Information technology—Programming languages—Ada
ISO/IEC 15291: Information technology—Programming languages—Ada Semantic Interface Specification (ASIS)
ISO/IEC 18009: Information technology—Programming languages—Ada: Conformity assessment of a language processor (ACATS)
IEEE Standard 1003.5b-1996, the POSIX Ada binding
Ada Language Mapping Specification, the CORBA IDL to Ada mapping

Rationale[edit]
(These documents have been published in various forms including print.)

Jean D. Ichbiah, John G. P. Barnes, Robert J. Firth and Mike Woodger, Rationale for the Design of the Ada Programming Language, 1986.
John G. P. Barnes, Ada 95 rationale&#160;: the language&#160;: the standard libraries, 1995.
John Barnes, Rationale for Ada 2005, 2005, 2006.

Books[edit]


Grady Booch: Software Engineering with Ada, California: The Benjamin/Cummings Publishing Company, Inc., 1987. ISBN 0-8053-0604-8
Jan Skansholm: Ada&#160;95 From the Beginning, Addison-Wesley, ISBN 0-201-40376-5
Geoff Gilpin: Ada: A Guided Tour and Tutorial, Prentice hall, ISBN 978-0-13-004045-9
John Barnes: Programming in Ada&#160;2005, Addison-Wesley, ISBN 0-321-34078-7
John Barnes: Programming in Ada plus Language Reference Manual, Addison-Wesley, ISBN 0-201-56539-0
John Barnes: Programming in Ada&#160;95, Addison-Wesley, ISBN 0-201-34293-6
John Barnes: High Integrity Ada: The SPARK Approach, Addison-Wesley, ISBN 0-201-17517-7
John Barnes: High Integrity Software: The SPARK Approach to Safety and Security, Addison-Wesley, ISBN 0-321-13616-0
John Beidler: Data Structures and Algorithms: An Object-Oriented Approach Using Ada&#160;95, Springer-Verlag, ISBN 0-387-94834-1
Dean W. Gonzalez: Ada Programmer's Handbook, Benjamin-Cummings Publishing Company, ISBN 0-8053-2529-8
M. Ben-Ari: Ada for Software Engineers, John Wiley &amp; Sons, ISBN 0-471-97912-0
Norman Cohen: Ada as a Second Language, McGraw-Hill Science/Engineering/Math, ISBN 0-07-011607-5
Alan Burns, Andy Wellings: Real-Time Systems and Programming Languages. Ada&#160;95, Real-Time Java and Real-Time POSIX., Addison-Wesley, ISBN 0-201-72988-1
Alan Burns, Andy Wellings: Concurrency in Ada, Cambridge University Press, ISBN 0-521-62911-X
Colin Atkinson: Object-Oriented Reuse, Concurrency and Distribution: An Ada-Based Approach, Addison-Wesley, ISBN 0-201-56527-7
Grady Booch, Doug Bryan: Software Engineering with Ada, Addison-Wesley, ISBN 0-8053-0608-0
Do-While Jones: Ada in Action: With Practical Programming Examples, John Wiley &amp; Sons Inc, ISBN 0-471-60708-8
Daniel Stubbs, Neil W. Webre: Data Structures with Abstract Data Types and Ada, Brooks Cole, ISBN 0-534-14448-9
Pascal Ledru: Distributed Programming in Ada with Protected Objects, Dissertation.com, ISBN 1-58112-034-6
Fintan Culwin: Ada, a Developmental Approach, Prentice Hall, ISBN 0-13-264680-3
John English, Fintan Culwin: Ada&#160;95 the Craft of Object Oriented Programming, Prentice Hall, ISBN 0-13-230350-7
David A. Wheeler: Ada&#160;95, Springer-Verlag, ISBN 0-387-94801-5
David R. Musser, Alexander Stepanov: The Ada Generic Library: Linear List Processing Packages, Springer-Verlag, ISBN 0-387-97133-5
Michael B. Feldman: Software Construction and Data Structures with Ada&#160;95, Addison-Wesley, ISBN 0-201-88795-9
Simon Johnston: Ada&#160;95 for C and C++ Programmers, Addison-Wesley, ISBN 0-201-40363-3
"Ada: Problem Solving and Program Design." Feldman, Michael B. &amp; Koffman, Elliot B., ISBN 0-201-52279-9. Addison-Wesley Publishing Company; 1992 &amp; 1993. 795 pages.
Michael B. Feldman, Elliot B. Koffman: Ada&#160;95, Addison-Wesley, ISBN 0-201-36123-X
Nell B. Dale, Chip Weems, John McCormick: Programming and Problem Solving with Ada&#160;95, Jones &amp; Bartlett Publishers, ISBN 0-7637-0293-5
Nell B. Dale, John McCormick: Ada Plus Data Structures: An Object-Oriented Approach, 2nd edition, Jones &amp; Bartlett Publishers, ISBN 0-7637-3794-1
Bruce C. Krell: Developing With Ada: Life-Cycle Methods, Bantam Dell Pub Group, ISBN 0-553-09102-6
Judy Bishop: Distributed Ada: Developments and Experiences, Cambridge University Press, ISBN 0-521-39251-9
Bo Sanden: Software Systems Construction With Examples in Ada, Prentice Hall, ISBN 0-13-030834-X
Bruce Hillam: Introduction to Abstract Data Types Using Ada, Prentice Hall, ISBN 0-13-045949-6
David Rudd: Introduction to Software Design and Development With Ada, Brooks Cole, ISBN 0-314-02829-3
Ian C. Pyle: Developing Safety Systems: A Guide Using Ada, Prentice Hall, ISBN 0-13-204298-3
Louis Baker: Artificial Intelligence With Ada, McGraw-Hill, ISBN 0-07-003350-1
Alan Burns, Andy Wellings: HRT-HOOD: A Structured Design Method for Hard Real-Time Ada Systems, North-Holland, ISBN 0-444-82164-3
Walter Savitch, Charles Peterson: Ada: An Introduction to the Art and Science of Programming, Benjamin-Cummings Publishing Company, ISBN 0-8053-7070-6
Mark Allen Weiss: Data Structures and Algorithm Analysis in Ada, Benjamin-Cummings Publishing Company, ISBN 0-8053-9055-3
Henry Ledgard: ADA: AN INTRODUCTION (Second Edition), Springer-Verlag, ISBN 0-387-90814-5
Dines Bjørner; Ole N. Oest (eds.): Towards a Formal Description of Ada, London: Springer-Verlag, 1980. ISBN 3-540-10283-3


Archives[edit]

Ada Programming Language Materials, 1981–1990. Charles Babbage Institute, University of Minnesota. Includes literature on software products designed for the Ada language; U.S. government publications, including Ada 9X project reports, technical reports, working papers, newsletters; and user group information.

External links[edit]



Wikimedia Commons has media related to Ada (programming language).





Wikibooks has a book on the topic of: Ada Programming





Wikisource has several original texts related to: Ada





Wikiversity has learning materials about Ada



Ada programming language Ada (programming language) at DMOZ
ACM SIGAda
Ada-Europe Organization
ISO Home of Ada Standards
Interview with S.Tucker Taft, Maintainer of Ada









v
t
e


Pascal programming language family






Dialects



Pascal
Object Pascal
Pascal Script
Oxygene
Clascal
Concurrent Pascal
SuperPascal











Compilers





Current




Delphi
Oxygene
PocketStudio
HP Pascal
IP Pascal
Prospero Pascal
Free Pascal (Lazarus)
GNU Pascal
Turbo51
MIDletPascal
Pic Micro Pascal
ACK









Historical




Virtual Pascal
Apple Pascal
Turbo Pascal
Microsoft Pascal
UCSD Pascal
JRT
Pascal/MT+











API



CLX
FCL
FireMonkey
LCL
Object Windows Library
OpenWire
RTL
Turbo Vision
Visual Component Library











Comparison of Pascal and C
Comparison of Pascal and Delphi


Related to: ALGOL (1958)
Modula-2 (1977)
Ada (1983)
Oberon (1986)
Modula-3 (1988)
Oberon-2 (1991)
Component Pascal (1991)













Authority control



GND: 4000430-2















					
						Retrieved from "https://en.wikipedia.org/w/index.php?title=Ada_(programming_language)&amp;oldid=689632275"					
				Categories: Ada (programming language)Programming language standardsMulti-paradigm programming languagesStatically typed programming languagesSystems programming languages.NET programming languagesAvionics programming languagesHigh Integrity Programming LanguageProgramming languages created in the 1980sProgramming languages with an ISO standardHidden categories: All articles with unsourced statementsArticles with unsourced statements from June 2015Commons category with local link same as on WikidataArticles with DMOZ linksWikipedia articles with GND identifiers				
							
		
		
			