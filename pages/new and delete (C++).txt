


		
		
		
			

							
						

			new and delete (C++)
									
									From Wikipedia, the free encyclopedia
								
												
					Jump to:					navigation, 					search
				
				In the C++ programming language, new and delete are a pair of language constructs that perform dynamic memory allocation, object construction and object destruction.[1]



Contents


1 Overview

1.1 Error handling
1.2 Overloading
1.3 void* operator new(size_t size)


2 Relation to malloc and free
3 See also
4 References



Overview[edit]
Except for a form called the "placement new", the new operator denotes a request for memory allocation on a process's heap. If sufficient memory is available, new initialises the memory, calling object constructors if necessary, and returns the address to the newly allocated and initialised memory.[2][3] A new request, in its simplest form, looks as follows:


p = new T;

where p is a previously declared pointer of type T (or some other type to which a T pointer can be assigned, such as a superclass of T). The default constructor for T, if any, is called to construct a T instance in the allocated memory buffer.
If not enough memory is available in the free store for an object of type T, the new request indicates failure by throwing an exception of type std::bad_alloc. This removes the need to explicitly check the result of an allocation.
The deallocation counterpart of new is delete, which first calls the destructor (if any) on its argument and then returns the memory allocated by new back to the free store. Every call to new must be matched by a call to delete; failure to do so causes memory leaks.[1]
new syntax has several variants that allow finer control over memory allocation and object construction. A function call-like syntax is used to call a different constructor than the default one and pass it arguments, e.g.,


p = new T(argument);

calls a single-argument T constructor instead of the default constructor when initializing the newly allocated buffer.
A different variant allocates arrays of objects rather than single objects:


p = new T [N];

This requests a memory buffer from the free store that is large enough to hold a contiguous array of N objects of type T, contiguously, and calls the default constructor on each elements of the array.
Memory allocated with the new[] must be deallocated with the delete[] operator, rather than delete. Using the inappropriate form results in undefined behavior. C++ compilers are not required to generate a diagnostic message for using the wrong form.
The C++11 standard specifies an additional syntax,


p = new T[N] {initializer1, ..., initializerN};

that initializes each p[i] to initializeri.
Error handling[edit]
If new cannot find sufficient memory to service an allocation request, it can report its error in three distinct ways. Firstly, the ISO C++ standard allows programs to register a custom function called a new_handler with the C++ runtime; if it does, then this function is called whenever new encounters an error. The new_handler may attempt to make more memory available, or terminate the program if it can't.
If no new_handler is installed, new instead throws an exception of type std::bad_alloc. Thus, the program does not need to check the value of the returned pointer, as is the habit in C; if no exception was thrown, the allocation succeeded.
The third method of error handling is provided by the variant form new(std::nothrow), which specifies that no exception should be thrown; instead, a null pointer is returned to signal an allocation error.
Overloading[edit]
The new operator can be overloaded so that specific types (classes) use custom memory allocation algorithms for their instances. For example, the following is a variant of the singleton pattern where the first new Singleton call allocates an instance and all subsequent calls return this same instance:[4]


class Singleton {
    static Singleton *instance;
    static size_t refcount;

  public:
    static void *operator new(std::size_t nbytes) throw (std::bad_alloc) {
        if (instance == 0)
            instance = ::new Singleton; // Use the default allocator
        refcount++;
        return instance;
    }

    static void operator delete(void *p) {
        if (--refcount == 0) {
            ::delete instance;
            instance = 0;
        }
    }
};

This feature was available from early on in C++'s history (although the specific overloading mechanism changed), because object-oriented C++ programs tended to allocate many small objects with new, which internally used the C allocator that was optimized for the fewer and larger allocations performed by typical C programs. Stroustrup reports that in early applications, the C function malloc was "the most common performance bottleneck in real systems", which would spend up to 50% of their time in this function.[5]
void* operator new(size_t size)[edit]
The C++ language construct that only allocates memory is called void* operator new(size_t size). It is used by new in the allocation phase. It can be overridden per class or globally to define a specific memory allocator.
Relation to malloc and free[edit]
Since standard C++ subsumes the C standard library, the C dynamic memory allocation routines malloc, realloc and free are also available to C++ programmers. The use of these routines is discouraged for most uses, since they do not perform object initialization and destruction.[6] new and delete were, in fact, introduced in the first version of C++ (then called "C with Classes") to avoid the necessity of manual object initialization.[5]
In contrast to the C routines, which allow growing or shrinking an allocated array with realloc, it is not possible to change the size of a memory buffer allocated by new[]. The C++ standard library instead provides a dynamic array that can be extended or reduced in its std::vector template class.
The C++ standard does not specify any relation between new/delete and the C memory allocation routines, but new and delete are typically implemented as wrappers around the C memory allocation routines malloc and free.[7] Mixing the two families of operation, e.g., free'ing new'ly allocated memory of delete'ing malloc'd memory, causes undefined behavior and in practice can lead to various catastrophic results such as failure to release locks and thus deadlock.[8]
See also[edit]

Allocator (C++)
Exception handling
Memory pool
Pointer (computer programming)
Resource Acquisition Is Initialization (RAII)
Smart pointers

References[edit]


^ a b Savitch, Walter (2013). Absolute C++. Pearson. pp.&#160;420–445. ISBN&#160;0132846810.&#160;
^ "IBM Documentation describing C++'s operator new". Retrieved 2013-11-06.&#160;
^ "Microsoft Visual Studio operator new documentation". Retrieved 2013-11-06.&#160;
^ Lischner, Ray (2003). C++ In a Nutshell: A Desktop Quick Reference. O'Reilly. pp.&#160;128–129.&#160;
^ a b Stroustrup, Bjarne (1993). A History of C++: 1979–1991 (PDF). Proc. ACM History of Programming Languages Conf.&#160;
^ Meyers, Scott (1998). Effective C++. Addison-Wesley. p.&#160;21.&#160;
^ Alexandrescu, Andrei (2001). Modern C++ Design: Generic Programming and Design Patterns Applied. Addison-Wesley. p.&#160;78.&#160;
^ Seacord, Robert C. (2013). Secure Coding in C and C++. Addison-Wesley.&#160; Section 4.4, Common C++ Memory Management Errors.










v
t
e


C++









C++
C++98
C++03
C++11
C++14
C++17








C++ features



Classes
Exception handling
Function overloading
new and delete
Operator overloading
Operators
Templates








C++ Standard Library



I/O Streams
Smart pointers
STL
Strings








Compilers



Comparison of C++ compilers
Borland C++
Borland Turbo C++
C++Builder
Clang
GCC
Intel C++ Compiler
Visual C++
Watcom C/C++








IDEs



Comparison of C IDEs
Anjuta
CLion
Code::Blocks
CodeLite
Eclipse
Geany
Microsoft Visual Studio
NetBeans








C++ and other languages



Compatibility of C and C++
Comparison of C++ and Java
Comparison of C++ and ALGOL 68
Comparison of programming languages











 Category
















v
t
e


Memory management









Memory management as a function of an operating system








Manual memory management



Static memory allocation
C dynamic memory allocation
new and delete (C++)








Virtual memory



Demand paging
Page table
Paging
Virtual memory compression








Hardware



Memory management unit
Translation lookaside buffer








Garbage collection



Boehm garbage collector
Finalizer
Garbage
Mark-compact algorithm
Reference counting
Strong reference
Weak reference








Memory segmentation



Protected mode
Real mode
Virtual 8086 mode
x86 memory segmentation








Memory safety



Buffer overflow
Buffer over-read
Dangling pointer
Stack overflow








Issues



Fragmentation
Memory leak
Unreachable memory








Other



Automatic variable
International Symposium on Memory Management
Region-based memory management
















v
t
e


Programming languages









Comparison
Timeline











Assembly
Bash
BASIC
C
C++
C#
COBOL
Fortran
Java
JavaScript (JS)
Lisp
Pascal
Perl
PHP
Python
Ruby
Smalltalk
Visual Basic .NET (VB.NET)
more...











 Category
 Comparison
 Lists

Alphabetical
Categorical
Generational
Non-English-based

















					
						Retrieved from "https://en.wikipedia.org/w/index.php?title=New_and_delete_(C%2B%2B)&amp;oldid=691901184"					
				Categories: C++Hidden categories: Articles with example C++ code				
							
		
		
			