


		
		
		
			

							
						

			Modula-2
									
									From Wikipedia, the free encyclopedia
								
												
					Jump to:					navigation, 					search
				
				
Modula-2

Paradigm
imperative, structured, modular, data and procedure hiding


Designed&#160;by
Niklaus Wirth


First&#160;appeared
1978


Typing discipline
strong, static


OS
Cross-platform


Filename extensions
.mod .m2 .def .MOD .DEF .mi .md


Major implementations



ETH compiler written by Niklaus Wirth,

ADW Modula-2
GNU Modula-2
Ulm Modula-2
p1 Modula-2
XDS Modula-2




Dialects


PIM2, PIM3, PIM4, ISO


Influenced by


Modula, Mesa, Pascal, Algol-W


Influenced


Modula-3, Oberon, Ada, Fortran 90, Lua, Seed7, Zonnon, Modula-GM


Modula-2 is a computer programming language designed and developed between 1977 and 1985 by Niklaus Wirth at the Swiss Federal Institute of Technology in Zurich (ETH Zurich) as a revision of Pascal to serve as the sole programming language for the operating system and application software for the personal workstation Lilith.[1] The principal concepts were:

The module as a compilation unit for separate compilation
The coroutine as the basic building block for concurrent processes
Types and procedures that allow access to machine-specific data.

Modula-2 was viewed by Niklaus Wirth as a successor to his earlier programming languages Pascal and Modula.[2] The language design was also influenced by the Mesa language and the new programming possibilities of the early personal computer Xerox Alto, both from Xerox, that Wirth saw during his 1976 sabbatical year at Xerox PARC.[3] The computer magazine BYTE devoted the August 1984 issue to the language and its surrounding environment.[4]



Contents


1 Description
2 Dialects
3 Supersets
4 Derivatives
5 Language elements

5.1 Reserved words
5.2 Pervasive identifiers


6 Use in embedded systems

6.1 Cambridge Modula-2
6.2 Mod51
6.3 Modula-GM


7 Current[when?] compilers
8 Books
9 References
10 External links



Description[edit]
Modula-2 is a general purpose procedural language, sufficiently flexible to do systems programming, but with much broader application. In particular, it was designed to support separate compilation and data abstraction in a straightforward way. Much of the syntax is based on Wirth's earlier and better-known language, Pascal. Modula-2 was designed to be broadly similar to Pascal, with some elements and syntactic ambiguities removed and the important addition of the module concept, and direct language support for multiprogramming.
Here is an example of the source code for the "Hello world" program:


MODULE Hello;
FROM STextIO IMPORT WriteString;
BEGIN
  WriteString("Hello World!");
END Hello.


The Modula-2 module may be used to encapsulate a set of related subprograms and data structures, and restrict their visibility from other portions of the program. The module design implemented the data abstraction feature of Modula-2 in a very clean way. Modula-2 programs are composed of modules, each of which is made up of two parts: a definition module, the interface portion, which contains only those parts of the subsystem that are exported (visible to other modules), and an implementation module, which contains the working code that is internal to the module.
The language has strict scope control. In particular the scope of a module can be considered as an impenetrable wall: Except for standard identifiers no object from the outer world is visible inside a module unless explicitly imported; no internal module object is visible from the outside unless explicitly exported.
Suppose module M1 exports objects a, b, c, and P by enumerating its identifiers in an explicit export list


  DEFINITION MODULE M1;
    EXPORT QUALIFIED a, b, c, P;
    ...

Then the objects a, b,c, and P from module M1 become now known outside module M1 as M1.a, M1.b, M1.c, and M1.P. They are exported in a qualified manner to the universe (assumed module M1 is global). The exporting module's name, i.e. M1, is used as a qualifier followed by the object's name.
Suppose module M2 contains the following IMPORT declaration


  MODULE M2;
    IMPORT M1;
    ...

Then this means that the objects exported by module M1 to the universe of its enclosing program can now be used inside module M2. They are referenced in a qualified manner like this: M1.a, M1.b, M1.c, and M1.P. Example:


    ...
    M1.a := 0;
    M1.c := M1.P(M1.a + M1.b);
    ...

Qualified export avoids name clashes: For instance, if another module M3 would also export an object called P, then we can still distinguish the two objects, since M1.P differs from M3.P. Thanks to the qualified export it does not matter that both objects are called P inside their exporting modules M1 and M3.
There is an alternative technique available, which is in wide use by Modula-2 programmers. Suppose module M4 is formulated as this


  MODULE M4;
    FROM M1 IMPORT a, b, c, P;

Then this means that objects exported by module M1 to the universe can again be used inside module M4, but now by mere references to the exported identifiers in an "unqualified" manner like this: a, b, c, and P. Example:


    ...
    a := 0;
    c := P(a + b);
    ...

This technique of unqualifying import allows use of variables and other objects outside their exporting module in exactly the same simple, i.e. unqualified, manner as inside the exporting module. The walls surrounding all modules have now become irrelevant for all those objects for which this has been explicitly allowed. Of course unqualifying import is only usable if there are no name clashes.
These export and import rules may seem unnecessarily restrictive and verbose. But they do not only safeguard objects against unwanted access, but also have the pleasant side-effect of providing automatic cross-referencing of the definition of every identifier in a program: if the identifier is qualified by a module name, then the definition comes from that module. Otherwise if it occurs unqualified, simply search backwards, and you will either encounter a declaration of that identifier, or its occurrence in an IMPORT statement which names the module it comes from. This property becomes very useful when trying to understand large programs containing many modules.
The language provides for (limited) single-processor concurrency (monitors, coroutines and explicit transfer of control) and for hardware access (absolute addresses, bit manipulation, and interrupts). It uses name equivalence [clarification needed].
Dialects[edit]
There are two major dialects of Modula-2. The first is PIM, named after the book "Programming in Modula-2" by Niklaus Wirth. There were three major editions of PIM, the second, third (corrected) and fourth editions, each describing slight variants of the language. The second major dialect is ISO, from the standardization effort by the International Organization for Standardization.

PIM2 (1983)

Required explicit EXPORT clause in definition modules.


PIM3 (1985)

Removed the EXPORT clause from definition modules following the observation that everything within a definition module defines the interface to that module, hence the EXPORT clause was redundant.


PIM4 (1988)

Specified the behaviour of the MOD operator when the operands are negative.
Required all ARRAY OF CHAR strings to be terminated by ASCII NUL, even if the string fits exactly into its array.


ISO (1996 and 1998)

ISO Modula-2 resolved most of the ambiguities in PIM Modula-2. It added the data types COMPLEX and LONGCOMPLEX, exceptions, module termination (FINALLY clause) and a complete standard I/O library. There are numerous minor differences and clarifications.[5]



Supersets[edit]
There are several supersets of Modula-2 with language extensions for specific application domains:

PIM supersets

Canterbury Modula-2, extended with Oberon-like extensible records [This has been withdrawn and is no longer available anywhere]
Modula-2+, extended with preemptive threads and exceptions
Modula-2*, parallel extension[6]
Modula-P, another parallel extension[7]
Modula-Prolog, adding a Prolog layer[8]
Modula/R, with relational database extensions
Modula-GM, extensions for embedded systems




ISO supersets

Mod51, extended with IEC1131 constructs for embedded development



Derivatives[edit]
There are several derivative languages that resemble Modula-2 very closely but are new languages in their own right. Most are different languages with different purposes and with strengths and weaknesses of their own:

Modula-3, developed by a team of ex-Xerox employees who had moved to DEC and Olivetti[9]
Oberon, developed at ETH ZÃ¼rich for System Oberon[10] available online.
Oberon-2, Oberon with OO extensions[11]
Active Oberon, yet another object-oriented Extension of Oberon, developed also at ETH with the main objective to support parallel programming on multiprocessor and multicore systems.
Parallaxis, a language for machine-independent data-parallel programming[12]
Umbriel, developed by Pat Terry as a teaching language[13]
YAFL, a research language by Darius Blasband[14]

Many other current programming languages have adopted features of Modula-2.
Language elements[edit]
Reserved words[edit]
PIM [2,3,4] defines the following 40 reserved words:

AND         ELSIF           LOOP       REPEAT
ARRAY       END             MOD        RETURN
BEGIN       EXIT            MODULE     SET
BY          EXPORT          NOT        THEN
CASE        FOR             OF         TO
CONST       FROM            OR         TYPE
DEFINITION  IF              POINTER    UNTIL
DIV         IMPLEMENTATION  PROCEDURE  VAR
DO          IMPORT          QUALIFIED  WHILE
ELSE        IN              RECORD     WITH

Pervasive identifiers[edit]
PIM [3,4] defines the following 29 pervasive (built-in) identifiers:

ABS         EXCL            LONGINT    REAL
BITSET      FALSE           LONGREAL   SIZE
BOOLEAN     FLOAT           MAX        TRUE
CAP         HALT            MIN        TRUNC
CARDINAL    HIGH            NIL        VAL
CHAR        INC             ODD
CHR         INCL            ORD
DEC         INTEGER         PROC

Use in embedded systems[edit]
Cambridge Modula-2[edit]
Cambridge Modula-2 by Cambridge Microprocessor Systems is based on a subset of PIM4 with language extensions for embedded development. The compiler runs on DOS and it generates code for M68k based embedded microcontrollers running the MINOS operating system.
Mod51[edit]
Mod51 by Mandeno Granville Electronics is based on ISO Modula-2 with language extensions for embedded development following IEC1131, an industry standard for programmable logic controllers (PLC) closely related to Modula-2. The Mod51 compiler generates standalone code for 80C51 based microcontrollers.
Modula-GM[edit]
Delco Electronics, then a subsidiary of GM Hughes Electronics, developed a version of Modula-2 for embedded control systems starting in 1985. Delco named it Modula-GM. It was the first high level language used to replace machine language code for embedded systems in Delco's engine control units (ECUs). This was significant because Delco was producing over 28,000 ECUs per day in 1988 for GM; this was then the world's largest producer of ECUs.[15] The first experimental use of Modula-GM in an embedded controller was in the 1985 Antilock Braking System Controller which was based on the Motorola 68xxx microprocessor, and in 1993 Gen-4 ECU used by the CART (Championship Auto Racing Teams) and IRL (Indy Racing League) teams.[16] The first production use of Modula-GM was its use in GM trucks starting with the 1990 model year VCM (Vehicle Control Module) used to manage GM Powertrain's Vortec engines. Modula-GM was also used on all ECUs for GM's 90Â° Buick V6 family 3800 Series II used in the 1997-2005 model year Buick Park Avenue. The Modula-GM compilers and associated software management tools were sourced by Delco from Intermetrics.
Modula-2 was selected as the basis for Delco's high level language because of its many strengths over other alternative language choices in 1986. After Delco Electronics was spun off from GM (with other component divisions) to form Delphi in 1997, global sourcing required that a non-proprietary high-level software language be used. ECU embedded software now developed at Delphi is compiled with commercial C compilers.
Current[when?] compilers[edit]

ACK Modula-2 for MINIX (freeware)
ADW Modula-2 ADW Modula-2 for Windows, ISO compliant, ISO/IEC 10514-1, ISO/IEC 10514-2 (OO extension), ISO/IEC 10514-3 (Generic extension) (freeware)
Aglet Modula-2 for Amiga OS 4.0/PPC (freeware)
Cambridge Modula-2 for various micro-controllers and embedded MINOS operating system (commercial + proprietary software)
FST Fitted Software Tools Modula-2 for DOS (freeware)
Gardens Point Modula-2 for BSD, Linux, OS/2 and Solaris - ISO compliant (freeware), as of July 30, 2014, original website is down
Gardens Point Modula-2 (GPM/CLR) for .NET (freeware)
GNU Modula-2 for GCC platforms, version 1.0 released December 11, 2010; PIM2, PIM3, PIM4, and ISO compliant (free software, GPLed)
M2Amiga for Amiga (free software)
M2M by N. Wirth and collaborators from ETH Zurich, platform independent, generates M-code for virtual machine (freeware)
MacMETH by N. Wirth and collaborators from ETH Zurich for Macintosh, but Classic only (freeware)
Mod51 for the Intel 80x51 micro-controller family, ISO compliant, IEC1132 extensions (commercial + proprietary)
Modula-2 R10 Reference compiler for Modula-2 R10 (open-source/peer-review)
ModulaWare for OpenVMS, both VAX and Alpha, ISO compliant (commercial + proprietary)
MTC Modula-2 to C translator, available in Modula-2 and C source (free software)
Native XDS-x86 for Windows and Linux (x86), ISO compliant, TopSpeed compatible library (freeware)
p1 Modula-2 for Macintosh, both Classic and Mac OS X (PPC and Carbon API only), ISO compliant (commercial + proprietary)
The Karlsruhe Modula-2 Compiler MOCKA for various platforms, PIM compliant (commercial, freeware Linux/BSD versions)
TERRA M2VMS for OpenVMS, both VAX and Alpha, PIM compliant (commercial + proprietary)
The Ulm Modula-2 System for Solaris, both SPARC and MC68K (free software, GPLed)
XDS-C for Windows and Linux, 16- and 32-bit platforms, targeting C (K&amp;R &amp; ANSI), ISO compliant, TopSpeed compatible library (freeware)

Source for all entries: Modula2.net[17]
Books[edit]

Niklaus Wirth, "Programming in Modula-2", Fourth Edition, 1988, ISBN 978-0-387-96051-7
K. N. King, Modula-2, ISBN 0-669-11091-4
Richard J. Sutcliffe, "Modula-2: Abstractions for Data and Programming Structures," (Using ISO-Standard Modula-2) 2004-2005 Edition
Gleaves, Richard, "Modula-2 for Pascal Programmers", First Edition, 1984, ISBN 978-0-387-96051-7.
Cooper, Doug Oh My! Modula-2: An Introduction to Programming, 1991, ISBN 0393961079

References[edit]


^ Summary of Projects by N. Wirth, 1962-1999
^ N. Wirth, Pascal and its Successors. In Software Pioneers, M. Broy and E. Denert, Eds. Springer-Verlag, 2002, ISBN 3-540-43081-4
^ N. Wirth, Programming in Modula-2, fourth Edition, page 4.
^ BYTE&#160;â The Small Systems Journal, 1984 (8), pp. 143-232. Available at archive.org
^ ISO/IEC 10514-1:1996
^ Tichy et al., Modula-2*: An Extension for Modula-2 for highly parallel portable programs, University of Karlsruhe [1990]
^ BrÃ¤unl, Parallel Programming, Prentice-Hall [1993]
^ Muller, C. Modula--Prolog: A Software Development (1986) IEEE Software
^ Cardelli et al., Modula-3 Report, Research Report 31, Systems Research Center, Digital Equipment Corporation, [1988]
^ N. Wirth &amp; J. Gutknecht, Project Oberon: the design of an operating system and compiler, ISBN 0-201-54428-8, Addison-Wesley [1992]
^ Moessenboeck &amp; Wirth, The Programming Language Oberon-2, ETH Zurich [1995]
^ Thomas BrÃ¤unl, Parallaxis, a Language for Structured Data-parallel Programming, University of Stuttgart [1996]
^ Pat D. Terry, Another Minimal Programming Language, ACM SIGPLAN Notices No. 30 [1995]
^ D. Blasband, The YAFL Programming Language, Second Edition, [1993]
^ Delco Electronics Electron Magazine, The Atwood Legacy, Spring '89, page 25
^ Development of electronics for GM auto racing
^ List of Modula-2 compilers at modula2.net


External links[edit]

Modula-2 Internet directory
The Modula-2 website ring

This article is based on material taken from the Free On-line Dictionary of Computing prior to 1 November 2008 and incorporated under the "relicensing" terms of the GFDL, version 1.3 or later.







					
						Retrieved from "https://en.wikipedia.org/w/index.php?title=Modula-2&amp;oldid=691168826"					
				Categories: Modula programming language familySystems programming languagesProgramming languages created in the 1970sProgramming languages with an ISO standardHidden categories: Wikipedia articles needing clarification from August 2014Vague or ambiguous time from August 2015				
							
		
		
			