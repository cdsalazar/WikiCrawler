


		
		
		
			

							
						

			Java Persistence API
									
									From Wikipedia, the free encyclopedia
								
												
					Jump to:					navigation, 					search
				
				




This article needs additional citations for verification. Please help improve this article by adding citations to reliable sources. Unsourced material may be challenged and removed. (June 2010)


The Java Persistence API (JPA) is a Java application programming interface specification that describes the management of relational data in applications using Java Platform, Standard Edition and Java Platform, Enterprise Edition.
The Java Persistence API originated as part of the work of the JSR 220 Expert Group of the Java Community Process. JPA 2.0 was the work of the JSR 317 Expert Group.
Persistence in this context covers three areas:

the API itself, defined in the javax.persistence package
the Java Persistence Query Language (JPQL)
object/relational metadata

The reference implementation for JPA is EclipseLink.



Contents


1 History
2 Entities
3 The Java Persistence Query Language
4 Motivation
5 Related technologies

5.1 Enterprise JavaBeans
5.2 Java Data Objects API
5.3 Service Data Object API
5.4 Hibernate


6 JPA 2.0
7 JPA 2.1
8 Tools
9 See also
10 References
11 External links

11.1 General info
11.2 Tutorials





History[edit]
The final release date of the JPA 1.0 specification was 11 May 2006 as part of Java Community Process JSR 220. The JPA 2.0 specification was released 10 December 2009. The JPA 2.1 specification was released 22 April 2013.
Entities[edit]
A persistence entity is a lightweight Java class whose state is typically persisted to a table in a relational database. Instances of such an entity correspond to individual rows in the table. Entities typically have relationships with other entities, and these relationships are expressed through object/relational metadata. Object/relational metadata can be specified directly in the entity class file by using annotations, or in a separate XML descriptor file distributed with the application.
The Java Persistence Query Language[edit]
Further information: Detailed information is available at Wikibook's Java Persistence/Querying article
The Java Persistence Query Language (JPQL) makes queries against entities stored in a relational database. Queries resemble SQL queries in syntax, but operate against entity objects rather than directly with database tables.
Motivation[edit]
Prior to the introduction of EJB 3.0 specification, many enterprise Java developers used lightweight persistent objects, provided by either persistence frameworks (for example Hibernate) or data access objects instead of entity beans. This is due to the fact that entity beans, in previous EJB specifications, called for too much complicated code and heavy resource footprint, and they could be used only in Java EE application servers because of interconnections and dependencies in the source code between beans and DAO objects or persistence framework. Thus, many of the features originally presented in third-party persistence frameworks were incorporated into the Java Persistence API, and, as of 2006, projects like Hibernate (version 3.2) and TopLink Essentials have become themselves implementations of the Java Persistence API specification.
Related technologies[edit]
Enterprise JavaBeans[edit]
The EJB 3.0 specification (itself part of the Java EE 5 platform) included a definition of the Java Persistence API. However, end-users do not need an EJB container or a Java EE application server in order to run applications that use this persistence API.[1] Future versions of the Java Persistence API will be defined in a separate JSR and specification rather than in the EJB JSR/specification.
The Java Persistence API replaces the persistence solution of EJB 2.0 CMP (Container Managed Persistence).
Java Data Objects API[edit]
Main article: Java Data Objects
The Java Persistence API was developed in part to unify the Java Data Objects API, and the EJB 2.0 Container Managed Persistence (CMP) API. As of 2009[update] most products supporting each of those APIs support the Java Persistence API.
The Java Persistence API specifies persistence only for relational database management systems. That is, JPA focuses on object-relational mapping (ORM) (note that there are JPA providers who support other database models besides relational database, but this is outside the scope of what JPA was designed for). Refer to JPA 2 spec section 1 introduction for clarification of the role of JPA, which states very clearly "The technical objective of this work is to provide an object/relational mapping facility for the Java application developer using a Java domain model to manage a relational database."
The Java Data Objects specification supports ORM, as well as persistence to other types of database models, for example flat file databases and NoSQL databases, including document databases, graph databases, as well as literally any other conceivable datastore.
Service Data Object API[edit]
Main article: Service Data Objects
The designers[2] of the Java Persistence API aimed to provide for relational persistence, with many of the key areas taken from object-relational mapping tools such as Hibernate and TopLink. Java Persistence API improved on and replaced EJB 2.0, evidenced by its inclusion in EJB 3.0. The Service Data Objects (SDO) API (JSR 235) has a very different objective to the Java Persistence API and is considered [3][4] complementary. The SDO API is designed for service-oriented architectures, multiple data formats rather than only relational data, and multiple programming languages. The Java Community Process manages the Java version of the SDO API; the C++ version of the SDO API is managed via OASIS.
Hibernate[edit]
Main article: Hibernate (Java)
Hibernate provides an open source object-relational mapping framework for Java. Versions 3.2 and later provide an implementation for the Java Persistence API.[5] Gavin King founded the Hibernate project.[6] He represented JBoss on JSR 220,[7] the JCP expert group charged with developing JPA. This led to ongoing controversy and speculation surrounding the relationship between JPA and Hibernate. Sun Microsystems has stated[8] that ideas came from several frameworks, including Hibernate and Java Data Objects
JPA 2.0[edit]
Development of a new version of JPA 2.0 was started in July 2007 in the Java Community Process as JSR 317. JPA 2.0 was approved as final on 10 December 2009. The focus of JPA 2.0 was to address features that were present in some of the popular ORM vendors but could not gain consensus approval for JPA 1.0.
Main features included were:

Expanded object-relational mapping functionality

support for collections of embedded objects, linked in the ORM with a many-to-one relationship
ordered lists
combinations of access types


A criteria query API
standardization of SQL Hints
standardization of additional metadata to support DDL generation
support for validation
Shared object cache support.

Vendors supporting JPA 2.0:

Batoo JPA
DataNucleus (formerly JPOX)
EclipseLink (formerly Oracle TopLink)
JBoss with Hibernate
Kundera
ObjectDB
OpenJPA
OrientDB from Orient Technologies
IBM, for WebSphere Application Server[9]
Versant Corporation JPA (not relational, object database)[10]

JPA 2.1[edit]
Development of a new version of JPA 2.1 was started in July 2011 as JSR 338. JPA 2.1 was approved as final on 22 May 2013.
Main features included were:

Converters - allowing custom code conversions between database and object types.
Criteria Update/Delete - allows bulk updates and deletes through the Criteria API.
Stored Procedures - allows queries to be defined for database stored procedures.
Schema Generation
Entity Graphs - allow partial or specified fetching or merging of objects.
JPQL/Criteria enhancements - arithmetic sub-queries, generic database functions, join ON clause, TREAT option.

Vendors supporting JPA 2.1

DataNucleus
EclipseLink
Hibernate

Tools[edit]

NetBeans JPA Modeler
Eclipse JPA (Dali)

See also[edit]

JDBC
XQJ
MyBatis
pureQuery
OpenXava
SAP NetWeaver Application Server
.NET Persistence API (NPA)

References[edit]


^ Hibernate EntityManager: Java SE environments
Hibernate EntityManager: Obtaining an EntityManager in a Java SE environment
^ "JSR 220 Members".&#160;
^ Barreto, Charlton. "SDO and JPA". Digital Walkabout. Retrieved 5 May 2011.&#160;
^ Edwards, Mike. "SDO and Java Persistence Architecture (JPA)". Open SOA. osoa.org. Retrieved 5 May 2011.&#160;
^ "hibernate.org - Java Persistence with Hibernate". JBoss. Retrieved 2008-11-17. Hibernate implements the Java Persistence object/relational javaAPI and persistence management interfaces&#160;
^ Java Persistence with Hibernate. Manning Publications. ISBN&#160;9781617290459. Retrieved 8 December 2013. Gavin King is the founder of the Hibernate project&#160;
^ "JBoss.com - Industry Leadership". JBoss. Retrieved 2008-11-17. JSR 220, EJB 3.0 Spec Committee, Gavin King, Bill Burke, Marc Fleury&#160;
^ "Java Persistence API FAQ". Sun Microsystems. Archived from the original on 2008-08-22. Retrieved 2010-07-01. The Java Persistence API draws upon the best ideas from persistence technologies such as Hibernate, TopLink, and JDO&#160;
^ "IBM WebSphere Application Server V7 Feature Pack for OSGi Applications and Java Persistence API". Download web site. IBM. 27 April 2010. Retrieved 8 December 2013.&#160;
^ "Versant JPA 2-Step Download". Download web site. Actian. Retrieved 8 December 2013.&#160;


External links[edit]



Wikibooks has a book on the topic of: Java Persistence


General info[edit]

JCP Persistence page
GlassFish's Persistence page
Documentation for the final version of the EJB3 spec (called JSR220)

Tutorials[edit]

Persistence in the Java EE 5 tutorial
Java EE 6 Persistence API tutorial
Java EE 7 Persistence API tutorial
Java EE 6 Persistence API Javadoc
Java EE 7 Persistence API Javadoc
JPA Tutorial using OpenJPA as implementation
JPA Tutorial from Java Code Geeks
JPA Tutorial by Prasad Kharkar









v
t
e


Java Persistence API









DataNucleus
EclipseLink
Hibernate
ObjectDB
OpenJPA
TopLink
















v
t
e


Java EE 7 specifications






Web Application



Servlet
JavaServer Pages
Expression Language
JSTL
JavaServer Faces
WebSocket
JSON Processing








Enterprise Application



CDI
Dependency Injection
Bean Validation
Enterprise JavaBeans
JPA
JMS
JTA
JavaMail
Interceptors
JCA
Common Annotations
Batch Applications
Concurrency Utilities








Web Services



JAX-RS
Enterprise Web Services
JAX-WS
Web Services Metadata
Java API for XML Messaging
JAXR








Management and Security



Java Authentication SPI
Java Authorization SPI
J2EE Management
Debugging for Other Languages








Related Specs in Java SE



JAXB
JAXP
JDBC
JMX
JavaBeans Activation Framework
Streaming API for XML













Authority control



GND: 7702016-9















					
						Retrieved from "https://en.wikipedia.org/w/index.php?title=Java_Persistence_API&amp;oldid=690500766"					
				Categories: Java specification requestsJava enterprise platformJava APIsObject-relational mappingPersistenceHidden categories: Articles needing additional references from June 2010All articles needing additional referencesArticles containing potentially dated statements from 2009All articles containing potentially dated statementsWikipedia articles with GND identifiers				
							
		
		
			