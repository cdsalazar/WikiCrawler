


		
		
		
			

							
						

			Access modifiers
									
									From Wikipedia, the free encyclopedia
								
												
					Jump to:					navigation, 					search
				
				




This article needs additional citations for verification. Please help improve this article by adding citations to reliable sources. Unsourced material may be challenged and removed. (March 2013)


Access modifiers (or access specifiers) are keywords in object-oriented languages that set the accessibility of classes, methods, and other members. Access modifiers are a specific part of programming language syntax used to facilitate the encapsulation of components.[1]
In C++, there are only three access modifiers. C# extends the number of them to five, while Java has four access modifiers,[2] but three keywords for this purpose. In Java, having no keyword before defaults to the package-private modifier. Access specifiers for classes:- When a class is declared as public, it is accessible to other classes defined in the same package as well as those defined in other packages. This is the most commonly used specifier for classes. A class cannot be declared as private. If no access specifier is stated, the default access restrictions will be applied. The class will be accessible to other classes in the same package but will be inaccessible to classes outside the package. When we say that a class is inaccessible, it simply means that we cannot create an object of that class or declare a variable of that class type. The protected access specifier too cannot be applied to a class.



Contents


1 Names of keywords
2 Example in C++
3 References

3.1 Notes
3.2 Bibliography





Names of keywords[edit]
C++ uses the three modifiers called public, protected, and private. C# has the modifiers public, protected ,internal, private, and protected internal. Java has public, package, protected, and private. The access modifier package is the default and used, if any other access modifier keyword is missing. This is not the case in C++, where an absence means that the object is accessed privately. The meaning of these modifiers may differ from one language to another. A comparison of the keywords, ordered from the most restrictive to the most open, and their meaning in these three languages follows. Their visibility ranges from the same class to the package where the class is defined to a general access permission. Below, the maximal access is written into the table.


Keyword
C#
C++
Java


private
class
class
class


protected internal
same assembly and
derived classes
-
-


protected
derived classes
derived classes
derived classes
and/or
within same package


package
-
-
within its package


public internal
same assembly
-
-


public
everybody
everybody
everybody


Example in C++[edit]


#include &lt;iostream&gt;
using std::cout;
using std::endl;

struct B { // default access modifier inside struct is public
    void set_n(int v) { n = v; }
    void f()          { cout &lt;&lt; "B::f" &lt;&lt; endl; }
  protected:
    int m, n; // B::m, B::n are protected
  private:
    int x;
};
 
struct D : B {
    using B::m;               // D::m is public
    int get_n() { return n; } // B::n is accessible here, but not outside
//  int get_x() { return x; } // ERROR, B::x is inaccessible here
 private:
    using B::f;               // D::f is private
};
 
int main() {
    D d;

//  d.x = 2; // ERROR, private
//  d.n = 2; // ERROR, protected
    d.m = 2; // protected B::m is accessible as D::m

    d.set_n(2); // calls B::set_n(int)
    cout &lt;&lt; d.get_n() &lt;&lt; endl; // output: 2

//  d.f();   // ERROR, B::f is inaccessible as D::f


    B&amp; b = d; // b references d and "views" it as being type B

//  b.x = 3; // ERROR, private
//  b.n = 3; // ERROR, protected
//  b.m = 3; // ERROR, B::m is protected

    b.set_n(3); // calls B::set_n(int)
//  cout &lt;&lt; b.get_n(); // ERROR, 'struct B' has no member named 'get_n'

    b.f();   // calls B::f()
    return 0;
}

References[edit]
Notes[edit]


^ Mayo 2002, pp.&#160;199.
^ http://javapapers.com/core-java/access-modifiers-in-java-explain/


Bibliography[edit]

Mayo, Joseph (2002), C Sharp Unleashed, Sams publishing, ISBN&#160;9780672321221&#160;





This computing article is a stub. You can help Wikipedia by expanding it.


v
t
e












					
						Retrieved from "https://en.wikipedia.org/w/index.php?title=Access_modifiers&amp;oldid=683183375"					
				Categories: Programming constructsComputing stubsHidden categories: Articles needing additional references from March 2013All articles needing additional referencesAll stub articles				
							
		
		
			