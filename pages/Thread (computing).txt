


		
		
		
			

							
						

			Thread (computing)
									
									From Wikipedia, the free encyclopedia
								  (Redirected from Thread (computer science))
												
					Jump to:					navigation, 					search
				
				This article is about the concurrency concept.  For the multithreading in hardware, see Multithreading (computer architecture).  For the form of code consisting entirely of subroutine calls, see Threaded code.  For other uses, see Thread (disambiguation).





This article includes a list of references, but its sources remain unclear because it has insufficient inline citations. Please help to improve this article by introducing more precise citations. (December 2009)






A process with two threads of execution, running on a single processor


In computer science, a thread of execution is the smallest sequence of programmed instructions that can be managed independently by a scheduler, which is typically a part of the operating system.[1] The implementation of threads and processes differs between operating systems, but in most cases a thread is a component of a process. Multiple threads can exist within the same process, executing concurrently (one starting before others finish) and share resources such as memory, while different processes do not share these resources. In particular, the threads of a process share its instructions (executable code) and its context (the values of its variables at any given moment).
On a single processor, multithreading is generally implemented by time slicing (as in multitasking), and the central processing unit (CPU) switches between different software threads. This context switching generally happens frequently enough that the user perceives the threads or tasks as running at the same time (in parallel). On a multiprocessor or multi-core system, multiple threads can be executed in parallel (at the same instant), with every processor or core executing a separate thread simultaneously; on a processor or core with hardware threads, separate software threads can also be executed concurrently by separate hardware threads.
Threads made an early appearance in OS/360 Multiprogramming with a Variable Number of Tasks (MVT) in 1967, in which they were called "tasks". Process schedulers of many modern operating systems directly support both time-sliced and multiprocessor threading, and the operating system kernel allows programmers to manipulate threads by exposing required functionality through the system call interface. Some threading implementations are called kernel threads, whereas lightweight processes (LWP) are a specific type of kernel thread that share the same state and information. Furthermore, programs can have user-space threads when threading with timers, signals, or other methods to interrupt their own execution, performing a sort of ad hoc time-slicing.



Contents


1 Threads vs. processes
2 Single threading
3 Multithreading
4 Scheduling
5 Processes, kernel threads, user threads, and fibers

5.1 Thread and fiber issues

5.1.1 Concurrency and data structures
5.1.2 I/O and scheduling




6 Models

6.1 1:1 (kernel-level threading)
6.2 N:1 (user-level threading)
6.3 M:N (hybrid threading)
6.4 Hybrid implementation examples
6.5 Fiber implementation examples


7 Programming language support
8 Practical multithreading
9 See also
10 Notes
11 References
12 External links



Threads vs. processes[edit]
Threads differ from traditional multitasking operating system processes in that:

processes are typically independent, while threads exist as subsets of a process
processes carry considerably more state information than threads, whereas multiple threads within a process share process state as well as memory and other resources
processes have separate address spaces, whereas threads share their address space
processes interact only through system-provided inter-process communication mechanisms
context switching between threads in the same process is typically faster than context switching between processes.

Systems such as Windows NT and OS/2 are said to have "cheap" threads and "expensive" processes; in other operating systems there is not so great a difference except the cost of an address space switch which on some architectures (notably x86) results in a translation lookaside buffer (TLB) flush.
Single threading[edit]
In computer programming, single threading is the processing of one command at a time.[2] The opposite of single threading is multithreading.[3] While it has been suggested that the term single threading is misleading, the term has been widely accepted within the functional programming community.[4]
Multithreading[edit]
Multithreading is mainly found in multitasking operating systems. Multithreading is a widespread programming and execution model that allows multiple threads to exist within the context of a single process. These threads share the process's resources, but are able to execute independently. The threaded programming model provides developers with a useful abstraction of concurrent execution. Multithreading can also be applied to a single process to enable parallel execution on a multiprocessing system.
Multithreaded applications have the following advantages:

Responsiveness: multithreading can allow an application to remain responsive to input. In a single-threaded program, if the main execution thread blocks on a long-running task, the entire application can appear to freeze. By moving such long-running tasks to a worker thread that runs concurrently with the main execution thread, it is possible for the application to remain responsive to user input while executing tasks in the background. On the other hand, in most cases multithreading is not the only way to keep a program responsive, with non-blocking I/O and/or Unix signals being available for gaining similar results.[5]
Faster execution: this advantage of a multithreaded program allows it to operate faster on computer systems that have multiple CPUs or one or more multi-core CPUs, or across a cluster of machines, because the threads of the program naturally lend themselves to parallel execution, assuming sufficient independence (that they do not need to wait for each other).
Lower resource consumption: using threads, an application can serve multiple clients concurrently using fewer resources than it would need when using multiple process copies of itself. For example, the Apache HTTP server uses thread pools: a pool of listener threads for listening to incoming requests, and a pool of server threads for processing those requests.
Better system utilization: as an example, a file system using multiple threads can achieve higher throughput and lower latency since data in a faster medium (such as cache memory) can be retrieved by one thread while another thread retrieves data from a slower medium (such as external storage) without either thread waiting for the other to complete.
Simplified sharing and communication: unlike processes, which require a message passing or shared memory mechanism to perform inter-process communication (IPC), threads can communicate through data, code and files they already share.
Parallelization: applications looking to utilize multicore or multi-CPU systems can use multithreading to split data and tasks into parallel subtasks and let the underlying architecture manage how the threads run, either concurrently on a single core or in parallel on multiple cores. GPU computing environments like CUDA and OpenCL use the multithreading model where dozens to hundreds of threads run in parallel on a large number of cores.

Multithreading has the following drawbacks:

Synchronization: since threads share the same address space, the programmer must be careful to avoid race conditions and other non-intuitive behaviors. In order for data to be correctly manipulated, threads will often need to rendezvous in time in order to process the data in the correct order. Threads may also require mutually exclusive operations (often implemented using semaphores) in order to prevent common data from being simultaneously modified or read while in the process of being modified. Careless use of such primitives can lead to deadlocks.
Thread crashes a process: an illegal operation performed by a thread crashes the entire process; therefore, one misbehaving thread can disrupt the processing of all the other threads in the application.

Scheduling[edit]
Operating systems schedule threads either preemptively or cooperatively. Preemptive multithreading is generally considered the superior approach, as it allows the operating system to determine when a context switch should occur. The disadvantage of preemptive multithreading is that the system may make a context switch at an inappropriate time, causing lock convoy, priority inversion or other negative effects, which may be avoided by cooperative multithreading. Cooperative multithreading, on the other hand, relies on the threads themselves to relinquish control once they are at a stopping point. This can create problems if a thread is waiting for a resource to become available.
Until the early 2000s, most desktop computers had only one single-core CPU, with no support for hardware threads, although threads were still used on such computers because switching between threads was generally still quicker than full-process context switches. In 2002, Intel added support for simultaneous multithreading to the Pentium&#160;4 processor, under the name hyper-threading; in 2005, they introduced the dual-core Pentium&#160;D processor and AMD introduced the dual-core Athlon&#160;64&#160;X2 processor.
Processors in embedded systems, which have higher requirements for real-time behaviors, might support multithreading by decreasing the thread-switch time, perhaps by allocating a dedicated register file for each thread instead of saving/restoring a common register file.
Processes, kernel threads, user threads, and fibers[edit]
Main articles: Process (computing) and Fiber (computer science)
Scheduling can be done at the kernel level or user level, and multitasking can be done preemptively or cooperatively. This yields a variety of related concepts.
At the kernel level, a process contains one or more kernel threads, which share the process's resources, such as memory and file handles – a process is a unit of resources, while a thread is a unit of scheduling and execution. Kernel scheduling is typically uniformly done preemptively or, less commonly, cooperatively. At the user level a process such as a runtime system can itself schedule multiple threads of execution. If these do not share data, as in Erlang, they are usually analogously called processes,[6] while if they share data they are usually called (user) threads, particularly if preemptively scheduled. Cooperatively scheduled user threads are known as fibers; different processes may schedule user threads differently. User threads may be executed by kernel threads in various ways (one-to-one, many-to-one, many-to-many). The term "light-weight process" variously refers to user threads or to kernel mechanisms for scheduling user threads onto kernel threads.
A process is a "heavyweight" unit of kernel scheduling, as creating, destroying, and switching processes is relatively expensive. Processes own resources allocated by the operating system. Resources include memory (for both code and data), file handles, sockets, device handles, windows, and a process control block. Processes are isolated by process isolation, and do not share address spaces or file resources except through explicit methods such as inheriting file handles or shared memory segments, or mapping the same file in a shared way – see interprocess communication. Creating or destroying a process is relatively expensive, as resources must be acquired or released. Processes are typically preemptively multitasked, and process switching is relatively expensive, beyond basic cost of context switching, due to issues such as cache flushing.[a]
A kernel thread is a "lightweight" unit of kernel scheduling. At least one kernel thread exists within each process. If multiple kernel threads can exist within a process, then they share the same memory and file resources. Kernel threads are preemptively multitasked if the operating system's process scheduler is preemptive. Kernel threads do not own resources except for a stack, a copy of the registers including the program counter, and thread-local storage (if any), and are thus relatively cheap to create and destroy. Thread switching is also relatively cheap: it requires a context switch (saving and restoring registers and stack pointer), but does not change virtual memory and is thus cache-friendly (leaving TLB valid). The kernel can assign one thread to each logical core in a system (because each processor splits itself up into multiple logical cores if it supports multithreading, or only supports one logical core per physical core if it does not), and can swap out threads that get blocked. However, kernel threads take much longer than user threads to be swapped.
Threads are sometimes implemented in userspace libraries, thus called user threads. The kernel is unaware of them, so they are managed and scheduled in userspace. Some implementations base their user threads on top of several kernel threads, to benefit from multi-processor machines (M:N model). In this article the term "thread" (without kernel or user qualifier) defaults to referring to kernel threads. User threads as implemented by virtual machines are also called green threads. User threads are generally fast to create and manage, but cannot take advantage of multithreading or multiprocessing, and will get blocked if all of their associated kernel threads get blocked even if there are some user threads that are ready to run.
Fibers are an even lighter unit of scheduling which are cooperatively scheduled: a running fiber must explicitly "yield" to allow another fiber to run, which makes their implementation much easier than kernel or user threads. A fiber can be scheduled to run in any thread in the same process. This permits applications to gain performance improvements by managing scheduling themselves, instead of relying on the kernel scheduler (which may not be tuned for the application). Parallel programming environments such as OpenMP typically implement their tasks through fibers. Closely related to fibers are coroutines, with the distinction being that coroutines are a language-level construct, while fibers are a system-level construct.
Thread and fiber issues[edit]
Concurrency and data structures[edit]
Threads in the same process share the same address space. This allows concurrently running code to couple tightly and conveniently exchange data without the overhead or complexity of an IPC. When shared between threads, however, even simple data structures become prone to race conditions if they require more than one CPU instruction to update: two threads may end up attempting to update the data structure at the same time and find it unexpectedly changing underfoot. Bugs caused by race conditions can be very difficult to reproduce and isolate.
To prevent this, threading APIs offer synchronization primitives such as mutexes to lock data structures against concurrent access. On uniprocessor systems, a thread running into a locked mutex must sleep and hence trigger a context switch. On multi-processor systems, the thread may instead poll the mutex in a spinlock. Both of these may sap performance and force processors in SMP systems to contend for the memory bus, especially if the granularity of the locking is fine.

Although threads seem to be a small step from sequential computation, in fact, they represent a huge step. They discard the most essential and appealing properties of sequential computation: understandability, predictability, and determinism. Threads, as a model of computation, are wildly non-deterministic, and the job of the programmer becomes one of pruning that nondeterminism.
—  The Problem with Threads, Edward A. Lee, UC Berkeley, 2006[7]


I/O and scheduling[edit]
User thread or fiber implementations are typically entirely in userspace. As a result, context switching between user threads or fibers within the same process is extremely efficient because it does not require any interaction with the kernel at all: a context switch can be performed by locally saving the CPU registers used by the currently executing user thread or fiber and then loading the registers required by the user thread or fiber to be executed. Since scheduling occurs in userspace, the scheduling policy can be more easily tailored to the requirements of the program's workload.
However, the use of blocking system calls in user threads (as opposed to kernel threads) or fibers can be problematic. If a user thread or a fiber performs a system call that blocks, the other user threads and fibers in the process are unable to run until the system call returns. A typical example of this problem is when performing I/O: most programs are written to perform I/O synchronously. When an I/O operation is initiated, a system call is made, and does not return until the I/O operation has been completed. In the intervening period, the entire process is "blocked" by the kernel and cannot run, which starves other user threads and fibers in the same process from executing.
A common solution to this problem is providing an I/O API that implements a synchronous interface by using non-blocking I/O internally, and scheduling another user thread or fiber while the I/O operation is in progress. Similar solutions can be provided for other blocking system calls. Alternatively, the program can be written to avoid the use of synchronous I/O or other blocking system calls.
SunOS 4.x implemented "light-weight processes" or LWPs. NetBSD 2.x+, and DragonFly BSD implement LWPs as kernel threads (1:1 model). SunOS 5.2 through SunOS 5.8 as well as NetBSD 2 to NetBSD 4 implemented a two level model, multiplexing one or more user level threads on each kernel thread (M:N model). SunOS 5.9 and later, as well as NetBSD 5 eliminated user threads support, returning to a 1:1 model.[8] FreeBSD 5 implemented M:N model. FreeBSD 6 supported both 1:1 and M:N, user could choose which one should be used with a given program using /etc/libmap.conf. Starting with FreeBSD 7, the 1:1 became the default. FreeBSD 8 no longer supports the M:N model.
The use of kernel threads simplifies user code by moving some of the most complex aspects of threading into the kernel. The program does not need to schedule threads or explicitly yield the processor. User code can be written in a familiar procedural style, including calls to blocking APIs, without starving other threads. However, kernel threading may force a context switch between threads at any time, and thus expose race hazards and concurrency bugs that would otherwise lie latent. On SMP systems, this is further exacerbated because kernel threads may literally execute on separate processors in parallel.
Models[edit]
1:1 (kernel-level threading)[edit]
Threads created by the user in a 1:1 correspondence with schedulable entities in the kernel[9] are the simplest possible threading implementation. OS/2 and Win32 used this approach from the start, while on Linux the usual C library implements this approach (via the NPTL or older LinuxThreads). This approach is also used by Solaris, NetBSD, FreeBSD, OS X, and iOS.
N:1 (user-level threading)[edit]
An N:1 model implies that all application-level threads map to a single kernel-level scheduled entity;[9] the kernel has no knowledge of the application threads. With this approach, context switching can be done very quickly and, in addition, it can be implemented even on simple kernels which do not support threading. One of the major drawbacks however is that it cannot benefit from the hardware acceleration on multi-threaded processors or multi-processor computers: there is never more than one thread being scheduled at the same time.[9] For example: If one of the threads needs to execute an I/O request, the whole process is blocked and the threading advantage cannot be utilized. The GNU Portable Threads uses User-level threading, as does State Threads.
M:N (hybrid threading)[edit]
M:N maps some M number of application threads onto some N number of kernel entities,[9] or "virtual processors." This is a compromise between kernel-level ("1:1") and user-level ("N:1") threading. In general, "M:N" threading systems are more complex to implement than either kernel or user threads, because changes to both kernel and user-space code are required. In the M:N implementation, the threading library is responsible for scheduling user threads on the available schedulable entities; this makes context switching of threads very fast, as it avoids system calls. However, this increases complexity and the likelihood of priority inversion, as well as suboptimal scheduling without extensive (and expensive) coordination between the userland scheduler and the kernel scheduler.
Hybrid implementation examples[edit]

Scheduler activations used by the NetBSD native POSIX threads library implementation (an M:N model as opposed to a 1:1 kernel or userspace implementation model)
Marcel from the PM2 project.
The OS for the Tera/Cray MTA
Microsoft Windows 7[citation needed]
The Haskell compiler GHC uses lightweight threads which are scheduled on operating system threads.

Fiber implementation examples[edit]
Fibers can be implemented without operating system support, although some operating systems or libraries provide explicit support for them.

Win32 supplies a fiber API[10] (Windows NT 3.51 SP3 and later)
Ruby as Green threads
Netscape Portable Runtime (includes a user-space fibers implementation)
ribs2

Programming language support[edit]
IBM PL/I(F) included support for multithreading (called multitasking) in the late 1960s, and this was continued in the Optimizing Compiler and later versions. The IBM Enterprise PL/I compiler introduced a new model "thread" API. Neither version was part of the PL/I standard.
Many programming languages support threading in some capacity. Many implementations of C and C++ provide support for threading on their own, but also provide access to the native threading APIs provided by the operating system. Some higher level (and usually cross platform) programming languages such as Java, Python, and .NET programming languages, expose threading to the developer while abstracting the platform specific differences in threading implementations in the runtime. A number of other programming languages also try to abstract the concept of concurrency and threading from the developer altogether (Cilk, OpenMP, MPI). Some languages are designed for sequential parallelism instead (especially using GPUs), without requiring concurrency or threads (Ateji PX, CUDA).
The implementations of a few interpreted programming languages, such as the MRI implementation of Ruby and the CPython implementation of Python, support threading and concurrent but not parallel execution of threads, due to a global interpreter lock (GIL). The GIL is a mutual exclusion lock held by the interpreter that can prevent the interpreter from simultaneously interpreting the applications code on two or more threads at the same time, which effectively limits the parallelism on multiple core systems. This limits performance mostly for processor-bound threads, which require the processor, and not much for IO-bound or network-bound ones.
Other implementations of interpreted programming languages, such as Tcl using the Thread extension, avoid the GIL limitation by using an Apartment model where data and code must be explicitly "shared" between threads. In Tcl each thread has at one or more interpreters.
Event-driven programming hardware description languages such as Verilog have a different threading model that supports extremely large numbers of threads (for modeling hardware).
Practical multithreading[edit]
A standardized interface for thread implementation is Pthreads, which is a set of C-function library calls. OS vendors are free to implement the interface as they wish but the application developer should be able to use the same interface across multiple platforms. Most UNIX platforms including Linux support Pthreads. Microsoft Windows has its own set of thread functions in the process.h interface for multi-threading, like beginthread. Java provides yet another standardized interface over the host operating system using the java.util.concurrent library.
Multi-threading libraries provide a function call to create a new thread, which takes a function as a parameter. A concurrent thread is then created which starts running the passed function and ends when the function returns. The thread libraries also offer synchronization functions which make it possible to implement race condition-error free multi-threading functions using mutexes, condition variables, critical sections, semaphores, monitors and other synchronization primitives.
Another paradigm of thread usage is that of thread pools where a certain number of threads are created at startup that then wait for a task to be assigned. When a new task arrives, it wakes up, completes the task and goes back to waiting. This avoids the relatively expensive thread creation and destruction functions for every task performed and takes thread management out of the application developer’s hand and leaves it to a library or the operating system that is better suited to optimize thread management. For example, frameworks like Grand Central Dispatch and Threading Building Blocks.
In programming models such as CUDA designed for parallel computation, an array of threads run the same code in parallel using only its ID to find its data in memory. In essence, the application must be designed so that each thread performs the same operation on different segments of memory so that they can operate in parallel and utilize the GPU architecture.
See also[edit]




Computer programming portal



Computing portal





Clone (Linux system call)
Communicating sequential processes
Computer multitasking
Multi-core (computing)
Multithreading (computer hardware)
Non-blocking algorithm
Priority inversion
Protothreads
Simultaneous multithreading
Thread pool pattern
Thread safety
Win32 Thread Information Block


Notes[edit]


^ Process switching changes virtual memory addressing, causing invalidation and thus flushing of an untagged translation lookaside buffer, notably on x86.


References[edit]


^ Lamport, Leslie (September 1979). "How to Make a Multiprocessor Computer That Correctly Executes Multiprocess Programs" (PDF). IEEE Transactions on Computers C–28 (9): 690–691.&#160;
^ Raúl Menéndez; Doug Lowe (2001). Murach's CICS for the COBOL Programmer. Mike Murach &amp; Associates. p.&#160;512. ISBN&#160;1-890774-09-X.&#160;
^ Stephen R. G. Fraser. Pro Visual C++/CLI and the .NET 3.5 Platform. Apress. p.&#160;780. ISBN&#160;1-4302-1053-2.&#160;
^ Peter William O'Hearn; R. D. Tennent (1997). ALGOL-like languages 2. Birkhäuser Verlag. p.&#160;157. ISBN&#160;0-8176-3937-3.&#160;
^ Single-Threading: Back to the Future? Sergey Ignatchenko, Overload #97
^ "Erlang: 3.1 Processes".&#160;
^ "The Problem with Threads", Edward A. Lee, UC Berkeley, January 10, 2006, Technical Report No. UCB/EECS-2006-1
^ "Multithreading in the Solaris(TM) Operating Environment" (PDF). 2002. Archived from the original (PDF) on February 26, 2009.&#160;
^ a b c d Gagne, Abraham Silberschatz, Peter Baer Galvin, Greg (2013). Operating system concepts (9th ed.). Hoboken, N.J.: Wiley. pp.&#160;170–171. ISBN&#160;9781118063330.&#160;
^ CreateFiber, MSDN




David R. Butenhof: Programming with POSIX Threads, Addison-Wesley, ISBN 0-201-63392-2
Bradford Nichols, Dick Buttlar, Jacqueline Proulx Farell: Pthreads Programming, O'Reilly &amp; Associates, ISBN 1-56592-115-1
Charles J. Northrup: Programming with UNIX Threads, John Wiley &amp; Sons, ISBN 0-471-13751-0
Mark Walmsley: Multi-Threaded Programming in C++, Springer, ISBN 1-85233-146-1
Paul Hyde: Java Thread Programming, Sams, ISBN 0-672-31585-8
Bill Lewis: Threads Primer: A Guide to Multithreaded Programming, Prentice Hall, ISBN 0-13-443698-9
Steve Kleiman, Devang Shah, Bart Smaalders: Programming With Threads, SunSoft Press, ISBN 0-13-172389-8
Pat Villani: Advanced WIN32 Programming: Files, Threads, and Process Synchronization, Harpercollins Publishers, ISBN 0-87930-563-0
Jim Beveridge, Robert Wiener: Multithreading Applications in Win32, Addison-Wesley, ISBN 0-201-44234-5
Thuan Q. Pham, Pankaj K. Garg: Multithreaded Programming with Windows NT, Prentice Hall, ISBN 0-13-120643-5
Len Dorfman, Marc J. Neuberger: Effective Multithreading in OS/2, McGraw-Hill Osborne Media, ISBN 0-07-017841-0
Alan Burns, Andy Wellings: Concurrency in ADA, Cambridge University Press, ISBN 0-521-62911-X
Uresh Vahalia: Unix Internals: the New Frontiers, Prentice Hall, ISBN 0-13-101908-2
Alan L. Dennis: .Net Multithreading , Manning Publications Company, ISBN 1-930110-54-5
Tobin Titus, Fabio Claudio Ferracchiati, Srinivasa Sivakumar, Tejaswi Redkar, Sandra Gopikrishna: C# Threading Handbook, Peer Information Inc, ISBN 1-86100-829-5
Tobin Titus, Fabio Claudio Ferracchiati, Srinivasa Sivakumar, Tejaswi Redkar, Sandra Gopikrishna: Visual Basic .Net Threading Handbook, Wrox Press Inc, ISBN 1-86100-713-2


External links[edit]



Wikiversity has learning materials about Processes and Threads at
Operating Systems/Process and Thread




Multithreading in C++
Answers to frequently asked questions for comp.programming.threads
What makes multi-threaded programming hard?
Article "Query by Slice, Parallel Execute, and Join: A Thread Pool Pattern in Java" by Binildas C. A.
Article "The Free Lunch Is Over: A Fundamental Turn Toward Concurrency in Software" by Herb Sutter
Article "The Problem with Threads" by Edward Lee
Concepts of Multithreading
ConTest - A Tool for Testing Multithreaded Java Applications by IBM
Debugging and Optimizing Multithreaded OpenMP Programs
Multithreading at DMOZ
Multithreading in the Solaris Operating Environment
POSIX threads explained by Daniel Robbins
The C10K problem









v
t
e


Parallel computing






General



Cloud computing
High-performance computing
Cluster computing
Distributed computing
Grid computing








Levels



Bit
Instruction
Data
Memory
Task








Multithreading



Temporal multithreading
Simultaneous multithreading

Hyper-threading










Theory



PRAM model
Analysis of parallel algorithms
Amdahl's law
Gustafson's law
Cost efficiency
Karp–Flatt metric
Slowdown
Speedup








Elements



Process
Thread
Fiber
Instruction window








Coordination



Multiprocessing
Memory coherency
Cache coherency
Cache invalidation
Barrier
Synchronization
Application checkpointing








Programming



Models

Implicit parallelism
Explicit parallelism
Concurrency


Flynn's taxonomy

SISD
SIMD
MISD
MIMD

SPMD




Thread
Non-blocking algorithm








Hardware



Multiprocessor

Symmetric
Asymmetric


Memory

UMA
NUMA
COMA
shared
distributed
distributed shared


MPP
Superscalar
Vector processor
Supercomputer
Beowulf cluster








APIs



Ateji PX
POSIX Threads
OpenMP
OpenHMPP
OpenACC
PVM
MPI
UPC
TBB
Boost.Thread
Global Arrays
Charm++
Cilk (Plus)
Coarray Fortran
OpenCL
CUDA
Dryad
C++ AMP
PLINQ
TPL








Problems



Embarrassingly parallel
Software lockout
Scalability
Race condition
Deadlock
Livelock
Starvation
Deterministic algorithm
Parallel slowdown











&#160;Category: parallel computing
 Media related to parallel computing at Wikimedia Commons
















v
t
e


Operating system






General



Advocacy
Comparison
Forensic engineering
History
Hobbyist development
List
Timeline
Usage share








Kernel





Architectures




Exokernel
Hybrid
Microkernel
Monolithic









Components




Device driver
Loadable kernel module
Microkernel
User space











Process management





Concepts




Context switch
Interrupt
IPC
Process
Process control block
Thread
Time-sharing









Scheduling
algorithms




Computer multitasking
Fixed-priority preemptive
Multilevel feedback queue
Preemptive
Round-robin
Shortest job next











Memory management and
resource protection



Bus error
General protection fault
Memory protection
Paging
Protection ring
Segmentation fault
Virtual memory








Storage access and
file systems



Boot loader
Defragmentation
Device file
File attribute
Inode
Journal
Partition
Virtual file system
Virtual tape library








List



AmigaOS
Android
BeOS
BSD
DOS
Hurd
Haiku
illumos
iOS
Linux
Mac OS
MorphOS
OpenVMS
OS/2
OSv
QNX
ReactOS
RISC OS
RSTS/E
Solaris
TPF
Unix
VM/CMS
Windows
z/OS
Visi On
VS/9








Miscellaneous concepts



API
Computer network
HAL
Live CD
Live USB
OS shell

CLI
GUI
TUI
VUI


PXE













Authority control



LCCN: sh97002264
GND: 4377482-9
BNF: cb133204714 (data)















					
						Retrieved from "https://en.wikipedia.org/w/index.php?title=Thread_(computing)&amp;oldid=691606348"					
				Categories: Concurrent computingThreads (computing)Hidden categories: Articles lacking in-text citations from December 2009All articles lacking in-text citationsAll articles with unsourced statementsArticles with unsourced statements from February 2015Articles with DMOZ linksWikipedia articles with LCCN identifiersWikipedia articles with GND identifiersWikipedia articles with BNF identifiers				
							
		
		
			