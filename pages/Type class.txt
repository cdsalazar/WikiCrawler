


		
		
		
			

							
						

			Type class
									
									From Wikipedia, the free encyclopedia
								
												
					Jump to:					navigation, 					search
				
				Not to be confused with class (computer programming).
In computer science, a type class is a type system construct that supports ad hoc polymorphism. This is achieved by adding constraints to type variables in parametrically polymorphic types. Such a constraint typically involves a type class T and a type variable a, and means that a can only be instantiated to a type whose members support the overloaded operations associated with T.
Type classes first appeared in the Haskell programming language,[1] and were originally conceived as a way of implementing overloaded arithmetic and equality operators in a principled fashion.[2][3] In contrast with the "eqtypes" of Standard ML, overloading the equality operator through the use of type classes in Haskell does not require extensive modification of the compiler frontend or the underlying type system.[4]
Since their creation, many other applications of type classes have been discovered.



Contents


1 Overview
2 Higher-kinded polymorphism
3 Multi-parameter type classes
4 Functional dependencies
5 Type classes and implicit parameters
6 Other approaches to operator overloading
7 Related notions
8 See also
9 References
10 External links



Overview[edit]
The programmer defines a type class by specifying a set of function or constant names, together with their respective types, that must exist for every type that belongs to the class. In Haskell, types can be parameterized; a type class Eq intended to contain types that admit equality would be declared in the following way:


class Eq a where
  (==) :: a -&gt; a -&gt; Bool
  (/=) :: a -&gt; a -&gt; Bool

This declaration may be read as stating a "type a belongs to type class Eq if there are functions named (==), and (/=), of the appropriate types, defined on it." A programmer could then define a function elem (which determines if an element is in a list) in the following way:


elem :: (Eq a) =&gt; a -&gt; [a] -&gt; Bool
elem y [] = False
elem y (x:xs) = (x == y) || elem y xs

The function elem has the type a -&gt; [a] -&gt; Bool with the context (Eq a), which constrains the types which a can range over to those a which belong to the Eq type class. (Note: Haskell =&gt; can be called a 'class constraint'.)
A programmer can make any type t a member of a given type class C by using an instance declaration that defines implementations of all of C's methods for the particular type t. For instance, if a programmer defines a new data type t, they may then make this new type an instance of Eq by providing an equality function over values of type t in whatever way they see fit. Once they have done this, they may use the function elem on [t], that is, lists of elements of type t.
Note that type classes are different from classes in object-oriented programming languages. In particular, Eq is not a type: there is no such thing as a value of type Eq.
Type classes are closely related to parametric polymorphism. For example, note that the type of elem as specified above would be the parametrically polymorphic type a -&gt; [a] -&gt; Bool were it not for the type class constraint "(Eq a) =&gt;".
Higher-kinded polymorphism[edit]
A type class need not take a type variable of kind , but can take one of any kind. These type classes with higher kinds are sometimes called constructor classes (the constructors referred to are type constructors such as Maybe, rather than data constructors such as Just). An example is the monad class:


 class Monad m where
   (&gt;&gt;=) :: m a -&gt; (a -&gt; m b) -&gt; m b
   return :: a -&gt; m a

The fact that m is applied to a type variable indicates that it has kind * -&gt; *, i.e. it takes a type and returns a type.
Multi-parameter type classes[edit]
Type classes permit multiple type parameters, and so type classes can be seen as relations on types.[5] For example, in the GHC standard library, the class IArray expresses a general immutable array interface. In this class, the type class constraint IArray a e means that a is an array type that contains elements of type e. (This restriction on polymorphism is used to implement unboxed array types, for example.)
Like multimethods[citation needed], multi-parameter type classes support calling different implementations of a method depending on the types of multiple arguments, and indeed return types. They are more efficient than multimethods because they do not involve searching for the method to call on every call at runtime: the method to call is stored in the dictionary of the type class instance, just as with single-parameter type classes.
Haskell code that uses multi-parameter type classes is not portable, as this feature is not part of the Haskell 98 standard. The popular Haskell implementations, GHC and Hugs, support multi-parameter type classes.
Functional dependencies[edit]
In Haskell, type classes have been refined to allow the programmer to declare functional dependencies between type parameters—a concept inspired from relational database theory.[6][7] That is, the programmer can assert that a given assignment of some subset of the type parameters uniquely determines the remaining type parameters. For example, general monads m which carry a state parameter of type s satisfy the type class constraint MonadState s m. In this constraint, there is a functional dependency m -&gt; s. This means that for a given monad, the state type accessible from this interface is uniquely determined. This aids the compiler in type inference, as well as aiding the programmer in type-directed programming.
Simon Peyton-Jones has objected to the introduction of functional dependencies in Haskell on grounds of complexity.[8]
Type classes and implicit parameters[edit]





This section does not cite any references (sources). Please help improve this section by adding citations to reliable sources. Unsourced material may be challenged and removed. (January 2012)


Type classes and implicit parameters are very similar in nature, although not quite the same. A polymorphic function with a type class constraint such as:




sum :: Num a =&gt; [a] -&gt; a



can be intuitively treated as a function that implicitly accepts an instance of Num:




sum_ :: Num_ a -&gt; [a] -&gt; a



The instance Num_ a is essentially a record that contains the instance definition of Num a. (This is in fact how type classes are implemented under the hood by the Glasgow Haskell Compiler.)
However, there is a crucial difference: implicit parameters are more flexible – you can pass different instances of Num Int. In contrast, type classes enforce the so-called coherence property, which requires that there should only be one unique choice of instance for any given type. The coherence property makes type classes somewhat antimodular, which is why orphan instances (instances that are defined in a module that neither contains the class nor the type of interest) are strongly discouraged. On the other hand, coherence adds an additional level of safety to the language, providing the programmer a guarantee that two disjoint parts of the same code will share the same instance.[9]
As an example, an ordered set (of type Set a) requires a total ordering on the elements (of type a) in order to function. This can be evidenced by a constraint Ord a, which defines a comparison operator on the elements. However, there can be numerous ways to impose a total order. Since set algorithms are generally intolerant of changes in the ordering once a set has been constructed, passing an incompatible instance of Ord a to functions that operate on the set may lead to incorrect results (or crashes). Thus, enforcing coherence of Ord a in this particular scenario is crucial.
Instances (or "dictionaries") in Scala type classes are just ordinary values in the language, rather than a completely separate kind of entity.[10][11] While these instances are by default supplied by finding appropriate instances in scope to be used as the implicit actual parameters for explicitly-declared implicit formal parameters, the fact that they are ordinary values means that they can be supplied explicitly, to resolve ambiguity. As a result, Scalar type classes do not satisfy the coherence property and are effectively a syntactic sugar for implicit parameters.
Coq (version 8.2 onwards) also supports type classes by inferring the appropriate instances.[12] Recent versions of Agda 2 also provide a similar feature, called "instance arguments".[13]
Other approaches to operator overloading[edit]
In Standard ML, the mechanism of "equality types" corresponds roughly to Haskell's built-in type class Eq, but all equality operators are derived automatically by the compiler. The programmer's control of the process is limited to designating which type components in a structure are equality types and which type variables in a polymorphic type range over equality types.
SML's and OCaml's modules and functors can play a role similar to that of Haskell's type classes, the principal difference being the role of type inference, which makes type classes suitable for ad hoc polymorphism.[14] The object oriented subset of OCaml is yet another approach which is somewhat comparable to the one of type classes.
Related notions[edit]
An analogous notion for overloaded data (implemented in GHC) is that of type family.[15]
Rust supports traits, which are a limited form of type classes with coherence.
See also[edit]

Polymorphism (computer science) (other kinds of polymorphism)
Haskell programming language (the language in which type classes were first designed)
Operator overloading (one application of type classes)
Monad (functional programming) (Monad is an example of a type class)
Concepts (C++) (a similar idea mooted, but not yet part of the language)
Rust (programming language)

References[edit]


^ "Type classes, first proposed during the design of the Haskell programming language, ..." —John Garrett Morris (2013), "Type Classes and Instance Chains: A Relational Approach"
^ Kaes, Stefan (March 1988). "Parametric overloading in polymorphic programming languages". Proc. 2nd European Symposium on Programming Languages.&#160;
^ Wadler, Philip; Stephen Blott (January 1989). "How to make ad-hoc polymorphism less ad hoc". Proc. 16th ACM Symposium on Principles of Programming Languages.&#160;
^ Appel, Andrew; David MacQueen (June 1991). "Standard ML of New Jersey". Proc. 3rd International Symposium on Programming Language Implementation and Logic Programming.&#160;
^ Haskell' page MultiParamTypeClasses.
^ Mark Jones. Type Classes with Functional Dependencies. From Proc. 9th European Symposium on Programming. March, 2000.
^ Haskell' page FunctionalDependencies.
^ http://www.haskell.org//pipermail/haskell-prime/2006-February/000289.html
^ E. Kmett, Type Classes vs. the World, Boston Haskell Meetup. https://www.youtube.com/watch?v=hIZxTQP1ifo
^ Oliveira, Bruno; Adriaan Moors; Martin Odersky (2010). "Type Classes as Objects and Implicits" (PDF). OOPSLA.&#160;
^ http://danielwestheide.com/blog/2013/02/06/the-neophytes-guide-to-scala-part-12-type-classes.html
^ A Gentle Introduction to Type Classes and Relations in Coq
^ "Modelling Type Classes With Instance Arguments".
^ Dreyer, Derek; Robert Harper; Manuel M.T. Chakravarty (April 2006). "Modular Type Classes".&#160;
^ http://www.haskell.org/haskellwiki/GHC/Type_families




Simon Peyton Jones, Mark Jones, Erik Meijer. Type classes: an exploration of the design space. From Proc. ACM SIGPLAN Haskell Workshop. May, 1997.


External links[edit]

A Gentle Introduction to Haskell, Version 98, chapter 5. Type Classes and Overloading. June 2000.
Advanced Functional Programming course at Utrecht University, 74 lecture slides on Advanced Type Classes. 2005-06-07.
Implementing, and Understanding Type Classes. [1]. 2014-11-13.









v
t
e


Data types






Uninterpreted



Bit
Byte
Trit
Tryte
Word








Numeric



Bignum
Complex
Decimal
Fixed point
Floating point

Double precision
Extended precision
Half precision
Minifloat
Octuple precision
Quadruple precision
Single precision


Integer

signedness


Interval
Rational








Text



Character
String

null-terminated










Pointer



Address

physical
virtual


Reference








Composite



Algebraic data type

generalized


Array
Associative array
Class
Dependent
Equality
Inductive
List
Object

metaobject


Option type
Product
Record
Set
Union

tagged










Other



Boolean
Bottom type
Collection
Enumerated type
Exception
Function type
Opaque data type
Recursive data type
Semaphore
Stream
Top type
Type class
Unit type
Void








Related topics



Abstract data type
Data structure
Generic
Kind

metaclass


Parametric polymorphism
Primitive data type
Protocol

interface


Subtyping
Type constructor
Type conversion
Type system















					
						Retrieved from "https://en.wikipedia.org/w/index.php?title=Type_class&amp;oldid=691648232"					
				Categories: Functional programmingType theoryData typesHidden categories: All articles with unsourced statementsArticles with unsourced statements from June 2013Articles needing additional references from January 2012All articles needing additional referencesArticles with example Haskell code				
							
		
		
			