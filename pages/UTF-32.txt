


		
		
		
			

							
						

			UTF-32
									
									From Wikipedia, the free encyclopedia
								
												
					Jump to:					navigation, 					search
				
				




This article needs additional citations for verification. Please help improve this article by adding citations to reliable sources. Unsourced material may be challenged and removed. (January 2010)


UTF-32 (or UCS-4) stands for Unicode Transformation Format 32 bits. It is a protocol to encode Unicode code points that uses exactly 32 bits per Unicode code point. This makes UTF-32 a fixed-length encoding, in contrast to all other Unicode transformation formats which are variable-length encodings. The UTF-32 form of a code point is a direct representation of that code point's numerical value.[1]
The main advantage of UTF-32, versus variable-length encodings, is that the Unicode code points are directly indexable. Examining the n'th code point is a constant time operation.[2] In contrast, a variable-length code requires sequential access to find the n'th code point. This makes UTF-32 a simple replacement in code that uses integers to index characters out of strings, as was commonly done for ASCII.
The main disadvantage of UTF-32 is that it is space inefficient, using four bytes per code point. Non-BMP characters are so rare in most texts[citation needed], they may as well be considered non-existent for sizing issues, making UTF-32 up to twice the size of UTF-16 and up to four times the size of UTF-8.



Contents


1 History
2 Analysis
3 Use
4 Non-use in HTML5
5 See also
6 References
7 External links



History[edit]
The original ISO 10646 standard defines a 31-bit encoding form called UCS-4, in which each encoded character in the Universal Character Set (UCS) is represented by a 32-bit friendly code value in the code space of integers between 0 and hexadecimal 7FFFFFFF.
Because only 17 planes are actually in use, all current code points are between 0 and 0x10FFFF. UTF-32 is a subset of UCS-4 that uses only this range. Since the Principles and Procedures document of JTC1/SC2/WG2 states that all future assignments of characters will be constrained to the BMP or the first 14 supplementary planes, UTF-32 will be able to represent all Unicode characters. Accordingly, UCS-4 and UTF-32 are now identical except that the UTF-32 standard has additional Unicode semantics.[clarification needed]
Analysis[edit]
Though a fixed number of bytes per code point appear convenient, it is not as useful as it appears. It makes truncation easier but not significantly so compared to UTF-8 and UTF-16 (both of which can search backwards for the point to truncate by looking at 2-4 code units at most).
It is extremely rare that code wishes to find the N'th code point without earlier examining the code points 0 to N-1[citation needed]. This means an integer index that is incremented by 1 for each character can be replaced with an integer offset, measured in code units and incremented by the number of code units as each character is examined. This removes all speed advantages of working with UTF-32. The few instances where N is generated without looking at the earlier code points, such as some hashing and high-speed search algorithms, do not require that N be exact, and thus, like truncation, can be made to work on UTF-8 or UTF-16 by adjusting the position to the nearest code point boundary, a fixed-time operation.
UTF-32 does not make calculating the displayed width of a string easier, since even with a “fixed width” font there may be more than one code point per character position (combining marks) or more than one character position per code point (for example CJK ideographs). Editors that limit themselves to left-to-right languages and precomposed characters can take advantage of fixed-sized code units, but such editors are unlikely to support non-BMP characters and thus can work equally well with 16-bit UTF-16 encoding.
Use[edit]
The main use of UTF-32 is in internal APIs where the data is single code points or glyphs, rather than strings of characters. For instance in modern text rendering it is common that the last step is to build a list of structures each containing x,y position, attributes, and a single UTF-32 character identifying the glyph to draw. Often non-Unicode information is stored in the "unused" 11 bits of each word.
On Unix systems, UTF-32 strings are sometimes used for storage, due to the type wchar_t being defined as 32-bits. Python versions up to 3.2 can be compiled to use them instead of UTF-16; from version 3.3 onward, UTF-16 support is dropped, and a system is used whereby strings are stored in UTF-32 but with leading zero bytes optimized away where unnecessary.[3] Seed7 and Lasso encodes all characters and strings with UTF-32. Use of UTF-32 strings on Windows (where wchar_t is 16 bits) is almost non-existent.
Non-use in HTML5[edit]
HTML5 states that "authors should not use UTF-32, as the encoding detection algorithms described in this specification intentionally do not distinguish it from UTF-16."[4]
See also[edit]

Comparison of Unicode encodings

References[edit]


^ SIL, Mapping code points to Unicode encoding forms, §1: UTF-32
^ http://www.ibm.com/developerworks/xml/library/x-utf8/
^ Löwis, Martin. "PEP 393 -- Flexible String Representation". python.org. Python. Retrieved 26 October 2014.&#160;
^ http://dev.w3.org/html5/spec/semantics.html#charset


External links[edit]

The Unicode Standard 5.0.0, chapter 3 - formally defines UTF-32 in §3.10, D99-D101
Unicode Standard Annex #19 - formally defined UTF-32 for Unicode 3.x (March 2001; last updated March 2002)
Registration of new charsets: UTF-32, UTF-32BE, UTF-32LE - announcement of UTF-32 being added to the IANA charset registry (April 2002)









v
t
e


Unicode






Unicode



Unicode Consortium
ISO/IEC 10646 (Universal Character Set)
Versions








Code points



Blocks
Universal Character Set
Character charts
Character property
Planes
Private Use Areas








Characters





Special purpose




BOM
Combining Grapheme Joiner
Left-to-right mark / Right-to-left mark
Soft hyphen
Word joiner
Zero-width joiner
Zero-width non-joiner
Zero-width space









Lists




Characters
CJK Unified Ideographs
Combining character
Duplicate characters
Numerals
Scripts
Spaces
Symbols
Halfwidth and fullwidth











Processing





Algorithms




Bi-directional text
Collation

ISO 14651


Equivalence









Comparison




BOCU-1
CESU-8
Punycode
SCSU
UTF-1
UTF-7
UTF-8
UTF-9/UTF-18
UTF-16/UCS-2
UTF-32/UCS-4
UTF-EBCDIC











On pairs of
code points



Combining character
Compatibility characters
Duplicate characters
Equivalence
Homoglyph
Precomposed character

list


Z-variant








Usage



Domain names (IDN)
Email
Fonts
HTML

entity references
numeric references


Input








Related standards



Common Locale Data Repository (CLDR)
GB 18030
Han unification
ISO/IEC 8859
ISO 15924








Related topics



Anomalies
ConScript Unicode Registry
Ideographic Rapporteur Group
International Components for Unicode
People involved with Unicode












&#160;
Scripts and symbols in Unicode







Common and
inherited scripts




Combining marks
Diacritics
Punctuation
Space









Modern scripts




Arabic

diacritics


Armenian
Balinese
Bamum
Batak
Bengali
Bopomofo
Braille
Buhid
Burmese
Canadian Aboriginal
Chakma
Cham
Cherokee
CJK Unified Ideographs (Han)
Cyrillic
Deseret
Devanagari
Ge'ez
Georgian
Greek
Gujarati
Gurmukhī
Hangul
Hanja
Hanunó'o
Hebrew

diacritics


Hiragana
Javanese
Kanji
Kannada
Katakana
Kayah Li
Khmer
Khudawadi
Lao
Latin
Lepcha
Limbu
Lisu (Fraser)
Lontara
Malayalam
Mandaic
Meetei Mayek
Mende Kikakui
Miao (Pollard)
Mongolian
Mro
N'Ko
New Tai Lue
Ol Chiki
Oriya
Osmanya
Pahawh Hmong
Pau Cin Hau
Rejang
Samaritan
Śāradā
Saurashtra
Shavian
Sinhala
Sorang Sompeng
Sundanese
Sylheti Nagari
Syriac
Tagalog (Baybayin)
Tagbanwa
Tai Le
Tai Tham
Tai Viet
Takri
Tamil
Telugu
Thaana
Thai
Tibetan
Tifinagh
Tirhuta
Vai
Varang Kshiti
Yi









Ancient and
historic scripts




Ahom
Anatolian hieroglyphs
Ancient North Arabian
Avestan
Bassa Vah
Brāhmī
Carian
Caucasian Albanian
Coptic
Cuneiform
Cypriot
Egyptian hieroglyphs
Elbasan
Glagolitic
Gothic
Grantha
Hatran
Imperial Aramaic
Inscriptional Pahlavi
Inscriptional Parthian
Kaithi
Kharosthi
Khojki
Linear A
Linear B
Lycian
Lydian
Mahajani
Manichaean
Meroitic
Modi
Multani
Nabataean
Ogham
Old Hungarian
Old Italic
Old Permic
Old Persian cuneiform
Old Turkic
Palmyrene
'Phags-pa
Phoenician
Psalter Pahlavi
Runic
Siddham
South Arabian
Ugaritic









Notational scripts




Duployan
SignWriting









Symbols




Cultural, political, and religious symbols
Currency
Mathematical operators and symbols
Phonetic symbols (including IPA)
Emoji



















v
t
e


Character encodings







 Character sets






Early telecommunications



ASCII
ISO/IEC 646
ISO/IEC 6937
T.61
BCD
Baudot code
Morse code (Telegraph code)
Special telegraphy codes: Non-Latin, Chinese, Cyrillic








ISO/IEC 8859



-1
-2
-3
-4
-5
-6
-7
-8
-9
-10
-11
-12
-13
-14
-15
-16








Bibliographic use



ANSEL
ISO 5426 / 5426-2 / 5427 / 5428 / 6438 / 6861 / 6862 / 10585 / 10586 / 10754 / 11822
MARC-8








National standards



ArmSCII
CNS 11643
GOST 10859
GB 18030
HKSCS
ISCII
JIS X 0201
JIS X 0208
JIS X 0212
JIS X 0213
KPS 9566
KS X 1001
PASCII
SI 960
TIS-620
TSCII
VISCII
YUSCII








EUC



CN
JP
KR
TW








ISO/IEC 2022



CN
JP
KR
CCCII








MacOS codepages ("scripts")



Arabic
CentralEurRoman
ChineseSimp / EUC-CN
ChineseTrad / Big5
Croatian
Cyrillic
Devanagari
Dingbats
Farsi
Greek
Gujarati
Gurmukhi
Hebrew
Icelandic
Japanese / ShiftJIS
Korean / EUC-KR
Roman
Romanian
Symbol
Thai / TIS-620
Turkish
Ukrainian








DOS codepages



111
112
113
151
161
162
163
164
165
301
437
667
668
708
709
710
711
720
737
770
771
772
773
774
775
776
777
778
790
806
808
813
819
848
849
850
851
852
853
854
855
856
857
858
859
860
861
862
863
864
865
866
867
868
869
872
874
876
877
878
881
882
883
884
885
891
895
896
897
898
899
900
901
902
903
904
906
907
909
910
911
912
913
914
915
916
919
920
921
922
923
925
926
927
928
932
934
936
938
941
942
943
944
946
947
948
949
950
951
952
953
954
955
956
957
958
959
960
961
962
963
964
965
966
991
1004
1006
1008
1009
1010
1011
1012
1013
1014
1015
1016
1017
1018
1019
1020
1021
1023
1034
1036
1040
1041
1042
1043
1044
1046
1086
1088
1089
1090
1092
1098
1111
1114
1115
1116
1117
1118
1119
1124
1125
1126
1127
1129
1131
1133
1139
1161
1162
1163
1167
1168
1169
1174
1350
1351
1361
1362
1363
1373
Kamenický
Mazovia
MIK
Iran System








Windows codepages



874 / TIS-620
932 / Shift JIS
936 / GBK
949 / EUC-KR
950 / Big5
1250
1251
1252
1253
1254
1255
1256
1257
1258
54936 / GB18030








EBCDIC codepages



1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
29
30
31
32
33
34
35
36
37/1140
38
39
40
251
252
254
256
257
258
259
260
264
273/1141
274
275
276
277/1142
278/1143
280/1144
281
282
283
284/1145
285/1146
286
287
288
289
290
293
297/1147
298
300
320
321
322
330
351
361
363
382
383
384
385
386
387
388
389
390
391
392
393
394
395
410
420/16804
421
423
424/12712
425
435
500/1148
803
829
833
834
835
836
837
838/1160
839
870/1153
871/1149
875/9067
880
881
882
883
884
885
886
887
888
889
890
892
893
905
918
930/1390
931
933/1364
935/1388
937/1371
939/1399
1001
1002
1003
1005
1007
1024
1025/1154
1026/1155
1027
1028
1030
1031
1032
1033
1037
1047/924
1068
1069
1070
1071
1073
1074
1075
1076
1077
1078
1079
1080
1081
1082
1083
1084
1085
1087
1091
1097
1110
1112/1156
1113
1122/1157
1123/1158
1130/1164
1132
1136
1137
1150
1151
1152
1159
1165
1278
1303
1364
JEF
KEIS








Platform specific



ATASCII
CDC display code
DEC-MCS
DEC Radix-50
ELWRO-Junior
Fieldata
GSM 03.38
HP roman8
PETSCII
TI calculator character sets
WISCII
ZX80 character set
ZX Spectrum character set








Unicode / ISO/IEC 10646



UTF-8
UTF-16/UCS-2
UTF-32/UCS-4
UTF-7
UTF-1
UTF-EBCDIC
GB 18030
SCSU
BOCU-1








Miscellaneous codepages



APL
Cork
HZ
KOI8
TRON








Related topics



control character&#160;(C0 C1)
CCSID
Character encodings in HTML
charset detection
Han unification
ISO 6429/IEC 6429/ANSI X3.64
mojibake















					
						Retrieved from "https://en.wikipedia.org/w/index.php?title=UTF-32&amp;oldid=683706112"					
				Categories: Character encodingUnicode Transformation FormatsHidden categories: Articles needing additional references from January 2010All articles needing additional referencesAll articles with unsourced statementsArticles with unsourced statements from July 2015Wikipedia articles needing clarification from February 2010				
							
		
		
			