


		
		
		
			

							
						

			Application binary interface
									
									From Wikipedia, the free encyclopedia
								
												
					Jump to:					navigation, 					search
				
				



A high-level comparison of in-kernel and kernel-to-userspace APIs and ABIs






Linux kernel and GNU C Library define the Linux API. After compilation, the binaries offer an ABI; keeping this ABI stable over a long time is important for ISVs.


In computer software, an application binary interface (ABI) is the interface between two program modules, one of which is often a library or operating system, at the level of machine code. An ABI determines such details as how functions are called and in which binary format information should be passed from one program component to the next, or to the operating system in the case of a system call.
Adhering to ABIs (which may or may not be officially standardized) is usually the job of the compiler, OS or library writer, but application programmers may have to deal with ABIs directly when writing programs in a mix of programming languages, using foreign function call interfaces between them.
ABIs differ from application programming interfaces (APIs), which similarly define interfaces between program components, but at the source code level.



Contents


1 Description
2 EABI
3 See also
4 References
5 External links



Description[edit]
ABIs cover details such as:

the sizes, layout, and alignment of data types
the calling convention, which controls how functions' arguments are passed and return values retrieved; for example, whether all parameters are passed on the stack or some are passed in registers, which registers are used for which function parameters, and whether the first function parameter passed on the stack is pushed first or last onto the stack
how an application should make system calls to the operating system and, if the ABI specifies direct system calls rather than procedure calls to system call stubs, the system call numbers
and in the case of a complete operating system ABI, the binary format of object files, program libraries and so on.

A complete ABI, such as the Intel Binary Compatibility Standard (iBCS),[1] allows a program from one operating system supporting that ABI to run without modifications on any other such system, provided that necessary shared libraries are present, and similar prerequisites are fulfilled.
Other ABIs standardize details such as the C++ name mangling,[2] exception propagation,[3] and calling convention between compilers on the same platform, but do not require cross-platform compatibility.
EABI[edit]
An embedded-application binary interface (EABI) specifies standard conventions for file formats, data types, register usage, stack frame organization, and function parameter passing of an embedded software program.
Compilers that support the EABI create object code that is compatible with code generated by other such compilers, allowing developers to link libraries generated with one compiler with object code generated with another compiler. Developers writing their own assembly language code may also use the EABI to interface with assembly generated by a compliant compiler.
The main differences between an EABI and an ABI for general-purpose operating systems are that privileged instructions are allowed in application code, dynamic linking is not required (sometimes it is completely disallowed), and a more compact stack frame organization is used to save memory.[4] The choice of EABI can affect performance.[5][6]
Widely used EABIs include PowerPC,[7] ARM EABI2[8] and MIPS EABI.[9]
See also[edit]


Binary code compatibility
ABI Compliance Checker
Comparison of application virtual machines
Foreign function interface
Language binding
Opaque pointer
PowerOpen Environment
SWIG
Upstream Tracker
Visual C++ ABI instability details


References[edit]


^ Intel Binary Compatibility Standard (iBCS)
^ Itanium C++ ABI (compatible with multiple architectures)
^ Itanium C++ ABI: Exception Handling (compatible with multiple architectures)
^ "EABI Summary". PowerPC Embedded Application Binary Interface: 32-Bit Implementation (PDF) (Version 1.0 ed.). Freescale Semiconductor, Inc. 1995-10-01. pp.&#160;28–30.&#160;
^ "Debian ARM accelerates via EABI port". Linuxdevices.com. 2007-01-19. Archived from the original on 21 January 2007. Retrieved 2007-10-11.&#160;
^ Andrés Calderón and Nelson Castillo (2007-03-14). "Why ARM's EABI matters". Linuxdevices.com. Archived from the original on 31 March 2007. Retrieved 2007-10-11.&#160;
^ "PowerPC Embedded Processors Application Note"
^ "ARM Information Center". Infocenter.arm.com. Retrieved 2014-02-27.&#160;
^ "Eric Christopher - mips eabi documentation". Cygwin.com. 2003-06-11. Retrieved 2014-02-27.&#160;


External links[edit]

KDE Techbase Policies&#160;–  a compendium of development rules of thumb (with some examples) for not breaking binary compatibility between library releases
Mac OS X ABI Function Call Guide
Debian ARM EABI port
µClib: Motorola 8/16-bit embedded ABI
AMD64 (x86-64) Application Binary Interface
Application Binary Interface (ABI) for the ARM Architecture
MIPS EABI documentation
Sun Studio 10 Compilers and the AMD64 ABI&#160;–  a summary and comparison of some popular ABIs
M•CORE Applications Binary Interface Standards Manual for the Freescale M·CORE processors









v
t
e


Application binary interface






ABI parts and conventions



Alignment
Calling convention
Call stack
Library

static


Machine code
Memory segmentation
Name mangling
Object code
Opaque pointer
Position-independent code
Register allocation
Relocation
System call
Virtual method table








Related topics



Binary code compatibility
Foreign function interface
Language binding
Linker

dynamic


Loader
Year 2038 problem















					
						Retrieved from "https://en.wikipedia.org/w/index.php?title=Application_binary_interface&amp;oldid=688705419"					
				Categories: Application programming interfacesOperating system technology				
							
		
		
			