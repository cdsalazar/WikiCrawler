


		
		
		
			

							
						

			C++17
									
									From Wikipedia, the free encyclopedia
								
												
					Jump to:					navigation, 					search
				
				C++17 (also called C++1z) is the informal name for the future revision of the C++ ISO/IEC standard. The specification for the C++17 revision is speculated to be finished in 2017.
Expected features[edit]
Since the specification for C++17 is just beginning, the following list is just a start. Many features will certainly be added in the next years.[1]

Addition of a default text message for static_assert[2]
Removal of trigraphs[3][4]
Allow typename in a template template parameter[5]
New rules for auto deduction from braced-init-list[6][7]
std::uncaught_exceptions, as a replacement of std::uncaught_exception[8][9]
Nested namespace definition[10][7]
Attributes for namespaces and enumerators[11][9]
UTF-8 character literals[12][9]
Constant evaluation for all non-type template arguments[13][9]
Folding expressions[14][9]
New insertion functions for std::map and std::unordered_map[15][16]
Uniform container access[17][16]
Definition of "Contiguous Iterators"[18][16]
Removal of some deprecated types and functions like std::auto_ptr, std::random_shuffle or old function adaptors[19][7]
Concepts, providing "specification and checking of constraints on template arguments".[20][21]
Unified call syntax.[22][21]
A network library based on boost::asio[citation needed]
A file system library based on boost::filesystem[citation needed]


Stroustrup lists new features that could make it into C++17.[23] Here are some of the possible features that are among Stroustrup’s preferred features:

modules to improve locality and compile time;
contracts to improve specification;
type-safe unions, probably based on functional-programming style pattern matching;
concepts
ranges
uniform call syntax to simplify the specification and use of template libraries;
co-routines, i.e., resumable functions;
SIMD vector to better exploit modern hardware.

See also[edit]

C++
C++11
C++14

References[edit]


^ "Clang C++1z implementation status".&#160;
^ "N3928: Extending static_assert, v2 (Walter E. Brown)" (PDF).&#160;
^ "N3981: Removing trigraphs??! (Richard Smith)". 2014-05-06.&#160;
^ IBM comment on preparing for a Trigraph-adverse future in C++17, IBM paper N4210, 2014-10-10. Authors: Michael Wong, Hubert Tong, Rajan Bhakta, Derek Inglis
^ "N4051: Allow typename in a template template parameter (Richard Smith)".&#160;
^ "N3922: New Rules for auto deduction from braced-init-list (James Dennett)".&#160;
^ a b c "Updates to my trip report".&#160;
^ "N4259: Wording for std::uncaught_exceptions (Herb Sutter)" (PDF).&#160;
^ a b c d e "New core language papers adopted for C++17".&#160;
^ "N4230: Nested namespace definition (Robert Kawulak, Andrew Tomazos)".&#160;
^ "N4266: Attributes for namespaces and enumerators (Richard Smith)".&#160;
^ "N4267: Adding u8 character literals (Richard Smith)".&#160;
^ "N4268: Allow constant evaluation for all non-type template arguments (Richard Smith)".&#160;
^ "N4295: Folding expressions (Andrew Sutton, Richard Smith)".&#160;
^ "N4279: Improved insertion interface for unique-key maps (Thomas Köppe)".&#160;
^ a b c "New standard library papers adopted for C++17".&#160;
^ "N4280: Non-member size() and more (Riccardo Marcangelo)" (PDF).&#160;
^ "N4284: Contiguous Iterators (Jens Maurer)".&#160;
^ "N4190: Removing auto_ptr, random_shuffle(), And Old &lt;functional&gt; Stuff (Stephan T. Lavavej)".&#160;
^ "N4361: Working Draft, C++ extensions for Concepts (Andrew Sutton)" (PDF).&#160;
^ a b "Stroustrup: Thoughts on C++17 - An Interview (Sergio De Simone)".&#160;
^ "Unified Call Syntax: x.f(y) and f(x,y) (Bjarne Stroustrup, Herb Sutter)" (PDF).&#160;
^ http://www.infoq.com/news/2015/04/stroustrup-cpp17-interview










v
t
e


C++









C++
C++98
C++03
C++11
C++14
C++17








C++ features



Classes
Exception handling
Function overloading
new and delete
Operator overloading
Operators
Templates








C++ Standard Library



I/O Streams
Smart pointers
STL
Strings








Compilers



Comparison of C++ compilers
Borland C++
Borland Turbo C++
C++Builder
Clang
GCC
Intel C++ Compiler
Visual C++
Watcom C/C++








IDEs



Comparison of C IDEs
Anjuta
CLion
Code::Blocks
CodeLite
Eclipse
Geany
Microsoft Visual Studio
NetBeans








C++ and other languages



Compatibility of C and C++
Comparison of C++ and Java
Comparison of C++ and ALGOL 68
Comparison of programming languages











 Category











This programming-language-related article is a stub. You can help Wikipedia by expanding it.


v
t
e












					
						Retrieved from "https://en.wikipedia.org/w/index.php?title=C%2B%2B17&amp;oldid=689392591"					
				Categories: C++Programming language standardsProgramming language topic stubsHidden categories: All articles with unsourced statementsArticles with unsourced statements from October 2015Articles with example C++ codeAll stub articles				
							
		
		
			