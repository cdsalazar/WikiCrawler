


		
		
		
			

							
						

			Rule-based system
									
									From Wikipedia, the free encyclopedia
								
												
					Jump to:					navigation, 					search
				
				In computer science, rule-based systems are used as a way to store and manipulate knowledge to interpret information in a useful way. They are often used in artificial intelligence applications and research.



Contents


1 Applications
2 Construction
3 See also
4 References



Applications[edit]
A classic example of a rule-based system is the domain-specific expert system that uses rules to make deductions or choices. For example, an expert system might help a doctor choose the correct diagnosis based on a cluster of symptoms, or select tactical moves to play a game.
Rule-based systems can be used to perform lexical analysis to compile or interpret computer programs, or in natural language processing.
Rule-based programming attempts to derive execution instructions from a starting set of data and rules. This is a more indirect method than that employed by an imperative programming language, which lists execution steps sequentially.
Construction[edit]
A typical rule-based system has four basic components:[1]

A list of rules or rule base, which is a specific type of knowledge base.
An inference engine or semantic reasoner, which infers information or takes action based on the interaction of input and the rule base. The interpreter executes a production system program by performing the following match-resolve-act cycle:[citation needed]




Match: In this first phase, the left-hand sides of all productions are matched against the contents of working memory. As a result a conflict set is obtained, which consists of instantiations of all satisfied productions. An instantiation of a production is an ordered list of working memory elements that satisfies the left-hand side of the production.
Conflict-Resolution: In this second phase, one of the production instantiations in the conflict set is chosen for execution. If no productions are satisfied, the interpreter halts.
Act: In this third phase, the actions of the production selected in the conflict-resolution phase are executed. These actions may change the contents of working memory. At the end of this phase, execution returns to the first phase.




Temporary working memory.
A user interface or other connection to the outside world through which input and output signals are received and sent.

See also[edit]

Rule-based programming
Expert systems
Rewriting
RuleML
TK Solver
List of rule-based languages

References[edit]


^ "What is a rule-based system?". j-paine.org.&#160;



A. Gupta. etc. Parallel algorithms and architectures for rule-based systems









v
t
e


Types of programming languages









Array
Aspect-oriented
Class-based
Concatenative
Concurrent
Data-structured
Dataflow
Declarative
Domain-specific
Dynamic
Esoteric
Event-driven
Extensible
Functional
Imperative
Logic
Macro
Metaprogramming
Multi-paradigm
Object-based
Object-oriented
Pipeline
Procedural
Prototype-based
Reflective
Rule-based
Scripting
Synchronous
Templating











Assembly
Compiled
Interpreted
Machine











Low-level
High-level
Very high-level











First generation
Second generation
Third generation
Fourth generation
Fifth generation











Non-English-based
Off-side rule
Visual















					
						Retrieved from "https://en.wikipedia.org/w/index.php?title=Rule-based_system&amp;oldid=684363384"					
				Categories: Rule enginesArtificial intelligenceHidden categories: All articles with unsourced statementsArticles with unsourced statements from June 2010				
							
		
		
			