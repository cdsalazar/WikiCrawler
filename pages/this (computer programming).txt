


		
		
		
			

							
						

			this (computer programming)
									
									From Wikipedia, the free encyclopedia
								  (Redirected from This (computer science))
												
					Jump to:					navigation, 					search
				
				this, self, and Me are keywords used in some computer programming languages to refer to the object, class, or other entity that the currently running code is part of. The entity referred to by these keywords thus depends on the execution context (such as which object is having its method called). Different programming languages use these keywords in slightly different ways. In languages where a keyword like "this" is mandatory, the keyword is the only way to access data and methods stored in the current object. Where optional, they can disambiguate variables and functions with the same name.



Contents


1 Object-oriented programming
2 Subtleties and difficulties

2.1 Open recursion


3 Implementations

3.1 C++
3.2 Java
3.3 C#
3.4 D
3.5 Dylan
3.6 Eiffel
3.7 JavaScript
3.8 Python
3.9 Self
3.10 Xbase++


4 See also
5 References
6 Further reading
7 External links



Object-oriented programming[edit]
In many object-oriented programming languages, this (also called self or Me) is a variable that is used in instance methods to refer to the object on which they are working. C++ and languages which derive in style from it (such as Java, C#, D, and PHP) generally use this. Smalltalk and others, such as Object Pascal, Perl, Python, Ruby, Objective-C, and Swift, use self. Microsoft's Visual Basic uses Me.
The concept is similar in all languages: this is usually an immutable reference or pointer which refers to the current object; the current object often being the code that acts as 'parent' to the property, method, sub-routine or function that contains the this keyword. After an object is properly constructed, or instantiated, this is always a valid reference. Some languages require it explicitly; others use lexical scoping to use it implicitly to make symbols within their class visible. Or alternatively, the current object referred to by this may be an independent code object that has called the function or method containing the keyword this. Such a thing happens, for example, when a Javascript event handler attached to an HTML tag in a web page calls a function containing the keyword this stored in the global space outside the document object; in that context, this will refer to the page element within the document object, not the enclosing window object.[1]
In some languages, for example C++ and Java, this or self is a keyword, and the variable automatically exists in instance methods. In others, for example Python and Perl 5, the first parameter of an instance method is such a reference. It needs to be specified explicitly. In that case, the parameter need not necessarily be named this or self; it can be named freely by the programmer like any other parameter. However, by informal convention, the first parameter of an instance method in Perl or Python is named self.
Static methods in C++ or Java are not associated with instances but classes, and so cannot use this, because there is no object. In other languages, such as Python, Ruby, Smalltalk, Objective-C, or Swift, the method is associated with a class object that is passed as this, and they are called class methods.
Subtleties and difficulties[edit]
When lexical scoping is used to infer this, the use of this in code, while not illegal, may raise warning bells to a maintenance programmer, although there are still legitimate uses of this in this case, such as referring to instance variables hidden by local variables of the same name, or if the method wants to return a reference to the current object, i.e. this, itself.
In some compilers (for example GCC), pointers to C++ instance methods can be directly cast to a pointer of another type, with an explicit this pointer parameter.[2]
Open recursion[edit]
The dispatch semantics of this, namely that method calls on this are dynamically dispatched, is known as open recursion, and means that these methods can be overridden by derived classes or objects. By contrast, direct named recursion or anonymous recursion of a function uses closed recursion, with early binding. For example, in the following Perl code for the factorial, the token __SUB__ is a reference to the current function:


use feature ":5.16";
sub {
  my $x = shift;
  $x == 0 ? 1 : $x * __SUB__-&gt;( $x - 1 );
}

By contrast, in C++ (using an explicit this for clarity) the this binds to the object itself, but the method is resolved via dynamic dispatch (late binding):


unsigned int factorial(unsigned int n)
  if (n == 0)
    return 1;
  else
    return n * this-&gt;factorial(n - 1);

This example is artificial, since this is direct recursion, so overriding the factorial method would override this function; more natural examples are when a method in a derived class calls the same method in a base class, or in cases of mutual recursion.[3][4]
The fragile base class problem has been blamed on open recursion, with the suggestion that invoking methods on this default to closed recursion (static dispatch, early binding) rather than open recursion (dynamic dispatch, late binding), only using open recursion when it is specifically requested; external calls (not using this) would be dynamically dispatched as usual.[5][6] The way this is solved in practice in the JDK is through a certain programmer discipline; this discipline has been formalized by C. Ruby and G. T. Leavens; it basically consists of the following rules:[7]

No code invokes public methods on this.
Code that can be reused internally (by invocation from other methods of the same class) is encapsulated in a protected or private method; if it needs to be exposed directly to the users as well, then a wrapper public method calls the internal method.
The previous recommendation can be relaxed for pure methods.

Implementations[edit]
C++[edit]
For more details on this topic, see C++ classes.
Early versions of C++ would let the this pointer be changed; by doing so a programmer could change which object a method was working on. This feature was eventually removed, and now this in C++ is an r-value.[8]
Early versions of C++ did not include references and it has been suggested that had they been so in C++ from the beginning, this would have been a reference, not a pointer.[9]
C++ lets objects destroy themselves with the source code statement: delete this.
Java[edit]
For more details on this topic, see Java (programming language).
The keyword this is a Java language keyword that represents the current instance of the class in which it appears. It is used to access class variables and methods.
Since all instance methods are virtual in Java, this can never be null.[10]
C#[edit]
For more details on this topic, see C Sharp (programming language).
The keyword this in C# works the same way as in Java, for reference types. However, within C# value types, this has quite different semantics, being similar to an ordinary mutable variable reference, and can even occur on the left side of an assignment.
One use of this in C# is to allow reference to an outer field variable within a method that contains a local variable that has the same name. In such a situation, for example, the statement var n = localAndFieldname; within the method will assign the type and value of the local variable localAndFieldname to n, whereas the statement var n = this.localAndFieldname; will assign the type and value of the outer field variable to n.[11]
D[edit]
In D this in a class, struct or union method refers to an immutable reference of the instance of the enclosing aggregate. Classes are reference types, structs and unions are value types. In the first version of D, the keyword this is used as a pointer to the instance of the object the method is bound to, while in D2 it has the character of an implicit ref function argument.
Dylan[edit]
In the programming language Dylan, which is an object-oriented language that supports multimethods and doesn't have a concept of this, sending a message to an object is still kept in the syntax. The two forms below work in the same way; the differences are just syntactic sugar.

object.method(param1, param2)

and

method (object, param1, param2)

Eiffel[edit]
Within a class text, the current type is the type obtained from the current class. Within features (routines, commands and queries) of a class, one may use the keyword Current to reference the current class and its features. The use of the keyword Current is optional as the keyword Current is implied by simply referring to the name of the current class feature openly. For example: One might have a feature `foo' in a class MY_CLASS and refer to it by:


 1   class
 2      MY_CLASS
 3   
 4   feature -- Access
 5   
 6      foo: INTEGER
 7   
 8      my_function: INTEGER
 9         do
10           Result := foo
11        end
12  
13  end

[12]
Line #10 (above) has the implied reference to Current by the call to simple `foo'.
Line #10 (below) has the explicit reference to Current by the call to `Current.foo'.


 1   class
 2      MY_CLASS
 3   
 4   feature -- Access
 5   
 6      foo: INTEGER
 7   
 8      my_function: INTEGER
 9         do
10            Result := Current.foo
11        end
12  
13  end

Either approach is acceptable to the compiler, but the implied version (e.g. x&#160;:= foo) is preferred as it is less verbose.
As with other languages, there are times when the use of the keyword Current is mandated, such as:


 1   class
 2      MY_CLASS
 3   
 4   feature -- Access
 5   
 6      my_command
 7            -- Create MY_OTHER_CLASS with `Current'
 8         local
 9            x: MY_OTHER_CLASS
10        do
11           create x.make_with_something (Current)
12        end
13  
14  end

In the case of the code above, the call on line #11 to make_with_something is passing the current class by explicitly passing the keyword Current.
JavaScript[edit]
For more details on this topic, see JavaScript.
In JavaScript, which is a programming or scripting language used extensively in web browsers, this is an important keyword, although what it evaluates to depends on where it is used.

When used outside any function, in global space, this refers to the enclosing object, which in this case is the enclosing browser window, the window object.
When used in a function defined in the global space, what the keyword this refers to depends on how the function is called. When such a function is called directly (e.g. f(x)), this will refer back to the global space in which the function is defined, and in which other global functions and variables may exist as well (or in strict mode, it is undefined). If a global function containing this is called as part of the event handler of an element in the document object, however, this will refer to the calling HTML element.
When a function is attached as a property of an object and called as a method of that object (e.g. obj.f(x)), this will refer to the object that the function is contained within.[13][14] It is even possible to manually specify this when calling a function, by using the .call() or .apply() methods of the function object.[15] For example, the method call obj.f(x) could also be written as obj.f.call(obj, x).

To work around the different meaning of this in nested functions such as DOM event handlers, it is a common idiom in JavaScript to save the this reference of the calling object in a variable (commonly called that or self), and then use the variable to refer to the calling object in nested functions.
For example:


// In this example $ is a reference to the jQuery library 
$(".element").hover(function() {
    // Here, both this and that point to the element under the mouse cursor.
    var that = this;
    
    $(this).find('.elements').each(function(){
        // Here, this points to the DOM element being iterated.
        // However, that still points to the element under the mouse cursor.
        $(this).addClass("highlight");
    });
});

Python[edit]
In Python, there is no keyword for this. When a member function is called on an object, it invokes the member function with the same name on the object's class object, with the object automatically bound to the first argument of the function. Thus, the obligatory first parameter of instance methods serves as this; this parameter is conventionally named self, but can be named anything.
In class methods (created with the classmethod decorator), the first argument refers to the class object itself, and is conventionally called cls; these are primarily used for inheritable constructors,[16] where the use of the class as a parameter allows subclassing the constructor. In static methods (created with the staticmethod decorator), no special first argument exists.
Self[edit]
The Self language is named after this use of "self".
Xbase++[edit]
Self is strictly used within methods of a class. Another way to refer to Self is to use ::.
See also[edit]

Anonymous recursion
Self-reference
Inheritance (object-oriented programming)

References[edit]


^ Powell, Thomas A, and Schneider, Fritz, 2012. Javascript: The Complete Reference, Third Edition. McGraw-Hill. Chapter 11, Event Handling, p 428. ISBN 978-0-07-174120-0
^ Using the GNU Compiler Collection (GCC) – Bound member functions
^ "Closed and Open Recursion", Ralf Hinze, July 2007
^ Open Recursion, Lambda the Ultimate
^ "Selective Open Recursion: A Solution to the Fragile Base Class Problem", Jonathan Aldrich
^ "Selective Open Recursion: A Solution to the Fragile Base Class Problem", Lambda the Ultimate
^ Aldrich, Jonathan, and Kevin Donnelly. "Selective open recursion: Modular reasoning about components and inheritance." SAVCBS 2004 Specification and Verification of Component-Based Systems (2004): 26. citing for the JDK-adopted solution C. Ruby and G. T. Leavens. "Safely Creating Correct Subclasses without Seeing Superclass Code". In Object-Oriented Programming Systems, Languages, and Applications, October 2000. doi:10.1145/353171.353186 also available as technical report TR #00-05d
^ ISO/IEC 14882:2003(E): Programming Languages - C++. ISO/IEC. 2003.&#160;
^ Stroustrup: C++ Style and Technique FAQ
^ Barnes, D. and Kölling, M. Objects First with Java. "...the reason for using this construct [this] is that we have a situation that is known as name overloading - the same name being used for two different entities... It is important to understand that the fields and the parameters are separate variables that exist independently of each other, even though they share similar names. A parameter and a field sharing a name is not really a problem in Java."[citation needed]
^ De Smet, Bart, 2011. C# 4.0 Unleashed. Sams Publishing, Indianapolis, USA. Chapter 4, Language Essentials, p 210. ISBN 978-0-672-33079-7
^ NOTE: The line numbers are for reference purposes only. Eiffel does not have line numbers in the class text. However, there is a line number option in the Eiffel Studio IDE, which can be optionally turned on for reference purposes (e.g. pair programming, etc).
^ Crockford, Douglas, 2008. JavaScript: The Good Parts. O'Reilly Media Inc. and Yahoo! Inc. Chapter 4, Functions, p 28. ISBN 978-0-596-51774-8
^ Powell, Thomas A, and Schneider, Fritz, 2012. Javascript: The Complete Reference, Third Edition. McGraw-Hill. Chapter 5, Functions, pp 170–1. ISBN 978-0-07-174120-0
^ Goodman, Danny, with Morrison, Michael, 2004. Javascript Bible, 5th Edition. Wiley Publishing, Inc., Indianapolis, USA. Chapter 33, Functions and Custom Objects, p 987. ISBN 0-7645-5743-2
^ Unifying types and classes in Python 2.2, Guido van Rossum, "Overriding the __new__ method"


Further reading[edit]

Meyers, Scott, 1995. More Effective C++: 35 New Ways to Improve Your Programs and Designs. ISBN 0-201-63371-X Scott Meyers
Stroustrup, Bjarne, 1994. The Design and Evolution of C++. Addison-Wesley Pub. Co. ISBN 0-201-54330-3 Bjarne Stroustrup

External links[edit]

Java this
*this in C++
Java This Keyword








					
						Retrieved from "https://en.wikipedia.org/w/index.php?title=This_(computer_programming)&amp;oldid=684411488"					
				Categories: Object-oriented programmingHidden categories: All articles with unsourced statementsArticles with unsourced statements from February 2013				
							
		
		
			