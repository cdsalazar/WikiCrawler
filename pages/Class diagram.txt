


		
		
		
			

							
						

			Class diagram
									
									From Wikipedia, the free encyclopedia
								
												
					Jump to:					navigation, 					search
				
				




This article needs additional citations for verification. Please help improve this article by adding citations to reliable sources. Unsourced material may be challenged and removed. (February 2009)






Hierarchy of UML 2.0 Diagrams, shown as a class diagram. The individual classes are represented just with one compartment, but they often contain up to three compartments.




UML diagrams


Structural UML diagrams




Class diagram
Component diagram
Composite structure diagram
Deployment diagram
Object diagram
Package diagram
Profile diagram




Behavioral UML diagrams




Activity diagram
Communication diagram
Interaction overview diagram
Sequence diagram
State diagram
Timing diagram
Use case diagram







v
t
e





In software engineering, a class diagram in the Unified Modeling Language (UML) is a type of static structure diagram that describes the structure of a system by showing the system's classes, their attributes, operations (or methods), and the relationships among objects.



Contents


1 Introduction
2 Members

2.1 Visibility
2.2 Scopes


3 Relationships

3.1 Instance level relationships

3.1.1 Dependency
3.1.2 Association
3.1.3 Aggregation
3.1.4 Composition
3.1.5 Differences between composition and aggregation


3.2 Class level relationships

3.2.1 Generalization
3.2.2 Realization


3.3 General relationship

3.3.1 Dependency


3.4 Multiplicity


4 Analysis stereotypes

4.1 Entities


5 See also
6 References
7 External links



Introduction[edit]
The class diagram is the main building block of object oriented modelling. It is used both for general conceptual modelling of the systematics of the application, and for detailed modelling translating the models into programming code. Class diagrams can also be used for data modeling.[1] The classes in a class diagram represent both the main objects, interactions in the application and the classes to be programmed.




A class with three sections.


In the diagram, classes are represented with boxes which contain three parts:

The top part contains the name of the class. It is printed in bold and centered, and the first letter is capitalized.
The middle part contains the attributes of the class. They are left-aligned and the first letter is lowercase.
The bottom part contains the methods the class can execute. They are also left-aligned and the first letter is lowercase.

In the design of a system, a number of classes are identified and grouped together in a class diagram which helps to determine the static relations between those objects. With detailed modelling, the classes of the conceptual design are often split into a number of subclasses.
In order to further describe the behaviour of systems, these class diagrams can be complemented by a state diagram or UML state machine.[2]
Members[edit]
UML provides mechanisms to represent class members, such as attributes and methods, and additional information about them.
Visibility[edit]
To specify the visibility of a class member (i.e., any attribute or method), these notations must be placed before the member's name:[3]


+
Public


-
Private


#
Protected


/
Derived (can be combined with one of the others)


~
Package


Scopes[edit]
The UML specifies two types of scope for members: instance and classifier and these last are represented by underlined names.[4]

Classifier members are commonly recognized as “static” in many programming languages. The scope is the class itself.

Attribute values are equal for all instances
Method invocation does not affect the instance’s state


Instance members are scoped to a specific instance.

Attribute values may vary between instances
Method invocation may affect the instance’s state (i.e., change instance’s attributes)



To indicate a classifier scope for a member, its name must be underlined. Otherwise, instance scope is assumed by default.
Relationships[edit]
A relationship is a general term covering the specific types of logical connections found on class and object diagrams. UML shows the following relationships:
Instance level relationships[edit]
Dependency[edit]
A dependency is the basic relationship among objects.
Association[edit]




Class diagram example of association between two classes


An association represents a family of links. A binary association (with two ends) is normally represented as a line. An association can link any number of classes. An association with three links is called a ternary association. An association can be named, and the ends of an association can be adorned with role names, ownership indicators, multiplicity, visibility, and other properties.
There are four different types of association: bi-directional, uni-directional, Aggregation (includes Composition aggregation) and Reflexive. Bi-directional and uni-directional associations are the most common ones.
For instance, a flight class is associated with a plane class bi-directionally. Association represents the static relationship shared among the objects of two classes.
Aggregation[edit]




Class diagram showing Aggregation between two classes


Aggregation is a variant of the "has a" association relationship; aggregation is more specific than association. It is an association that represents a part-whole or part-of relationship. As shown in the image, a Professor 'has a' class to teach. As a type of association, an aggregation can be named and have the same adornments that an association can. However, an aggregation may not involve more than two classes; it must be a binary association. Furthermore, there is hardly a difference between aggregations and associations during implementation, and the diagram may skip aggregation relations altogether.[5]
Aggregation can occur when a class is a collection or container of other classes, but the contained classes do not have a strong lifecycle dependency on the container. The contents of the container are not automatically destroyed when the container is.
In UML, it is graphically represented as a hollow diamond shape on the containing class with a single line that connects it to the contained class. The aggregate is semantically an extended object that is treated as a unit in many operations, although physically it is made of several lesser objects.
Composition[edit]




Class diagram showing Composition between two classes at top and Aggregation between two classes at bottom


Composition is a stronger variant of the "has a" association relationship; composition is more specific than aggregation.
Composition usually has a strong lifecycle dependency between instances of the container class and instances of the contained class(es): if the container is destroyed, normally every instance that it contains is destroyed as well. (Note that, where allowed, a part can be removed from a composite before the composite is deleted, and thus not be deleted as part of the composite.)
The UML graphical representation of a composition relationship is a filled diamond shape on the containing class end of the tree of lines that connect contained class(es) to the containing class.
Differences between composition and aggregation[edit]
Composition relationship&#160;: When attempting to represent real-world whole-part relationships, e.g., an engine is a part of a car.
Aggregation relationship&#160;: When representing a software or database relationship, e.g., car model engine ENG02 is part of a car model CM01, as the engine, ENG01 may be also part of a different car model.
Thus the aggregation relationship is often "catalog" containment to distinguish it from composition's "physical" containment.
Class level relationships[edit]
Generalization[edit]




Class diagram showing generalization between the superclass Person and the two subclasses Student and Professor


It indicates that one of the two related classes (the subclass) is considered to be a specialized form of the other (the super type) and the superclass is considered a 'Generalization' of the subclass. In practice, this means that any instance of the subtype is also an instance of the superclass. An exemplary tree of generalizations of this form is found in biological classification: human beings are a subclass of simian, which are a subclass of mammal, and so on. The relationship is most easily understood by the phrase 'an A is a B' (a human is a mammal, a mammal is an animal).
The UML graphical representation of a Generalization is a hollow triangle shape on the superclass end of the line (or tree of lines) that connects it to one or more subtypes.
The generalization relationship is also known as the inheritance or "is a" relationship.
The superclass (base class) in the generalization relationship is also known as the "parent", superclass, base class, or base type.
The subtype in the specialization relationship is also known as the "child", subclass, derived class, derived type, inheriting class, or inheriting type.
Note that this relationship bears no resemblance to the biological parent/child relationship: the use of these terms is extremely common, but can be misleading.

A is a type of B
E.&#160;g. "an oak is a type of tree", "an automobile is a type of vehicle"

Generalization can only be shown on class diagrams and on use case diagrams.
Realization[edit]
In UML modelling, a realization relationship is a relationship between two model elements, in which one model element (the client) realizes (implements or executes) the behavior that the other model element (the supplier) specifies.
The UML graphical representation of a Realization is a hollow triangle shape on the interface end of the dashed line (or tree of lines) that connects it to one or more implementers. A plain arrow head is used on the interface end of the dashed line that connects it to its users. In component diagrams, the ball-and-socket graphic convention is used (implementors expose a ball or lollipop, while users show a socket).
Realizations can only be shown on class or component diagrams.
A realization is a relationship between classes, interfaces, components, and packages that connects a client element with a supplier element. A realization relationship between classes and interfaces and between components and interfaces shows that the class realizes the operations offered by the interface.
General relationship[edit]




Class diagram showing dependency between "Car" class and "Wheel" class (An even clearer example would be "Car depends on Wheel", because Car already aggregates (and not just uses) Wheel)


Dependency[edit]
Dependency is a weaker form of bond which indicates that one class depends on another because it uses it at some point in time. One class depends on another if the independent class is a parameter variable or local variable of a method of the dependent class. This is different from an association, where an attribute of the dependent class is an instance of the independent class. Sometimes the relationship between two classes is very weak. They are not implemented with member variables at all. Rather they might be implemented as member function arguments.
Multiplicity[edit]
This association relationship indicates that (at least) one of the two related classes make reference to the other. This relationship is usually described as "A has a B" (a mother cat has kittens, kittens have a mother cat).
The UML representation of an association is a line with an optional arrowhead indicating the role of the object(s) in the relationship, and an optional notation at each end indicating the multiplicity of instances of that entity (the number of objects that participate in the association).


0..1
No instances, or one instance


1
Exactly one instance


0..*
Zero or more instances


1..*
One or more instances


Analysis stereotypes[edit]







Entities[edit]
Entity classes model the information handled by the system, and sometimes the behavior associated with the information. They should not be identified as database tables or other data-stores.
They are drawn as circles with a short line attached to the bottom of the circle. Alternatively, they can be drawn as normal classes with the «entity» stereotype notation above the class name.
See also[edit]

Executable UML
List of UML tools
Object-oriented modeling


Related diagrams


Domain model
Entity-relationship model
Object diagram

References[edit]


^ Sparks, Geoffrey. "Database Modelling in UML". Retrieved 8 September 2011.&#160;
^ Scott W. Ambler (2009) UML 2 Class Diagrams. Webdoc 2003-2009. Accessed Dec 2, 2009
^ UML Reference Card, Version 2.1.2, Holub Associates, August 2007, retrieved 12 March 2011&#160;
^ OMG Unified Modeling Language (OMG UML) Superstructure, Version 2.3: May 2010. Retrieved 23 September 2010.
^ UML Tutorial part 1: class diagrams


External links[edit]



Wikimedia Commons has media related to Class diagram.



Introduction to UML 2 Class Diagrams
UML 2 Class Diagram Guidelines
IBM Class diagram Introduction
OMG UML 2.2 specification documents
UML 2 Class Diagrams









v
t
e


Unified Modeling Language






Actors



Organizations

Object Management Group
UML Partners


Persons

Grady Booch
Ivar Jacobson
James Rumbaugh













Concepts




Object oriented



Object-oriented programming
Object-oriented analysis and design
Object-oriented modeling








Structure



Actor
Attribute
Artifact
Class
Component
Interface
Object
Package
Profile diagram








Behavior



Activity
Event
Message
Method
State
Use case








Relationships



Aggregation
Association
Composition
Dependency
Generalization (or Inheritance)








Extensibility



Profile
Stereotype








Other



Multiplicity











Diagrams




Structure



Class
Component
Composite structure
Deployment
Object
Package








Behaviour



Activity
State Machine
Use case








Interaction



Communications
Sequence
Interaction overview
Timing











Derived languages



Systems Modeling Language (SysML)
UML eXchange Format (UXF)
XML Metadata Interchange (XMI)
Executable UML (xUML)








Other topics



Glossary of UML terms
Rational Unified Process
Comparison of UML tools
UML colors















					
						Retrieved from "https://en.wikipedia.org/w/index.php?title=Class_diagram&amp;oldid=691408634"					
				Categories: Unified Modeling Language diagramsHidden categories: Articles needing additional references from February 2009All articles needing additional references				
							
		
		
			