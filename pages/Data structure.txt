


		
		
		
			

							
						

			Data structure
									
									From Wikipedia, the free encyclopedia
								  (Redirected from Data structures)
												
					Jump to:					navigation, 					search
				
				



A hash table.


In computer science, a data structure is a particular way of organizing data in a computer so that it can be used efficiently.[1][2] Data structures can implement one or more particular abstract data types (ADT), which are the means of specifying the contract of operations and their complexity. In comparison, a data structure is a concrete implementation of the contract provided by an ADT.

Different kinds of data structures are suited to different kinds of applications, and some are highly specialized to specific tasks. For example, databases use B-tree indexes for small percentages of data retrieval, and compilers and databases use dynamic hash tables as look-up tables.
Data structures provide a means to manage large amounts of data efficiently for uses such as large databases and internet indexing services. Usually, efficient data structures are key to designing efficient algorithms. Some formal design methods and programming languages emphasize data structures, rather than algorithms, as the key organizing factor in software design. Storing and retrieving can be carried out on data stored in both main memory and in secondary memory.



Contents


1 Overview
2 Examples
3 Language support
4 See also
5 References
6 Further reading
7 External links



Overview[edit]
Data structures are generally based on the ability of a computer to fetch and store data at any place in its memory, specified by a pointer—a bit string, representing a memory address, that can be itself stored in memory and manipulated by the program. Thus, the array and record data structures are based on computing the addresses of data items with arithmetic operations; while the linked data structures are based on storing addresses of data items within the structure itself. Many data structures use both principles, sometimes combined in non-trivial ways (as in XOR linking).
The implementation of a data structure usually requires writing a set of procedures that create and manipulate instances of that structure. The efficiency of a data structure cannot be analyzed separately from those operations. This observation motivates the theoretical concept of an abstract data type, a data structure that is defined indirectly by the operations that may be performed on it, and the mathematical properties of those operations (including their space and time cost).
Examples[edit]
Main article: List of data structures
There are numerous types of data structures, generally built upon simpler primitive data types:

An array (also called list) is a number of elements in a specific order, typically all of the same type. Elements are accessed using an integer index to specify which element is required (although the elements may be of almost any type). Typical implementations allocate contiguous memory words for the elements of arrays (but this is not always a necessity). Arrays may be fixed-length or resizable.
An associative array (also called dictionary or map) is a more flexible variation on an array, in which name-value pairs can be added and deleted freely. A hash table is a common implementation of an associative array.
A record (also called tuple or struct) is an aggregate data structure. A record is a value that contains other values, typically in fixed number and sequence and typically indexed by names. The elements of records are usually called fields or members.
A union is a data structure that specifies which of a number of permitted primitive types may be stored in its instances, e.g. float or long integer. Contrast with a record, which could be defined to contain a float and an integer; whereas in a union, there is only one value at a time. Enough space is allocated to contain the widest member datatype.
A tagged union (also called variant, variant record, discriminated union, or disjoint union) contains an additional field indicating its current type, for enhanced type safety.
A set is an abstract data structure that can store specific values, in no particular order and with no duplicate values.
A graph and a tree are linked abstract data structures composed of nodes. Each node contains a value and one or more pointers to other nodes arranged in a hierarchy. Graphs can be used to represent networks, while variants of trees can be used for sorting and searching, having their nodes arranged in some relative order based on their values.
A class is a data structure that contains data fields, like a record, as well as various methods which operate on the contents of the record. In the context of object-oriented programming, records are known as plain old data structures to distinguish them from classes.

Language support[edit]
Most assembly languages and some low-level languages, such as BCPL (Basic Combined Programming Language), lack built-in support for data structures. On the other hand, many high-level programming languages and some higher-level assembly languages, such as MASM, have special syntax or other built-in support for certain data structures, such as records and arrays. For example, the C and Pascal languages support structs and records, respectively, in addition to vectors (one-dimensional arrays) and multi-dimensional arrays.[3][4]
Most programming languages feature some sort of library mechanism that allows data structure implementations to be reused by different programs. Modern languages usually come with standard libraries that implement the most common data structures. Examples are the C++ Standard Template Library, the Java Collections Framework, and Microsoft's .NET Framework.
Modern languages also generally support modular programming, the separation between the interface of a library module and its implementation. Some provide opaque data types that allow clients to hide implementation details. Object-oriented programming languages, such as C++, Java and Smalltalk may use classes for this purpose.
Many known data structures have concurrent versions that allow multiple computing threads to access the data structure simultaneously.
See also[edit]





Book: Data structures






Abstract data type
Concurrent data structure
Data model
Dynamization
Linked data structure
List of data structures
Persistent data structure
Plain old data structure


References[edit]


^ Paul E. Black (ed.), entry for data structure in Dictionary of Algorithms and Data Structures. U.S. National Institute of Standards and Technology. 15 December 2004. Online version Accessed May 21, 2009.
^ Entry data structure in the Encyclopædia Britannica (2009) Online entry accessed on May 21, 2009.
^ "The GNU C Manual". Free Software Foundation. Retrieved 15 October 2014.&#160;
^ "Free Pascal: Reference Guide". Free Pascal. Retrieved 15 October 2014.&#160;


Further reading[edit]

Peter Brass, Advanced Data Structures, Cambridge University Press, 2008.
Donald Knuth, The Art of Computer Programming, vol. 1. Addison-Wesley, 3rd edition, 1997.
Dinesh Mehta and Sartaj Sahni Handbook of Data Structures and Applications, Chapman and Hall/CRC Press, 2007.
Niklaus Wirth, Algorithms and Data Structures, Prentice Hall, 1985.

External links[edit]



Find more about
Data structure
at Wikipedia's sister projects




Definitions from Wiktionary



Media from Commons



Quotations from Wikiquote



Source texts from Wikisource



Textbooks from Wikibooks



Learning resources from Wikiversity



course on data structures
Data structures Programs Examples in c,java
UC Berkeley video course on data structures
Descriptions from the Dictionary of Algorithms and Data Structures
Data structures course
An Examination of Data Structures from .NET perspective
Schaffer, C. Data Structures and Algorithm Analysis









v
t
e


Data structures






Types



Collection
Container








Abstract



Associative array

Multimap


List
Stack
Queue

Double-ended queue


Priority queue

Double-ended priority queue


Set

Multiset
Disjoint-set










Arrays



Bit array
Circular buffer
Dynamic array
Hash table
Hashed array tree
Sparse array








Linked



Association list
Linked list
Skip list
Unrolled linked list
XOR linked list








Trees



B-tree
Binary search tree

AA tree
AVL tree
Red–black tree
Self-balancing tree
Splay tree


Heap

Binary heap
Binomial heap
Fibonacci heap


R-tree

R* tree
R+ tree
Hilbert R-tree


Trie

Hash tree










Graphs



Binary decision diagram
Directed acyclic graph
Directed acyclic word graph











List of data structures
















v
t
e


Data types






Uninterpreted



Bit
Byte
Trit
Tryte
Word








Numeric



Bignum
Complex
Decimal
Fixed point
Floating point

Double precision
Extended precision
Half precision
Minifloat
Octuple precision
Quadruple precision
Single precision


Integer

signedness


Interval
Rational








Text



Character
String

null-terminated










Pointer



Address

physical
virtual


Reference








Composite



Algebraic data type

generalized


Array
Associative array
Class
Dependent
Equality
Inductive
List
Object

metaobject


Option type
Product
Record
Set
Union

tagged










Other



Boolean
Bottom type
Collection
Enumerated type
Exception
Function type
Opaque data type
Recursive data type
Semaphore
Stream
Top type
Type class
Unit type
Void








Related topics



Abstract data type
Data structure
Generic
Kind

metaclass


Parametric polymorphism
Primitive data type
Protocol

interface


Subtyping
Type constructor
Type conversion
Type system
















v
t
e


Data model






Main



Role
History
Architecture
Modeling
Properties
Organization
Structure
Theory
Patterns








Schemas



Conceptual
Logical
Physical








Types



Database
Data structure diagram (DSD)
Entity-relationship (ERM) (and Enhanced notation - EERM)
Geographic
Generic
Semantic








Related models



Data flow diagram (DFD)
Information model
Object model
Object-role model (ORM)
Unified Modeling Language models (UML)








See also



Database design
Business process model
Core architecture data model
Enterprise model
Function model
Process model
XML schema
Data Format Description Language (DFDL)













Authority control



GND: 4011146-5
NDL: 01167757















					
						Retrieved from "https://en.wikipedia.org/w/index.php?title=Data_structure&amp;oldid=692543529"					
				Categories: Data structuresHidden categories: Wikipedia articles with GND identifiers				
							
		
		
			