


		
		
		
			

							
						

			Capability-based security
									
									From Wikipedia, the free encyclopedia
								
												
					Jump to:					navigation, 					search
				
				




It has been suggested that this article be merged with Object-capability model. (Discuss) Proposed since May 2014.







This article may require cleanup to meet Wikipedia's quality standards. The specific problem is: very abstractly worded, using same word to describe itself, confusing. Please help improve this article if you can. (April 2014)


Capability-based security is a concept in the design of secure computing systems, one of the existing security models. A capability (known in some systems as a key) is a communicable, unforgeable token of authority. It refers to a value that references an object along with an associated set of access rights. A user program on a capability-based operating system must use a capability to access an object. Capability-based security refers to the principle of designing user programs such that they directly share capabilities with each other according to the principle of least privilege, and to the operating system infrastructure necessary to make such transactions efficient and secure. Capability-based security is to be contrasted with an approach that uses hierarchical protection domains.
Although most operating systems implement a facility which resembles capabilities, they typically do not provide enough support to allow for the exchange of capabilities among possibly mutually untrusting entities to be the primary means of granting and distributing access rights throughout the system. A capability-based system, in contrast, is designed with that goal in mind.
Capabilities as discussed in this article should not be confused with POSIX 1e/2c "Capabilities". The latter are coarse-grained privileges that cannot be transferred between processes.



Contents


1 Capabilities and capability-based security
2 Introduction to capability-based security
3 Sharing of capabilities between processes
4 POSIX vs. Capsicum capabilities
5 Research and commercial systems
6 See also
7 References
8 External links



Capabilities and capability-based security[edit]
Capabilities achieve their objective of improving system security by being used in place of forgeable references. A forgeable reference (for example, a path name) identifies an object, but does not specify which access rights are appropriate for that object and the user program which holds that reference. Consequently, any attempt to access the referenced object must be validated by the operating system, typically via the use of an access control list (ACL). Instead, in a system with capabilities, the mere fact that a user program possesses that capability entitles it to use the referenced object in accordance with the rights that are specified by that capability. In theory, a system with capabilities removes the need for any access control list or similar mechanism by giving all entities all and only the capabilities they will actually need.
A capability is typically implemented as a privileged data structure that consists of a section that specifies access rights, and a section that uniquely identifies the object to be accessed. In practice, it is used much like a file descriptor in a traditional operating system, but to access every object on the system. Capabilities are typically stored by the operating system in a list, with some mechanism in place to prevent the program from directly modifying the contents of the capability (so as to forge access rights or change the object it points to). Some systems have also been based on capability-based addressing (hardware support for capabilities), such as Plessey System 250.
Programs possessing capabilities can perform functions on them, such as passing them on to other programs, converting them to a less-privileged version, or deleting them. The operating system must ensure that only specific operations can occur to the capabilities in the system, in order to maintain the integrity of the security policy.
Introduction to capability-based security[edit]
A capability is defined to be a protected object reference which, by virtue of its possession by a user process, grants that process the capability (hence the name) to interact with an object in certain ways. Those ways might include reading data associated with an object, modifying the object, executing the data in the object as a process, and other conceivable access rights. The capability logically consists of a reference that uniquely identifies a particular object and a set of one or more of these rights.
Suppose that, in a user process's memory space, there exists the following string:

/etc/passwd

Although this identifies a unique object on the system, it does not specify access rights and hence is not a capability. Suppose there is instead the following two values:

/etc/passwd
O_RDWR

This identifies an object along with a set of access rights. It, however, is still not a capability because the user process's possession of these values says nothing about whether that access would actually be legitimate.
Now suppose that the user program successfully executes the following statement:


int fd = open("/etc/passwd", O_RDWR);

The variable fd now contains the index of a file descriptor in the process's file descriptor table. This file descriptor is a capability. Its existence in the process's file descriptor table is sufficient to know that the process does indeed have legitimate access to the object. A key feature of this arrangement is that the file descriptor table is in kernel memory and cannot be directly manipulated by the user program.
Sharing of capabilities between processes[edit]
In traditional operating systems, programs often communicate with each other and with storage using references like those in the first two examples. Path names are often passed as command-line parameters, sent via sockets, and stored on disk. These references are not capabilities, and must be validated before they can be used. In these systems, a central question is "on whose authority is a given reference to be evaluated?" This becomes a critical issue especially for processes which must act on behalf of two different authority-bearing entities. They become susceptible to a programming error known as the confused deputy problem, very frequently resulting in a security hole.
In a capability-based system, the capabilities themselves are passed between processes and storage using a mechanism that is known by the operating system to maintain the integrity of those capabilities.
One novel approach to solving this problem involves the use of an orthogonally persistent operating system. (This was realised in the Flex machine. See Ten15). In such a system, there is no need for entities to be discarded and their capabilities be invalidated, and hence require an ACL-like mechanism to restore those capabilities at a later time. The operating system maintains the integrity and security of the capabilities contained within all storage, both volatile and nonvolatile, at all times; in part by performing all serialization tasks by itself, rather than requiring user programs to do so, as is the case in most operating systems. Because user programs are relieved of this responsibility, there is no need to trust them to reproduce only legal capabilities, nor to validate requests for access using an access control mechanism.
POSIX vs. Capsicum capabilities[edit]
POSIX draft 1003.1e specifies a concept of permissions called "capabilities". However, POSIX capabilities differ from capabilities in this article—POSIX capability is not associated with any object; a process having CAP_NET_BIND_SERVICE capability can listen on any TCP port under 1024. In contrast, Capsicum capabilities on FreeBSD and Linux hybridize a true capability-system model with the UNIX design and POSIX API. Capsicum capabilities are a refined form of file descriptor, a delegable right between processes and additional object types beyond classic POSIX, such as processes, can be referenced via capabilities. In Capsicum capability mode, processes are unable to utilize global name spaces (such as the filesystem name space) to look up objects, and must instead inherit or be delegated them.
Research and commercial systems[edit]

Tahoe-LAFS - Open source capability-based filesystem
GNOSIS

KeyKOS

EROS - The Extremely Reliable Operating System - KeyKOS successor

CapROS - EROS successor, project to further develop EROS code base for commercial use
Coyotos - EROS successor, for research






Cambridge CAP computer
Carnegie Mellon University C.mmp with Hydra (operating system)
Carnegie Mellon University CM* with StarOS
IBM System/38 and AS/400
Intel iAPX 432
Plessey System 250
Flex
L4 microkernel - Open Kernel Labs - OKL4 and NICTA - seL4, TU-Dresden - Fiasco.OC
Amoeba distributed operating system

See also[edit]

Access Control List
Capability-based addressing

References[edit]

Levy, Henry M., *Capability-Based Computer Systems, Digital Equipment Corporation 1984. ISBN 0-932376-22-3. An electronic version is available here.
The EROS Project
E, a programming language based around capability security (ERights.org)
Mark S. Miller, Ka-Ping Yee, Jonathan Shapiro. Capability Myths Demolished, Technical Report SRL2003-02, Systems Research Laboratory, Johns Hopkins University. Available online.
The Cambridge CAP Computer, Levy, 1988

not currently used:

Capability-based addressing: Theodore A. Linden (December 1976). "Operating System Structures to Support Security and Reliable Software". ACM Computing Surveys 8 (4): 409–445. doi:10.1145/356678.356682. ISSN 0360-0300.&#160;
Li Gong, A Secure Identity-Based Capability System, sp, p.&#160;56, 1989 IEEE Symposium on Security and Privacy, 1989
Capability-based addressing
A hardware implementation of capability-based addressing
An implementation of capabilities on the PDP-11/45
IBM System/38 support for capability-based addressing
EROS: a fast capability system

POSIX "capabilities" in Linux:

POSIX Capabilities &amp; Files
POSIX file capabilities: Parceling the power of root
Making Root Unprivileged
Security issues and new risks linked to POSIX file capabilities

External links[edit]

"What is a Capability?"
Reviews of 'Capability Myths Demolished'
Capability Theory by Sound Bytes









v
t
e


Object-capability security






OS kernels



NLTSS
KeyKOS
EROS
CapROS
Coyotos








Programming languages



Joule
E
Joe-E
Cajita
BitC








Filesystems



Tahoe-LAFS








Specialised hardware



Plessey System 250
Cambridge CAP








Concepts



Principle of least authority (POLA)
Confused deputy problem
Ambient authority
File descriptor
C-list
Object-capability model
Capability-based security
Capability-based addressing
Zooko's triangle
Petnames















					
						Retrieved from "https://en.wikipedia.org/w/index.php?title=Capability-based_security&amp;oldid=692004197"					
				Categories: Computer security modelsAccess controlHidden categories: Articles to be merged from May 2014All articles to be mergedArticles needing cleanup from April 2014All articles needing cleanupCleanup tagged articles with a reason field from April 2014Wikipedia pages needing cleanup from April 2014				
							
		
		
			