


		
		
		
			

							
						

			Linker (computing)
									
									From Wikipedia, the free encyclopedia
								
												
					Jump to:					navigation, 					search
				
				"ld (Unix)" redirects here. For the GNU Project's implementation, see GNU linker.





This article includes a list of references, but its sources remain unclear because it has insufficient inline citations. Please help to improve this article by introducing more precise citations. (February 2014)






An illustration of the linking process. Object files and static libraries are assembled into a new library or executable


In computer science, a linker or link editor is a computer program that takes one or more object files generated by a compiler and combines them into a single executable file, library file, or another object file.
A simpler version that writes its output directly to memory is called the loader, though loading is typically considered a separate process.[1]



Contents


1 Overview
2 Dynamic linking
3 Static linking
4 Relaxation
5 Linkage editor
6 See also
7 Notes
8 References
9 External links



Overview[edit]
Computer programs typically comprise several parts or modules; these parts/modules need not all be contained within a single object file, and in such case refer to each other by means of symbols. Typically, an object file can contain three kinds of symbols:

defined "external" symbols, which allow it to be called by other modules,
undefined "external" symbols, which reference other modules where these symbols are defined, and
local symbols, used internally within the object file to facilitate relocation.

For most compilers, each object file is the result of compiling one input source code file. When a program comprises multiple object files, the linker combines these files into a unified executable program, resolving the symbols as it goes along.
Linkers can take objects from a collection called a library. Some linkers do not include the whole library in the output; they only include its symbols that are referenced from other object files or libraries. Libraries exist for diverse purposes, and one or more system libraries are usually linked in by default.
The linker also takes care of arranging the objects in a program's address space. This may involve relocating code that assumes a specific base address to another base. Since a compiler seldom knows where an object will reside, it often assumes a fixed base location (for example, zero). Relocating machine code may involve re-targeting of absolute jumps, loads and stores.
The executable output by the linker may need another relocation pass when it is finally loaded into memory (just before execution). This pass is usually omitted on hardware offering virtual memory: every program is put into its own address space, so there is no conflict even if all programs load at the same base address. This pass may also be omitted if the executable is a position independent executable.
On some Unix variants, such as SINTRAN&#160;III, the process performed by a linker (assembling object files into a program) was called loading (as in loading executable code onto a file).[2] Additionally, in some operating systems the same program handles both the jobs of linking and loading a program (dynamic linking).
Dynamic linking[edit]
See also: Dynamic linker
Many operating system environments allow dynamic linking, that is the postponing of the resolving of some undefined symbols until a program is run. That means that the executable code still contains undefined symbols, plus a list of objects or libraries that will provide definitions for these. Loading the program will load these objects/libraries as well, and perform a final linking. Dynamic linking needs no linker.
This approach offers two advantages:

Often-used libraries (for example the standard system libraries) need to be stored in only one location, not duplicated in every single binary.
If a bug in a library function is corrected by replacing the library, all programs using it dynamically will benefit from the correction after restarting them. Programs that included this function by static linking would have to be re-linked first.

There are also disadvantages:

Known on the Windows platform as "DLL Hell", an incompatible updated library will break executables that depended on the behavior of the previous version of the library.
A program, together with the libraries it uses, might be certified (e.g. as to correctness, documentation requirements, or performance) as a package, but not if components can be replaced. (This also argues against automatic OS updates in critical systems; in both cases, the OS and libraries form part of a qualified environment.)

Static linking[edit]
Static linking is the result of the linker copying all library routines used in the program into the executable image. This may require more disk space and memory than dynamic linking, but is more portable, since it does not require the presence of the library on the system where it is run.
Relaxation[edit]
As the compiler has no information on the layout of objects in the final output, it cannot take advantage of shorter or more efficient instructions that place a requirement on the address of another object. For example, a jump instruction can reference an absolute address or an offset from the current location, and the offset could be expressed with different lengths depending on the distance to the target. By generating the most conservative instruction (usually the largest relative or absolute variant, depending on platform) and adding relaxation hints, it is possible to substitute shorter or more efficient instructions during the final link. This step can be performed only after all input objects have been read and assigned temporary addresses; the linker relaxation pass subsequently reassigns addresses, which may in turn allow more relaxations to occur. In general, the substituted sequences are shorter, which allows this process to always converge on the best solution given a fixed order of objects; if this is not the case, relaxations can conflict, and the linker needs to weigh the advantages of either option.
While instruction relaxation typically occurs at link-time, inner-module relaxation can already take place as part of the optimising process at compile-time. In some cases, relaxation can also occur at load-time as part of the relocation process or combined with dynamic dead-code elimination techniques.
Linkage editor[edit]
In IBM System/360 mainframe environments such as OS/360, including z/OS for the z/Architecture mainframes, this type of program is known as a linkage editor. However, a linkage editor, as the name implies, had the additional capability of allowing the addition, replacement, and/or deletion of individual program sections. Operating systems such as OS/360 have a different format for executable load-modules, in that they contain supplementary data about the component sections of a program, so that an individual program section can be replaced, and other parts of the program updated so that relocatable addresses and other such references can be corrected by the linkage editor, as part of the process.
One advantage of this is that it allows a program to be maintained without having to keep all of the intermediate object files, or without having to re-compile program sections that haven't changed. It also permits program updates to be distributed in the form of small card decks, containing only the object module to be replaced. In such systems, object code is in the form and format of punched-card decks, so that updates can be introduced into a system using that medium. In later releases of OS/360 and in subsequent systems, load-modules contain additional data about versions of components modules, to create a traceable record of updates.
Note: the term "linkage editor" should not be construed as implying that the program operates in a user-interactive mode (like, for example, a text editor). It is strictly intended for batch-mode execution, with the editing commands being supplied by the user on sequentially organized records, such as "unit record" media (a card deck, for example) or DASD media (a disk file, for example), but a tape is also supported, and tapes were often used during the initial installation of the OS.
See also[edit]




Computer programming portal





Compile and go system
DLL Hell
Direct binding
Dynamic binding (computing)
Dynamic dispatch
Dynamic library
Dynamic linker
Dynamic loading
Dynamic-link library
GNU linker
Library (computing)
Loader (computing)
Name decoration
Prebinding
Prelinking
Relocation (computer science)
Relocation table
Static library
gold (linker)
prelink


Notes[edit]


^ IBM Corporation (1972). IBM OS Linkage Editor and Loader (PDF).&#160;
^ BRF-LINKER User Manual. ND-60.196.01. 08/84.


References[edit]


David William Barron, Assemblers and Loaders. 1972, Elsevier.
C. W. Fraser and D. R. Hanson, A Machine Independent Linker. Software-Practice and Experience 12, 4 (April 1982).
IBM Corporation, Operating System 360, Linkage Editor, Program Logic Manual, 1967 [1]
Douglas W. Jones, Assembly Language as Object Code. Software-Practice and Experience 13, 8 (August 1983)
John R. Levine: Linkers and Loaders, Morgan-Kauffman, ISBN 1-55860-496-0. 2000 [2]
Leon Presser, John R. White: Linkers and Loaders. ACM Computing Surveys, Volume 4, Number 3, September 1972, pp.&#160;149â€“167 [3]
Norman Ramsey, Relocating Machine Instructions by Currying. (1996) [4]
David Salomon, Assemblers and Loaders. 1993 [5]


External links[edit]



Look up linker in Wiktionary, the free dictionary.



Ian Lance Taylor's Linkers blog entries
Linkers and Loaders, a Linux Journal article by Sandeep Grover
Another Listing of Where to Get a Complete Collection of Free Tools for Assembly Language Development









v
t
e


Application binary interface






ABI parts and conventions



Alignment
Calling convention
Call stack
Library

static


Machine code
Memory segmentation
Name mangling
Object code
Opaque pointer
Position-independent code
Register allocation
Relocation
System call
Virtual method table








Related topics



Binary code compatibility
Foreign function interface
Language binding
Linker

dynamic


Loader
Year 2038 problem
















v
t
e


Executable and object file formats









a.out
AIF
COFF
CMD
COM
ECOFF
ELF
GOFF
Hunk
Mach-O
MZ
NE
OMF
OS/360
PE
PEF
XCOFF











Comparison of formats
.exe













Authority control



GND: 4145562-9















					
						Retrieved from "https://en.wikipedia.org/w/index.php?title=Linker_(computing)&amp;oldid=691096134"					
				Categories: CompilersComputer librariesProgramming language implementationUtility software typesHidden categories: Articles lacking in-text citations from February 2014All articles lacking in-text citationsWikipedia articles with GND identifiers				
							
		
		
			